

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Mar 20 23:01:24 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    31   000000                     
    32                           ; Version 2.40
    33                           ; Generated 17/11/2021 GMT
    34                           ; 
    35                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F4331 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67   000000                     
    68                           	psect	idataCOMRAM
    69   0002F4                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _number_of_callbacks
    73   0002F4  01                 	db	1
    74   000000                     _ADRESL	set	4035
    75   000000                     _ADRESH	set	4036
    76                           
    77                           	psect	nvCOMRAM
    78   000018                     __pnvCOMRAM:
    79                           	callstack 0
    80   000018                     _FSM_state:
    81                           	callstack 0
    82   000018                     	ds	1
    83   000000                     _ADCHSbits	set	3993
    84   000000                     _ADCON1bits	set	4033
    85   000000                     _ADCON0bits	set	4034
    86   000000                     _ANSEL0bits	set	4024
    87   000000                     _ADCON2bits	set	4032
    88   000000                     _T0CONbits	set	4053
    89   000000                     _TMR0L	set	4054
    90   000000                     _INTCONbits	set	4082
    91   000000                     _TMR0H	set	4055
    92                           
    93                           ; #config settings
    94                           
    95                           	psect	cinit
    96   00022A                     __pcinit:
    97                           	callstack 0
    98   00022A                     start_initialization:
    99                           	callstack 0
   100   00022A                     __initialization:
   101                           	callstack 0
   102                           
   103                           ; Initialize objects allocated to COMRAM (1 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105   00022A  0EF4               	movlw	low __pidataCOMRAM
   106   00022C  6EF6               	movwf	tblptrl,c
   107   00022E  0E02               	movlw	high __pidataCOMRAM
   108   000230  6EF7               	movwf	tblptrh,c
   109   000232  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110   000234  6EF8               	movwf	tblptru,c
   111   000236  0009               	tblrd		*+	;fetch initializer
   112   000238  CFF5 F019          	movff	tablat,__pdataCOMRAM
   113                           
   114                           ; Clear objects allocated to BANK0 (80 bytes)
   115   00023C  EE00  F060         	lfsr	0,__pbssBANK0
   116   000240  0E50               	movlw	80
   117   000242                     clear_0:
   118   000242  6AEE               	clrf	postinc0,c
   119   000244  06E8               	decf	wreg,f,c
   120   000246  E1FD               	bnz	clear_0
   121                           
   122                           ; Clear objects allocated to COMRAM (6 bytes)
   123   000248  6A17               	clrf	(__pbssCOMRAM+5)& (0+255),c
   124   00024A  6A16               	clrf	(__pbssCOMRAM+4)& (0+255),c
   125   00024C  6A15               	clrf	(__pbssCOMRAM+3)& (0+255),c
   126   00024E  6A14               	clrf	(__pbssCOMRAM+2)& (0+255),c
   127   000250  6A13               	clrf	(__pbssCOMRAM+1)& (0+255),c
   128   000252  6A12               	clrf	__pbssCOMRAM& (0+255),c
   129   000254                     end_of_initialization:
   130                           	callstack 0
   131   000254                     __end_of__initialization:
   132                           	callstack 0
   133   000254  901A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   134   000256  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   135   000258  0E00               	movlw	low (__Lmediumconst shr (0+16))
   136   00025A  6EF8               	movwf	tblptru,c
   137   00025C  0100               	movlb	0
   138   00025E  EF5E  F001         	goto	_main	;jump to C main() function
   139                           
   140                           	psect	bssCOMRAM
   141   000012                     __pbssCOMRAM:
   142                           	callstack 0
   143   000012                     _system_count:
   144                           	callstack 0
   145   000012                     	ds	2
   146   000014                     _tmr0Counter:
   147                           	callstack 0
   148   000014                     	ds	2
   149   000016                     _ADC:
   150                           	callstack 0
   151   000016                     	ds	2
   152                           
   153                           	psect	dataCOMRAM
   154   000019                     __pdataCOMRAM:
   155                           	callstack 0
   156   000019                     _number_of_callbacks:
   157                           	callstack 0
   158   000019                     	ds	1
   159                           
   160                           	psect	bssBANK0
   161   000060                     __pbssBANK0:
   162                           	callstack 0
   163   000060                     _registered_callbacks:
   164                           	callstack 0
   165   000060                     	ds	80
   166                           
   167                           	psect	cstackCOMRAM
   168   000001                     __pcstackCOMRAM:
   169                           	callstack 0
   170   000001                     
   171                           ; 1 bytes @ 0x0
   172   000001                     	ds	4
   173   000005                     Callbacks_Manager@callbacks:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0x4
   177   000005                     	ds	1
   178   000006                     ??_timer_overflow_isr:
   179                           
   180                           ; 1 bytes @ 0x5
   181   000006                     	ds	6
   182   00000C                     ?_ADC_Read:
   183                           	callstack 0
   184   00000C                     set_state@state_to_set:
   185                           	callstack 0
   186                           
   187                           ; 1 bytes @ 0xB
   188   00000C                     	ds	2
   189   00000E                     SMS_read_and_set_state@moisture:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0xD
   193   00000E                     	ds	2
   194   000010                     ??_FSM_begin:
   195                           
   196                           ; 1 bytes @ 0xF
   197   000010                     	ds	2
   198   000012                     
   199                           ; 1 bytes @ 0x11
   200 ;;
   201 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   202 ;;
   203 ;; *************** function _main *****************
   204 ;; Defined at:
   205 ;;		line 14 in file "main.c"
   206 ;; Parameters:    Size  Location     Type
   207 ;;		None
   208 ;; Auto vars:     Size  Location     Type
   209 ;;		None
   210 ;; Return value:  Size  Location     Type
   211 ;;                  1    wreg      void 
   212 ;; Registers used:
   213 ;;		wreg, status,2, status,0, cstack
   214 ;; Tracked objects:
   215 ;;		On entry : 0/0
   216 ;;		On exit  : 0/0
   217 ;;		Unchanged: 0/0
   218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   219 ;;      Params:         0       0       0       0
   220 ;;      Locals:         0       0       0       0
   221 ;;      Temps:          0       0       0       0
   222 ;;      Totals:         0       0       0       0
   223 ;;Total ram usage:        0 bytes
   224 ;; Hardware stack levels required when called: 6
   225 ;; This function calls:
   226 ;;		_FSM_begin
   227 ;;		_set_state
   228 ;; This function is called by:
   229 ;;		Startup code after reset
   230 ;; This function uses a non-reentrant model
   231 ;;
   232                           
   233                           	psect	text0
   234   0002BC                     __ptext0:
   235                           	callstack 0
   236   0002BC                     _main:
   237                           	callstack 25
   238   0002BC                     
   239                           ;main.c: 16:     set_state(INIT_STATE);
   240   0002BC  0E00               	movlw	0
   241   0002BE  EC6C  F001         	call	_set_state
   242   0002C2                     
   243                           ;main.c: 17:     FSM_begin();
   244   0002C2  ECA6  F000         	call	_FSM_begin	;wreg free
   245   0002C6  EF43  F000         	goto	start
   246   0002CA                     __end_of_main:
   247                           	callstack 0
   248                           
   249 ;; *************** function _FSM_begin *****************
   250 ;; Defined at:
   251 ;;		line 7 in file "System_FSM.c"
   252 ;; Parameters:    Size  Location     Type
   253 ;;		None
   254 ;; Auto vars:     Size  Location     Type
   255 ;;		None
   256 ;; Return value:  Size  Location     Type
   257 ;;                  1    wreg      void 
   258 ;; Registers used:
   259 ;;		wreg, status,2, status,0, cstack
   260 ;; Tracked objects:
   261 ;;		On entry : 0/0
   262 ;;		On exit  : 0/0
   263 ;;		Unchanged: 0/0
   264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   265 ;;      Params:         0       0       0       0
   266 ;;      Locals:         0       0       0       0
   267 ;;      Temps:          2       0       0       0
   268 ;;      Totals:         2       0       0       0
   269 ;;Total ram usage:        2 bytes
   270 ;; Hardware stack levels used: 1
   271 ;; Hardware stack levels required when called: 5
   272 ;; This function calls:
   273 ;;		_SMS_init
   274 ;;		_SMS_read_and_set_state
   275 ;;		_Timer0_init
   276 ;;		_get_current_state
   277 ;;		_set_state
   278 ;; This function is called by:
   279 ;;		_main
   280 ;; This function uses a non-reentrant model
   281 ;;
   282                           
   283                           	psect	text1
   284   00014C                     __ptext1:
   285                           	callstack 0
   286   00014C                     _FSM_begin:
   287                           	callstack 25
   288   00014C                     
   289                           ;System_FSM.c: 9:     switch(get_current_state())
   290   00014C  EFC6  F000         	goto	l1098
   291   000150                     l1084:
   292                           
   293                           ;System_FSM.c: 12:         {;System_FSM.c: 14:             SMS_init();
   294   000150  EC73  F001         	call	_SMS_init	;wreg free
   295   000154                     
   296                           ;System_FSM.c: 15:             Timer0_init();
   297   000154  EC65  F001         	call	_Timer0_init	;wreg free
   298   000158                     
   299                           ;System_FSM.c: 16:             set_state(IDLE_STATE);
   300   000158  0E01               	movlw	1
   301   00015A  EC6C  F001         	call	_set_state
   302                           
   303                           ;System_FSM.c: 17:             break;
   304   00015E  EFE4  F000         	goto	l118
   305   000162                     l1090:
   306                           
   307                           ;System_FSM.c: 22:             while(get_current_state() == IDLE_STATE)
   308   000162  EC76  F001         	call	_get_current_state	;wreg free
   309   000166  06E8               	decf	wreg,f,c
   310   000168  B4D8               	btfsc	status,2,c
   311   00016A  EFB9  F000         	goto	u301
   312   00016E  EFBB  F000         	goto	u300
   313   000172                     u301:
   314   000172  EFB1  F000         	goto	l1090
   315   000176                     u300:
   316   000176  EFE4  F000         	goto	l118
   317   00017A                     l1092:
   318                           
   319                           ;System_FSM.c: 41:         {;System_FSM.c: 44:             SMS_read_and_set_state();
   320   00017A  ECE5  F000         	call	_SMS_read_and_set_state	;wreg free
   321                           
   322                           ;System_FSM.c: 45:             break;
   323   00017E  EFE4  F000         	goto	l118
   324   000182                     l1094:
   325                           
   326                           ;System_FSM.c: 49:         {;System_FSM.c: 50:             set_state(INIT_STATE);
   327   000182  0E00               	movlw	0
   328   000184  EC6C  F001         	call	_set_state
   329                           
   330                           ;System_FSM.c: 51:             break;
   331   000188  EFE4  F000         	goto	l118
   332   00018C                     l1098:
   333   00018C  EC76  F001         	call	_get_current_state	;wreg free
   334   000190  6E10               	movwf	??_FSM_begin^0,c
   335   000192  6A11               	clrf	(??_FSM_begin+1)^0,c
   336                           
   337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   338                           ; Switch size 1, requested type "simple"
   339                           ; Number of cases is 1, Range of values is 0 to 0
   340                           ; switch strategies available:
   341                           ; Name         Instructions Cycles
   342                           ; simple_byte            4     3 (average)
   343                           ;	Chosen strategy is simple_byte
   344   000194  5011               	movf	(??_FSM_begin+1)^0,w,c
   345   000196  0A00               	xorlw	0	; case 0
   346   000198  B4D8               	btfsc	status,2,c
   347   00019A  EFD1  F000         	goto	l1208
   348   00019E  EFC1  F000         	goto	l1094
   349   0001A2                     l1208:
   350                           
   351                           ; Switch size 1, requested type "simple"
   352                           ; Number of cases is 4, Range of values is 0 to 3
   353                           ; switch strategies available:
   354                           ; Name         Instructions Cycles
   355                           ; simple_byte           13     7 (average)
   356                           ;	Chosen strategy is simple_byte
   357   0001A2  5010               	movf	??_FSM_begin^0,w,c
   358   0001A4  0A00               	xorlw	0	; case 0
   359   0001A6  B4D8               	btfsc	status,2,c
   360   0001A8  EFA8  F000         	goto	l1084
   361   0001AC  0A01               	xorlw	1	; case 1
   362   0001AE  B4D8               	btfsc	status,2,c
   363   0001B0  EFB1  F000         	goto	l1090
   364   0001B4  0A03               	xorlw	3	; case 2
   365   0001B6  B4D8               	btfsc	status,2,c
   366   0001B8  EFE4  F000         	goto	l118
   367   0001BC  0A01               	xorlw	1	; case 3
   368   0001BE  B4D8               	btfsc	status,2,c
   369   0001C0  EFBD  F000         	goto	l1092
   370   0001C4  EFC1  F000         	goto	l1094
   371   0001C8                     l118:
   372   0001C8  0012               	return		;funcret
   373   0001CA                     __end_of_FSM_begin:
   374                           	callstack 0
   375                           
   376 ;; *************** function _get_current_state *****************
   377 ;; Defined at:
   378 ;;		line 5 in file "FSM_states.c"
   379 ;; Parameters:    Size  Location     Type
   380 ;;		None
   381 ;; Auto vars:     Size  Location     Type
   382 ;;		None
   383 ;; Return value:  Size  Location     Type
   384 ;;                  1    wreg      enum E2
   385 ;; Registers used:
   386 ;;		wreg, status,2
   387 ;; Tracked objects:
   388 ;;		On entry : 0/0
   389 ;;		On exit  : 0/0
   390 ;;		Unchanged: 0/0
   391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   392 ;;      Params:         0       0       0       0
   393 ;;      Locals:         0       0       0       0
   394 ;;      Temps:          0       0       0       0
   395 ;;      Totals:         0       0       0       0
   396 ;;Total ram usage:        0 bytes
   397 ;; Hardware stack levels used: 1
   398 ;; Hardware stack levels required when called: 2
   399 ;; This function calls:
   400 ;;		Nothing
   401 ;; This function is called by:
   402 ;;		_FSM_begin
   403 ;; This function uses a non-reentrant model
   404 ;;
   405                           
   406                           	psect	text2
   407   0002EC                     __ptext2:
   408                           	callstack 0
   409   0002EC                     _get_current_state:
   410                           	callstack 27
   411   0002EC                     
   412                           ;FSM_states.c: 7:     return FSM_state;
   413   0002EC  5018               	movf	_FSM_state^0,w,c
   414   0002EE  0012               	return		;funcret
   415   0002F0                     __end_of_get_current_state:
   416                           	callstack 0
   417                           
   418 ;; *************** function _Timer0_init *****************
   419 ;; Defined at:
   420 ;;		line 56 in file "PIC18F4331_Timer.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;		None
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		None
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   434 ;;      Params:         0       0       0       0
   435 ;;      Locals:         0       0       0       0
   436 ;;      Temps:          0       0       0       0
   437 ;;      Totals:         0       0       0       0
   438 ;;Total ram usage:        0 bytes
   439 ;; Hardware stack levels used: 1
   440 ;; Hardware stack levels required when called: 2
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_FSM_begin
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text3
   449   0002CA                     __ptext3:
   450                           	callstack 0
   451   0002CA                     _Timer0_init:
   452                           	callstack 27
   453   0002CA                     
   454                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   455   0002CA  80D5               	bsf	213,0,c	;volatile
   456                           
   457                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 1;
   458   0002CC  82D5               	bsf	213,1,c	;volatile
   459                           
   460                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   461   0002CE  84D5               	bsf	213,2,c	;volatile
   462                           
   463                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   464   0002D0  96D5               	bcf	213,3,c	;volatile
   465                           
   466                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   467   0002D2  9AD5               	bcf	213,5,c	;volatile
   468                           
   469                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   470   0002D4  9CD5               	bcf	213,6,c	;volatile
   471   0002D6  0012               	return		;funcret
   472   0002D8                     __end_of_Timer0_init:
   473                           	callstack 0
   474                           
   475 ;; *************** function _SMS_read_and_set_state *****************
   476 ;; Defined at:
   477 ;;		line 13 in file "SoilMoistureSensor.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;  moisture        2   13[COMRAM] unsigned short 
   482 ;; Return value:  Size  Location     Type
   483 ;;                  1    wreg      void 
   484 ;; Registers used:
   485 ;;		wreg, status,2, status,0, cstack
   486 ;; Tracked objects:
   487 ;;		On entry : 0/0
   488 ;;		On exit  : 0/0
   489 ;;		Unchanged: 0/0
   490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   491 ;;      Params:         0       0       0       0
   492 ;;      Locals:         2       0       0       0
   493 ;;      Temps:          0       0       0       0
   494 ;;      Totals:         2       0       0       0
   495 ;;Total ram usage:        2 bytes
   496 ;; Hardware stack levels used: 1
   497 ;; Hardware stack levels required when called: 4
   498 ;; This function calls:
   499 ;;		_ADC_Read
   500 ;;		_set_state
   501 ;; This function is called by:
   502 ;;		_FSM_begin
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text4
   507   0001CA                     __ptext4:
   508                           	callstack 0
   509   0001CA                     _SMS_read_and_set_state:
   510                           	callstack 25
   511   0001CA                     
   512                           ;SoilMoistureSensor.c: 15:     uint16_t moisture = ADC_Read();
   513   0001CA  EC31  F001         	call	_ADC_Read	;wreg free
   514   0001CE  C00C  F00E         	movff	?_ADC_Read,SMS_read_and_set_state@moisture
   515   0001D2  C00D  F00F         	movff	?_ADC_Read+1,SMS_read_and_set_state@moisture+1
   516   0001D6                     
   517                           ;SoilMoistureSensor.c: 16:     if(moisture >= (595))
   518   0001D6  0E53               	movlw	83
   519   0001D8  5C0E               	subwf	SMS_read_and_set_state@moisture^0,w,c
   520   0001DA  0E02               	movlw	2
   521   0001DC  580F               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   522   0001DE  A0D8               	btfss	status,0,c
   523   0001E0  EFF4  F000         	goto	u231
   524   0001E4  EFF6  F000         	goto	u230
   525   0001E8                     u231:
   526   0001E8  EFFB  F000         	goto	l1056
   527   0001EC                     u230:
   528   0001EC                     
   529                           ;SoilMoistureSensor.c: 17:     {;SoilMoistureSensor.c: 18:         set_state(WATER_PLANT
      +                          S);
   530   0001EC  0E02               	movlw	2
   531   0001EE  EC6C  F001         	call	_set_state
   532                           
   533                           ;SoilMoistureSensor.c: 19:     }
   534   0001F2  EF14  F001         	goto	l87
   535   0001F6                     l1056:
   536   0001F6  500F               	movf	(SMS_read_and_set_state@moisture+1)^0,w,c
   537   0001F8  E109               	bnz	u240
   538   0001FA  0EEF               	movlw	239
   539   0001FC  5C0E               	subwf	SMS_read_and_set_state@moisture^0,w,c
   540   0001FE  A0D8               	btfss	status,0,c
   541   000200  EF04  F001         	goto	u241
   542   000204  EF06  F001         	goto	u240
   543   000208                     u241:
   544   000208  EF14  F001         	goto	l87
   545   00020C                     u240:
   546   00020C  0E53               	movlw	83
   547   00020E  5C0E               	subwf	SMS_read_and_set_state@moisture^0,w,c
   548   000210  0E02               	movlw	2
   549   000212  580F               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   550   000214  B0D8               	btfsc	status,0,c
   551   000216  EF0F  F001         	goto	u251
   552   00021A  EF11  F001         	goto	u250
   553   00021E                     u251:
   554   00021E  EF14  F001         	goto	l87
   555   000222                     u250:
   556   000222                     
   557                           ;SoilMoistureSensor.c: 21:     {;SoilMoistureSensor.c: 23:         set_state(IDLE_STATE)
      +                          ;
   558   000222  0E01               	movlw	1
   559   000224  EC6C  F001         	call	_set_state
   560   000228                     l87:
   561   000228  0012               	return		;funcret
   562   00022A                     __end_of_SMS_read_and_set_state:
   563                           	callstack 0
   564                           
   565 ;; *************** function _set_state *****************
   566 ;; Defined at:
   567 ;;		line 9 in file "FSM_states.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;  state_to_set    1    wreg     enum E2
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  state_to_set    1   11[COMRAM] enum E2
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   581 ;;      Params:         0       0       0       0
   582 ;;      Locals:         1       0       0       0
   583 ;;      Temps:          0       0       0       0
   584 ;;      Totals:         1       0       0       0
   585 ;;Total ram usage:        1 bytes
   586 ;; Hardware stack levels used: 1
   587 ;; Hardware stack levels required when called: 2
   588 ;; This function calls:
   589 ;;		Nothing
   590 ;; This function is called by:
   591 ;;		_main
   592 ;;		_SMS_read_and_set_state
   593 ;;		_FSM_begin
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text5
   598   0002D8                     __ptext5:
   599                           	callstack 0
   600   0002D8                     _set_state:
   601                           	callstack 28
   602                           
   603                           ;incstack = 0
   604                           ;set_state@state_to_set stored from wreg
   605   0002D8  6E0C               	movwf	set_state@state_to_set^0,c
   606   0002DA                     
   607                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
   608   0002DA  C00C  F018         	movff	set_state@state_to_set,_FSM_state
   609   0002DE  0012               	return		;funcret
   610   0002E0                     __end_of_set_state:
   611                           	callstack 0
   612                           
   613 ;; *************** function _ADC_Read *****************
   614 ;; Defined at:
   615 ;;		line 60 in file "PIC18F4331_ADC.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;		None
   620 ;; Return value:  Size  Location     Type
   621 ;;                  2   11[COMRAM] unsigned short 
   622 ;; Registers used:
   623 ;;		wreg, status,2, cstack
   624 ;; Tracked objects:
   625 ;;		On entry : 0/0
   626 ;;		On exit  : 0/0
   627 ;;		Unchanged: 0/0
   628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   629 ;;      Params:         2       0       0       0
   630 ;;      Locals:         0       0       0       0
   631 ;;      Temps:          0       0       0       0
   632 ;;      Totals:         2       0       0       0
   633 ;;Total ram usage:        2 bytes
   634 ;; Hardware stack levels used: 1
   635 ;; Hardware stack levels required when called: 3
   636 ;; This function calls:
   637 ;;		_ADC_in_progress
   638 ;;		_ADC_start
   639 ;; This function is called by:
   640 ;;		_SMS_read_and_set_state
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           	psect	text6
   645   000262                     __ptext6:
   646                           	callstack 0
   647   000262                     _ADC_Read:
   648                           	callstack 25
   649   000262                     
   650                           ;PIC18F4331_ADC.c: 62:     ADC_start();
   651   000262  EC70  F001         	call	_ADC_start	;wreg free
   652   000266                     l1048:
   653   000266  EC54  F001         	call	_ADC_in_progress	;wreg free
   654   00026A  0900               	iorlw	0
   655   00026C  A4D8               	btfss	status,2,c
   656   00026E  EF3B  F001         	goto	u221
   657   000272  EF3D  F001         	goto	u220
   658   000276                     u221:
   659   000276  EF33  F001         	goto	l1048
   660   00027A                     u220:
   661   00027A                     
   662                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
   663   00027A  CFC4 F017          	movff	4036,_ADC+1	;volatile
   664                           
   665                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
   666   00027E  CFC3 F016          	movff	4035,_ADC	;volatile
   667                           
   668                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
   669   000282  C016  F00C         	movff	_ADC,?_ADC_Read
   670   000286  C017  F00D         	movff	_ADC+1,?_ADC_Read+1
   671   00028A  0012               	return		;funcret
   672   00028C                     __end_of_ADC_Read:
   673                           	callstack 0
   674                           
   675 ;; *************** function _ADC_start *****************
   676 ;; Defined at:
   677 ;;		line 13 in file "PIC18F4331_ADC.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;		None
   682 ;; Return value:  Size  Location     Type
   683 ;;                  1    wreg      void 
   684 ;; Registers used:
   685 ;;		None
   686 ;; Tracked objects:
   687 ;;		On entry : 0/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   691 ;;      Params:         0       0       0       0
   692 ;;      Locals:         0       0       0       0
   693 ;;      Temps:          0       0       0       0
   694 ;;      Totals:         0       0       0       0
   695 ;;Total ram usage:        0 bytes
   696 ;; Hardware stack levels used: 1
   697 ;; Hardware stack levels required when called: 2
   698 ;; This function calls:
   699 ;;		Nothing
   700 ;; This function is called by:
   701 ;;		_ADC_Read
   702 ;; This function uses a non-reentrant model
   703 ;;
   704                           
   705                           	psect	text7
   706   0002E0                     __ptext7:
   707                           	callstack 0
   708   0002E0                     _ADC_start:
   709                           	callstack 25
   710   0002E0                     
   711                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
   712   0002E0  80C2               	bsf	194,0,c	;volatile
   713                           
   714                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
   715   0002E2  82C2               	bsf	194,1,c	;volatile
   716   0002E4  0012               	return		;funcret
   717   0002E6                     __end_of_ADC_start:
   718                           	callstack 0
   719                           
   720 ;; *************** function _ADC_in_progress *****************
   721 ;; Defined at:
   722 ;;		line 53 in file "PIC18F4331_ADC.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;		None
   725 ;; Auto vars:     Size  Location     Type
   726 ;;		None
   727 ;; Return value:  Size  Location     Type
   728 ;;                  1    wreg      unsigned char 
   729 ;; Registers used:
   730 ;;		wreg
   731 ;; Tracked objects:
   732 ;;		On entry : 0/0
   733 ;;		On exit  : 0/0
   734 ;;		Unchanged: 0/0
   735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   736 ;;      Params:         0       0       0       0
   737 ;;      Locals:         0       0       0       0
   738 ;;      Temps:          0       0       0       0
   739 ;;      Totals:         0       0       0       0
   740 ;;Total ram usage:        0 bytes
   741 ;; Hardware stack levels used: 1
   742 ;; Hardware stack levels required when called: 2
   743 ;; This function calls:
   744 ;;		Nothing
   745 ;; This function is called by:
   746 ;;		_ADC_Read
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text8
   751   0002A8                     __ptext8:
   752                           	callstack 0
   753   0002A8                     _ADC_in_progress:
   754                           	callstack 25
   755   0002A8                     
   756                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
   757   0002A8  B2C2               	btfsc	194,1,c	;volatile
   758   0002AA  EF59  F001         	goto	u11
   759   0002AE  EF5C  F001         	goto	u10
   760   0002B2                     u11:
   761   0002B2  0E01               	movlw	1
   762   0002B4  EF5D  F001         	goto	u16
   763   0002B8                     u10:
   764   0002B8  0E00               	movlw	0
   765   0002BA                     u16:
   766   0002BA  0012               	return		;funcret
   767   0002BC                     __end_of_ADC_in_progress:
   768                           	callstack 0
   769                           
   770 ;; *************** function _SMS_init *****************
   771 ;; Defined at:
   772 ;;		line 8 in file "SoilMoistureSensor.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, status,2, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   786 ;;      Params:         0       0       0       0
   787 ;;      Locals:         0       0       0       0
   788 ;;      Temps:          0       0       0       0
   789 ;;      Totals:         0       0       0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels used: 1
   792 ;; Hardware stack levels required when called: 4
   793 ;; This function calls:
   794 ;;		_ADC_init
   795 ;; This function is called by:
   796 ;;		_FSM_begin
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text9
   801   0002E6                     __ptext9:
   802                           	callstack 0
   803   0002E6                     _SMS_init:
   804                           	callstack 25
   805   0002E6                     
   806                           ;SoilMoistureSensor.c: 10:     ADC_init();
   807   0002E6  EC46  F001         	call	_ADC_init	;wreg free
   808   0002EA  0012               	return		;funcret
   809   0002EC                     __end_of_SMS_init:
   810                           	callstack 0
   811                           
   812 ;; *************** function _ADC_init *****************
   813 ;; Defined at:
   814 ;;		line 24 in file "PIC18F4331_ADC.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;		None
   817 ;; Auto vars:     Size  Location     Type
   818 ;;		None
   819 ;; Return value:  Size  Location     Type
   820 ;;                  1    wreg      void 
   821 ;; Registers used:
   822 ;;		wreg, status,2, cstack
   823 ;; Tracked objects:
   824 ;;		On entry : 0/0
   825 ;;		On exit  : 0/0
   826 ;;		Unchanged: 0/0
   827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   828 ;;      Params:         0       0       0       0
   829 ;;      Locals:         0       0       0       0
   830 ;;      Temps:          0       0       0       0
   831 ;;      Totals:         0       0       0       0
   832 ;;Total ram usage:        0 bytes
   833 ;; Hardware stack levels used: 1
   834 ;; Hardware stack levels required when called: 3
   835 ;; This function calls:
   836 ;;		_ADC_stop
   837 ;; This function is called by:
   838 ;;		_SMS_init
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text10
   843   00028C                     __ptext10:
   844                           	callstack 0
   845   00028C                     _ADC_init:
   846                           	callstack 25
   847   00028C                     
   848                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
   849   00028C  EC78  F001         	call	_ADC_stop	;wreg free
   850   000290                     
   851                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
   852   000290  0E3F               	movlw	-193
   853   000292  16C1               	andwf	193,f,c	;volatile
   854   000294                     
   855                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
   856   000294  9099               	bcf	153,0,c	;volatile
   857   000296                     
   858                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
   859   000296  9299               	bcf	153,1,c	;volatile
   860   000298                     
   861                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
   862   000298  9AC2               	bcf	194,5,c	;volatile
   863   00029A                     
   864                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
   865   00029A  0EF8               	movlw	-8
   866   00029C  16C0               	andwf	192,f,c	;volatile
   867   00029E                     
   868                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
   869   00029E  8EC0               	bsf	192,7,c	;volatile
   870   0002A0                     
   871                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
   872   0002A0  0E87               	movlw	-121
   873   0002A2  16C0               	andwf	192,f,c	;volatile
   874   0002A4                     
   875                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
   876   0002A4  80B8               	bsf	184,0,c	;volatile
   877   0002A6  0012               	return		;funcret
   878   0002A8                     __end_of_ADC_init:
   879                           	callstack 0
   880                           
   881 ;; *************** function _ADC_stop *****************
   882 ;; Defined at:
   883 ;;		line 19 in file "PIC18F4331_ADC.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;		None
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		None
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   897 ;;      Params:         0       0       0       0
   898 ;;      Locals:         0       0       0       0
   899 ;;      Temps:          0       0       0       0
   900 ;;      Totals:         0       0       0       0
   901 ;;Total ram usage:        0 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 2
   904 ;; This function calls:
   905 ;;		Nothing
   906 ;; This function is called by:
   907 ;;		_ADC_init
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           	psect	text11
   912   0002F0                     __ptext11:
   913                           	callstack 0
   914   0002F0                     _ADC_stop:
   915                           	callstack 25
   916   0002F0                     
   917                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
   918   0002F0  90C2               	bcf	194,0,c	;volatile
   919   0002F2  0012               	return		;funcret
   920   0002F4                     __end_of_ADC_stop:
   921                           	callstack 0
   922                           
   923 ;; *************** function _timer_overflow_isr *****************
   924 ;; Defined at:
   925 ;;		line 10 in file "PIC18F4331_Timer.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;		None
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   939 ;;      Params:         0       0       0       0
   940 ;;      Locals:         0       0       0       0
   941 ;;      Temps:          6       0       0       0
   942 ;;      Totals:         6       0       0       0
   943 ;;Total ram usage:        6 bytes
   944 ;; Hardware stack levels used: 1
   945 ;; Hardware stack levels required when called: 1
   946 ;; This function calls:
   947 ;;		_Callbacks_Manager
   948 ;; This function is called by:
   949 ;;		Interrupt level 2
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	intcode
   954   000008                     __pintcode:
   955                           	callstack 0
   956   000008                     _timer_overflow_isr:
   957                           	callstack 25
   958                           
   959                           ;incstack = 0
   960   000008  821A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   961   00000A  CFE1 F006          	movff	fsr1l,??_timer_overflow_isr
   962   00000E  CFE2 F007          	movff	fsr1h,??_timer_overflow_isr+1
   963   000012  CFD9 F008          	movff	fsr2l,??_timer_overflow_isr+2
   964   000016  CFDA F009          	movff	fsr2h,??_timer_overflow_isr+3
   965   00001A  CFF3 F00A          	movff	prodl,??_timer_overflow_isr+4
   966   00001E  CFF4 F00B          	movff	prodh,??_timer_overflow_isr+5
   967   000022                     
   968                           ;PIC18F4331_Timer.c: 13:     INTCONbits.GIEH = 0;
   969   000022  9EF2               	bcf	242,7,c	;volatile
   970                           
   971                           ;PIC18F4331_Timer.c: 14:     INTCONbits.GIEL = 1;
   972   000024  8CF2               	bsf	242,6,c	;volatile
   973   000026                     
   974                           ;PIC18F4331_Timer.c: 28:     if(TMR0L < (0x7C))
   975   000026  0E7C               	movlw	124
   976   000028  60D6               	cpfslt	214,c	;volatile
   977   00002A  EF19  F000         	goto	i2u33_41
   978   00002E  EF1B  F000         	goto	i2u33_40
   979   000032                     i2u33_41:
   980   000032  EF1D  F000         	goto	i2l1136
   981   000036                     i2u33_40:
   982   000036                     
   983                           ;PIC18F4331_Timer.c: 29:     {;PIC18F4331_Timer.c: 30:         TMR0L = (0x7C);
   984   000036  0E7C               	movlw	124
   985   000038  6ED6               	movwf	214,c	;volatile
   986   00003A                     i2l1136:
   987                           
   988                           ;PIC18F4331_Timer.c: 32:     if(TMR0H < (0xE1))
   989   00003A  0EE1               	movlw	225
   990   00003C  60D7               	cpfslt	215,c	;volatile
   991   00003E  EF23  F000         	goto	i2u34_41
   992   000042  EF25  F000         	goto	i2u34_40
   993   000046                     i2u34_41:
   994   000046  EF27  F000         	goto	i2l1140
   995   00004A                     i2u34_40:
   996   00004A                     
   997                           ;PIC18F4331_Timer.c: 33:     {;PIC18F4331_Timer.c: 34:         TMR0H = (0xE1);
   998   00004A  0EE1               	movlw	225
   999   00004C  6ED7               	movwf	215,c	;volatile
  1000   00004E                     i2l1140:
  1001                           
  1002                           ;PIC18F4331_Timer.c: 38:     if(INTCONbits.TMR0IF)
  1003   00004E  A4F2               	btfss	242,2,c	;volatile
  1004   000050  EF2C  F000         	goto	i2u35_41
  1005   000054  EF2E  F000         	goto	i2u35_40
  1006   000058                     i2u35_41:
  1007   000058  EF33  F000         	goto	i2l1148
  1008   00005C                     i2u35_40:
  1009   00005C                     
  1010                           ;PIC18F4331_Timer.c: 39:     {;PIC18F4331_Timer.c: 41:         tmr0Counter++;
  1011   00005C  4A14               	infsnz	_tmr0Counter^0,f,c	;volatile
  1012   00005E  2A15               	incf	(_tmr0Counter+1)^0,f,c	;volatile
  1013   000060                     
  1014                           ;PIC18F4331_Timer.c: 43:         Callbacks_Manager();
  1015   000060  EC45  F000         	call	_Callbacks_Manager	;wreg free
  1016   000064                     
  1017                           ;PIC18F4331_Timer.c: 46:         INTCONbits.TMR0IF = 0;
  1018   000064  94F2               	bcf	242,2,c	;volatile
  1019   000066                     i2l1148:
  1020                           
  1021                           ;PIC18F4331_Timer.c: 50:     INTCONbits.GIEH = 1;
  1022   000066  8EF2               	bsf	242,7,c	;volatile
  1023   000068                     
  1024                           ;PIC18F4331_Timer.c: 51:     INTCONbits.GIEL = 1;
  1025   000068  8CF2               	bsf	242,6,c	;volatile
  1026   00006A  C00B  FFF4         	movff	??_timer_overflow_isr+5,prodh
  1027   00006E  C00A  FFF3         	movff	??_timer_overflow_isr+4,prodl
  1028   000072  C009  FFDA         	movff	??_timer_overflow_isr+3,fsr2h
  1029   000076  C008  FFD9         	movff	??_timer_overflow_isr+2,fsr2l
  1030   00007A  C007  FFE2         	movff	??_timer_overflow_isr+1,fsr1h
  1031   00007E  C006  FFE1         	movff	??_timer_overflow_isr,fsr1l
  1032   000082  921A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1033   000084  0011               	retfie		f
  1034   000086                     __end_of_timer_overflow_isr:
  1035                           	callstack 0
  1036                           
  1037 ;; *************** function _Callbacks_Manager *****************
  1038 ;; Defined at:
  1039 ;;		line 41 in file "SystemCallbacks.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;		None
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  callbacks       1    4[COMRAM] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1053 ;;      Params:         0       0       0       0
  1054 ;;      Locals:         1       0       0       0
  1055 ;;      Temps:          4       0       0       0
  1056 ;;      Totals:         5       0       0       0
  1057 ;;Total ram usage:        5 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_timer_overflow_isr
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text13
  1067   00008A                     __ptext13:
  1068                           	callstack 0
  1069   00008A                     _Callbacks_Manager:
  1070                           	callstack 25
  1071   00008A                     
  1072                           ;SystemCallbacks.c: 47:     system_count++;
  1073   00008A  4A12               	infsnz	_system_count^0,f,c
  1074   00008C  2A13               	incf	(_system_count+1)^0,f,c
  1075   00008E                     
  1076                           ;SystemCallbacks.c: 48:     if (system_count == (65000))
  1077   00008E  0EE8               	movlw	232
  1078   000090  1812               	xorwf	_system_count^0,w,c
  1079   000092  E107               	bnz	i2u26_41
  1080   000094  0EFD               	movlw	253
  1081   000096  1813               	xorwf	(_system_count+1)^0,w,c
  1082   000098  A4D8               	btfss	status,2,c
  1083   00009A  EF51  F000         	goto	i2u26_41
  1084   00009E  EF53  F000         	goto	i2u26_40
  1085   0000A2                     i2u26_41:
  1086   0000A2  EF57  F000         	goto	i2l141
  1087   0000A6                     i2u26_40:
  1088   0000A6                     
  1089                           ;SystemCallbacks.c: 49:     {;SystemCallbacks.c: 50:         system_count = 0;
  1090   0000A6  0E00               	movlw	0
  1091   0000A8  6E13               	movwf	(_system_count+1)^0,c
  1092   0000AA  0E00               	movlw	0
  1093   0000AC  6E12               	movwf	_system_count^0,c
  1094   0000AE                     i2l141:
  1095                           
  1096                           ;SystemCallbacks.c: 53:     for (U8 callbacks = 0; callbacks < 1; callbacks++)
  1097   0000AE  0E00               	movlw	0
  1098   0000B0  6E05               	movwf	Callbacks_Manager@callbacks^0,c
  1099   0000B2                     i2l1070:
  1100                           
  1101                           ;SystemCallbacks.c: 54:     {;SystemCallbacks.c: 55:         (registered_callbacks[callb
      +                          acks].count)++;
  1102   0000B2  5005               	movf	Callbacks_Manager@callbacks^0,w,c
  1103   0000B4  0D08               	mullw	8
  1104   0000B6  0E65               	movlw	low (_registered_callbacks+5)
  1105   0000B8  24F3               	addwf	243,w,c
  1106   0000BA  6ED9               	movwf	fsr2l,c
  1107   0000BC  0E00               	movlw	high (_registered_callbacks+5)
  1108   0000BE  20F4               	addwfc	prodh,w,c
  1109   0000C0  6EDA               	movwf	fsr2h,c
  1110   0000C2  2ADE               	incf	postinc2,f,c
  1111   0000C4  0E00               	movlw	0
  1112   0000C6  22DD               	addwfc	postdec2,f,c
  1113   0000C8                     
  1114                           ;SystemCallbacks.c: 56:         if(registered_callbacks[callbacks].count >=
  1115   0000C8  5005               	movf	Callbacks_Manager@callbacks^0,w,c
  1116   0000CA  0D08               	mullw	8
  1117   0000CC  0E60               	movlw	low _registered_callbacks
  1118   0000CE  24F3               	addwf	243,w,c
  1119   0000D0  6ED9               	movwf	fsr2l,c
  1120   0000D2  0E00               	movlw	high _registered_callbacks
  1121   0000D4  20F4               	addwfc	prodh,w,c
  1122   0000D6  6EDA               	movwf	fsr2h,c
  1123   0000D8  5005               	movf	Callbacks_Manager@callbacks^0,w,c
  1124   0000DA  0D08               	mullw	8
  1125   0000DC  0E65               	movlw	low (_registered_callbacks+5)
  1126   0000DE  24F3               	addwf	243,w,c
  1127   0000E0  6EE1               	movwf	fsr1l,c
  1128   0000E2  0E00               	movlw	high (_registered_callbacks+5)
  1129   0000E4  20F4               	addwfc	prodh,w,c
  1130   0000E6  6EE2               	movwf	fsr1h,c
  1131   0000E8  50DE               	movf	postinc2,w,c
  1132   0000EA  5CE6               	subwf	postinc1,w,c
  1133   0000EC  50DE               	movf	postinc2,w,c
  1134   0000EE  58E6               	subwfb	postinc1,w,c
  1135   0000F0  A0D8               	btfss	status,0,c
  1136   0000F2  EF7D  F000         	goto	i2u27_41
  1137   0000F6  EF7F  F000         	goto	i2u27_40
  1138   0000FA                     i2u27_41:
  1139   0000FA  EF9C  F000         	goto	i2l1078
  1140   0000FE                     i2u27_40:
  1141   0000FE                     
  1142                           ;SystemCallbacks.c: 58:         {;SystemCallbacks.c: 59:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  1143   0000FE  5005               	movf	Callbacks_Manager@callbacks^0,w,c
  1144   000100  0D08               	mullw	8
  1145   000102  0E62               	movlw	low (_registered_callbacks+2)
  1146   000104  24F3               	addwf	243,w,c
  1147   000106  6ED9               	movwf	fsr2l,c
  1148   000108  0E00               	movlw	high (_registered_callbacks+2)
  1149   00010A  20F4               	addwfc	prodh,w,c
  1150   00010C  6EDA               	movwf	fsr2h,c
  1151   00010E  50DE               	movf	postinc2,w,c
  1152   000110  10DE               	iorwf	postinc2,w,c
  1153   000112  B4D8               	btfsc	status,2,c
  1154   000114  EF8E  F000         	goto	i2u28_41
  1155   000118  EF90  F000         	goto	i2u28_40
  1156   00011C                     i2u28_41:
  1157   00011C  EF9C  F000         	goto	i2l1078
  1158   000120                     i2u28_40:
  1159   000120                     
  1160                           ;SystemCallbacks.c: 62:                 registered_callbacks[callbacks].callback();
  1161   000120  5005               	movf	Callbacks_Manager@callbacks^0,w,c
  1162   000122  0D08               	mullw	8
  1163   000124  0E65               	movlw	low (_registered_callbacks+5)
  1164   000126  24F3               	addwf	243,w,c
  1165   000128  6ED9               	movwf	fsr2l,c
  1166   00012A  0E00               	movlw	high (_registered_callbacks+5)
  1167   00012C  20F4               	addwfc	prodh,w,c
  1168   00012E  6EDA               	movwf	fsr2h,c
  1169   000130  0E00               	movlw	0
  1170   000132  6EDE               	movwf	postinc2,c
  1171   000134  0E00               	movlw	0
  1172   000136  6EDD               	movwf	postdec2,c
  1173   000138                     i2l1078:
  1174                           
  1175                           ;SystemCallbacks.c: 67:     }
  1176   000138  2A05               	incf	Callbacks_Manager@callbacks^0,f,c
  1177   00013A  5005               	movf	Callbacks_Manager@callbacks^0,w,c
  1178   00013C  B4D8               	btfsc	status,2,c
  1179   00013E  EFA3  F000         	goto	i2u29_41
  1180   000142  EFA5  F000         	goto	i2u29_40
  1181   000146                     i2u29_41:
  1182   000146  EF59  F000         	goto	i2l1070
  1183   00014A                     i2u29_40:
  1184   00014A  0012               	return		;funcret
  1185   00014C                     __end_of_Callbacks_Manager:
  1186                           	callstack 0
  1187   000000                     
  1188                           	psect	rparam
  1189   000000                     
  1190                           	psect	temp
  1191   00001A                     btemp:
  1192                           	callstack 0
  1193   00001A                     	ds	1
  1194   000000                     int$flags	set	btemp
  1195   000000                     wtemp8	set	btemp+1
  1196   000000                     ttemp5	set	btemp+1
  1197   000000                     ttemp6	set	btemp+4
  1198   000000                     ttemp7	set	btemp+8
  1199                           
  1200                           	psect	idloc
  1201                           
  1202                           ;Config register IDLOC0 @ 0x200000
  1203                           ;	unspecified, using default values
  1204   200000                     	org	2097152
  1205   200000  FF                 	db	255
  1206                           
  1207                           ;Config register IDLOC1 @ 0x200001
  1208                           ;	unspecified, using default values
  1209   200001                     	org	2097153
  1210   200001  FF                 	db	255
  1211                           
  1212                           ;Config register IDLOC2 @ 0x200002
  1213                           ;	unspecified, using default values
  1214   200002                     	org	2097154
  1215   200002  FF                 	db	255
  1216                           
  1217                           ;Config register IDLOC3 @ 0x200003
  1218                           ;	unspecified, using default values
  1219   200003                     	org	2097155
  1220   200003  FF                 	db	255
  1221                           
  1222                           ;Config register IDLOC4 @ 0x200004
  1223                           ;	unspecified, using default values
  1224   200004                     	org	2097156
  1225   200004  FF                 	db	255
  1226                           
  1227                           ;Config register IDLOC5 @ 0x200005
  1228                           ;	unspecified, using default values
  1229   200005                     	org	2097157
  1230   200005  FF                 	db	255
  1231                           
  1232                           ;Config register IDLOC6 @ 0x200006
  1233                           ;	unspecified, using default values
  1234   200006                     	org	2097158
  1235   200006  FF                 	db	255
  1236                           
  1237                           ;Config register IDLOC7 @ 0x200007
  1238                           ;	unspecified, using default values
  1239   200007                     	org	2097159
  1240   200007  FF                 	db	255
  1241                           
  1242                           	psect	config
  1243                           
  1244                           ; Padding undefined space
  1245   300000                     	org	3145728
  1246   300000  FF                 	db	255
  1247                           
  1248                           ;Config register CONFIG1H @ 0x300001
  1249                           ;	Oscillator Selection bits
  1250                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  1251                           ;	Fail-Safe Clock Monitor Enable bit
  1252                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  1253                           ;	Internal External Oscillator Switchover bit
  1254                           ;	IESO = ON, Internal External Switchover mode enabled
  1255   300001                     	org	3145729
  1256   300001  C8                 	db	200
  1257                           
  1258                           ;Config register CONFIG2L @ 0x300002
  1259                           ;	Power-up Timer Enable bit
  1260                           ;	PWRTEN = OFF, PWRT disabled
  1261                           ;	Brown-out Reset Enable bits
  1262                           ;	BOREN = ON, Brown-out Reset enabled
  1263                           ;	Brown Out Reset Voltage bits
  1264                           ;	BORV = 0x3, unprogrammed default
  1265   300002                     	org	3145730
  1266   300002  0F                 	db	15
  1267                           
  1268                           ;Config register CONFIG2H @ 0x300003
  1269                           ;	Watchdog Timer Enable bit
  1270                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1271                           ;	Watchdog Timer Postscale Select bits
  1272                           ;	WDPS = 32768, 1:32768
  1273                           ;	Watchdog Timer Window Enable bit
  1274                           ;	WINEN = OFF, WDT window disabled
  1275   300003                     	org	3145731
  1276   300003  3E                 	db	62
  1277                           
  1278                           ;Config register CONFIG3L @ 0x300004
  1279                           ;	PWM output pins Reset state control
  1280                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  1281                           ;	Low-Side Transistors Polarity
  1282                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  1283                           ;	High-Side Transistors Polarity
  1284                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  1285                           ;	Timer1 Oscillator MUX
  1286                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  1287   300004                     	org	3145732
  1288   300004  3C                 	db	60
  1289                           
  1290                           ;Config register CONFIG3H @ 0x300005
  1291                           ;	FLTA MUX bit
  1292                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  1293                           ;	SSP I/O MUX bit
  1294                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  1295                           ;	PWM4 MUX bit
  1296                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  1297                           ;	TMR0/T5CKI External clock MUX bit
  1298                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  1299                           ;	MCLR Pin Enable bit
  1300                           ;	MCLRE = ON, Enabled
  1301   300005                     	org	3145733
  1302   300005  9D                 	db	157
  1303                           
  1304                           ;Config register CONFIG4L @ 0x300006
  1305                           ;	Stack Full/Underflow Reset Enable bit
  1306                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1307                           ;	Low-Voltage ICSP Enable bit
  1308                           ;	LVP = ON, Low-voltage ICSP enabled
  1309                           ;	Background Debugger Enable bit
  1310                           ;	DEBUG = 0x1, unprogrammed default
  1311   300006                     	org	3145734
  1312   300006  85                 	db	133
  1313                           
  1314                           ; Padding undefined space
  1315   300007                     	org	3145735
  1316   300007  FF                 	db	255
  1317                           
  1318                           ;Config register CONFIG5L @ 0x300008
  1319                           ;	Code Protection bit
  1320                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  1321                           ;	Code Protection bit
  1322                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  1323   300008                     	org	3145736
  1324   300008  0F                 	db	15
  1325                           
  1326                           ;Config register CONFIG5H @ 0x300009
  1327                           ;	Boot Block Code Protection bit
  1328                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1329                           ;	Data EEPROM Code Protection bit
  1330                           ;	CPD = OFF, Data EEPROM not code-protected
  1331   300009                     	org	3145737
  1332   300009  C0                 	db	192
  1333                           
  1334                           ;Config register CONFIG6L @ 0x30000A
  1335                           ;	Write Protection bit
  1336                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  1337                           ;	Write Protection bit
  1338                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  1339   30000A                     	org	3145738
  1340   30000A  0F                 	db	15
  1341                           
  1342                           ;Config register CONFIG6H @ 0x30000B
  1343                           ;	Configuration Register Write Protection bit
  1344                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1345                           ;	Boot Block Write Protection bit
  1346                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1347                           ;	Data EEPROM Write Protection bit
  1348                           ;	WRTD = OFF, Data EEPROM not write-protected
  1349   30000B                     	org	3145739
  1350   30000B  E0                 	db	224
  1351                           
  1352                           ;Config register CONFIG7L @ 0x30000C
  1353                           ;	Table Read Protection bit
  1354                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  1355                           ;	Table Read Protection bit
  1356                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  1357   30000C                     	org	3145740
  1358   30000C  0F                 	db	15
  1359                           
  1360                           ;Config register CONFIG7H @ 0x30000D
  1361                           ;	Boot Block Table Read Protection bit
  1362                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1363   30000D                     	org	3145741
  1364   30000D  40                 	db	64
  1365                           tosu	equ	0xFFF
  1366                           tosh	equ	0xFFE
  1367                           tosl	equ	0xFFD
  1368                           stkptr	equ	0xFFC
  1369                           pclatu	equ	0xFFB
  1370                           pclath	equ	0xFFA
  1371                           pcl	equ	0xFF9
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           prodh	equ	0xFF4
  1377                           prodl	equ	0xFF3
  1378                           indf0	equ	0xFEF
  1379                           postinc0	equ	0xFEE
  1380                           postdec0	equ	0xFED
  1381                           preinc0	equ	0xFEC
  1382                           plusw0	equ	0xFEB
  1383                           fsr0h	equ	0xFEA
  1384                           fsr0l	equ	0xFE9
  1385                           wreg	equ	0xFE8
  1386                           indf1	equ	0xFE7
  1387                           postinc1	equ	0xFE6
  1388                           postdec1	equ	0xFE5
  1389                           preinc1	equ	0xFE4
  1390                           plusw1	equ	0xFE3
  1391                           fsr1h	equ	0xFE2
  1392                           fsr1l	equ	0xFE1
  1393                           bsr	equ	0xFE0
  1394                           indf2	equ	0xFDF
  1395                           postinc2	equ	0xFDE
  1396                           postdec2	equ	0xFDD
  1397                           preinc2	equ	0xFDC
  1398                           plusw2	equ	0xFDB
  1399                           fsr2h	equ	0xFDA
  1400                           fsr2l	equ	0xFD9
  1401                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         86
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     17      25
    BANK0           160      0      80
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Delete_Callback@config.callback	PTR FTN()void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S466$callback	PTR FTN()void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_SMS_read_and_set_state
    _SMS_read_and_set_state->_ADC_Read

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     112
                          _FSM_begin
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                            2     2      0      97
                                             15 COMRAM     2     2      0
                           _SMS_init
             _SMS_read_and_set_state
                        _Timer0_init
                  _get_current_state
                          _set_state
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_read_and_set_state                               2     2      0      82
                                             13 COMRAM     2     2      0
                           _ADC_Read
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             11 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   6     6      0     156
                                              5 COMRAM     6     6      0
                  _Callbacks_Manager
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     156
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _SMS_init
       _ADC_init
         _ADC_stop
     _SMS_read_and_set_state
       _ADC_Read
         _ADC_in_progress
         _ADC_start
       _set_state
     _Timer0_init
     _get_current_state
     _set_state
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      50       4       50.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     11      19       1       26.6%
BITBIGSFRll         39      0       0      14        0.0%
BITBIGSFRlhl        1E      0       0      13        0.0%
BITBIGSFRhhlh       1A      0       0      10        0.0%
BITBIGSFRhhll       10      0       0      11        0.0%
BITBIGSFRhhh         D      0       0       9        0.0%
BITBIGSFRlhh         7      0       0      12        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      69      15        0.0%
DATA                 0      0      69      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Mar 20 23:01:24 2023

                            l22 02F2                              l25 02A6                              l33 027A  
                            l34 028A                              l19 02E4                              l28 02BA  
                            l72 02C6                              l81 02EA                              l57 02D6  
                            l92 02EE                              l95 02DE                              l87 0228  
                            u10 02B8                              u11 02B2                              u16 02BA  
                           l118 01C8                             _ADC 0016                             l840 02E0  
                           l842 02F0                             l850 0290                             l860 029E  
                           l852 0294                             l844 02A8                             l862 02A0  
                           l854 0296                             l870 02DA                             l864 02A4  
                           l856 0298                             l848 028C                             l872 02CA  
                           l858 029A                             l874 02E6                             l888 02EC  
                           u220 027A                             u300 0176                             u221 0276  
                           u301 0172                             u230 01EC                             u231 01E8  
                           u240 020C                             u241 0208                             u250 0222  
                           u251 021E                             prod 000FF3                             wreg 000FE8  
                          l1050 01CA                            l1060 0222                            l1052 01D6  
                          l1046 0262                            l1054 01EC                            l1048 0266  
                          l1056 01F6                            l1208 01A2                            l1152 02BC  
                          l1058 020C                            l1090 0162                            l1082 014C  
                          l1154 02C2                            l1092 017A                            l1084 0150  
                          l1094 0182                            l1086 0154                            l1088 0158  
                          l1098 018C                            i2l54 006A                            _main 02BC  
                          fsr1h 000FE2                            fsr2h 000FDA                            fsr1l 000FE1  
                          fsr2l 000FD9                            btemp 001A                __end_of_ADC_Read 028C  
                          prodh 000FF4                            prodl 000FF3                            start 0086  
              __end_of_ADC_init 02A8                __end_of_ADC_stop 02F4                    ___param_bank 000000  
    Callbacks_Manager@callbacks 0005             _number_of_callbacks 0019                           ?_main 0001  
                         i2l141 00AE                           i2l146 014A                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           tablat 000FF5                __end_of_SMS_init 02EC  
                         ttemp5 001B                           ttemp6 001E                           ttemp7 0022  
                         status 000FD8                           wtemp8 001B               __end_of_ADC_start 02E6  
               __initialization 022A                    __end_of_main 02CA                          ??_main 0012  
                 __activetblptr 000002                          _ADRESH 000FC4                          _ADRESL 000FC3  
                        i2l1130 0022                          i2l1140 004E                          i2l1132 0026  
                        i2l1070 00B2                          i2l1062 008A                          i2l1150 0068  
                        i2l1142 005C                          i2l1134 0036                          i2l1080 013A  
                        i2l1072 00C8                          i2l1064 008E                          i2l1144 0060  
                        i2l1136 003A                          i2l1074 00FE                          i2l1066 00A6  
                        i2l1146 0064                          i2l1138 004A                          i2l1076 0120  
                        i2l1148 0066                          i2l1078 0138               __end_of_FSM_begin 01CA  
                 ??_Timer0_init 000C  SMS_read_and_set_state@moisture 000E                          clear_0 0242  
                        isa$std 000001               _Callbacks_Manager 008A            _registered_callbacks 0060  
                  __pdataCOMRAM 0019                       ?_ADC_Read 000C              ?_Callbacks_Manager 0001  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                     ?_ADC_init 0001                       ?_ADC_stop 0001             ??_Callbacks_Manager 0001  
                    __accesstop 0060         __end_of__initialization 0254                   ___rparam_used 000001  
                __pcstackCOMRAM 0001                    _system_count 0012       __end_of_Callbacks_Manager 014C  
           __end_of_Timer0_init 02D8      __end_of_timer_overflow_isr 0086                       ?_SMS_init 0001  
                    ??_ADC_Read 000E                      ??_ADC_init 000C                      ??_ADC_stop 000C  
                    __pbssBANK0 0060                      __pnvCOMRAM 0018                      ??_SMS_init 000C  
             ??_ADC_in_progress 000C                         i2u33_40 0036                         i2u33_41 0032  
                       i2u26_40 00A6                         i2u34_40 004A                         i2u26_41 00A2  
                       i2u34_41 0046                         i2u27_40 00FE                         i2u35_40 005C  
                       i2u27_41 00FA                         i2u35_41 0058                         i2u28_40 0120  
                       i2u28_41 011C                         i2u29_40 014A                         i2u29_41 0146  
                     _ADCHSbits 000F99                         __Hparam 0000                         __Lparam 0000  
                   _Timer0_init 02CA                       _ADC_start 02E0                         __pcinit 022A  
                       __ramtop 0300                         __ptext0 02BC                         __ptext1 014C  
                       __ptext2 02EC                         __ptext3 02CA                         __ptext4 01CA  
                       __ptext5 02D8                         __ptext6 0262                         __ptext7 02E0  
                       __ptext8 02A8                         __ptext9 02E6                       _T0CONbits 000FD5  
      ??_SMS_read_and_set_state 000E            end_of_initialization 0254                   __Lmediumconst 0000  
             __end_of_set_state 02E0                       _FSM_begin 014C                       _FSM_state 0018  
                    ?_ADC_start 0001                         postdec2 000FDD                         postinc0 000FEE  
                       postinc1 000FE6                         postinc2 000FDE                      ?_FSM_begin 0001  
                 __pidataCOMRAM 02F4             start_initialization 022A              _timer_overflow_isr 0008  
           ?_timer_overflow_isr 0001                     ??_ADC_start 000C                 _ADC_in_progress 02A8  
                   __pbssCOMRAM 0012            ??_timer_overflow_isr 0006          _SMS_read_and_set_state 01CA  
                   ??_FSM_begin 0010                    ?_Timer0_init 0001                       __pintcode 0008  
                      _ADC_Read 0262                        _ADC_init 028C                        _ADC_stop 02F0  
       __end_of_ADC_in_progress 02BC                       _set_state 02D8                      _ADCON0bits 000FC2  
                    _ADCON1bits 000FC1                      _ADCON2bits 000FC0                        _SMS_init 02E6  
                      __Hrparam 0000                        __Lrparam 0000                      ?_set_state 0001  
                    _ANSEL0bits 000FB8                        __ptext10 028C                        __ptext11 02F0  
                      __ptext13 008A                ?_ADC_in_progress 0001                        isa$xinst 000000  
             _get_current_state 02EC                        int$flags 001A                     _tmr0Counter 0014  
            ?_get_current_state 0001             ??_get_current_state 000C                      _INTCONbits 000FF2  
       ?_SMS_read_and_set_state 0001                        intlevel2 0000       __end_of_get_current_state 02F0  
                   ??_set_state 000C           set_state@state_to_set 000C  __end_of_SMS_read_and_set_state 022A  
