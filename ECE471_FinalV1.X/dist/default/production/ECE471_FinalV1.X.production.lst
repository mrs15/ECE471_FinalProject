

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Mar 29 13:01:07 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.40
    61                           ; Generated 17/11/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4331 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     
    96                           	psect	idataCOMRAM
    97   000AEE                     __pidataCOMRAM:
    98                           	callstack 0
    99                           
   100                           ;initializer for FSM_begin@F2893
   101   000AEE  0005               	dw	5
   102   000AF0  36                 	db	low _Watering_Done_cb
   103   000AF1  0A                 	db	high _Watering_Done_cb
   104   000AF2  00                 	db	0
   105   000AF3  00                 	db	0
   106   000AF4  00                 	db	0
   107   000AF5  00                 	db	0
   108                           
   109                           ;initializer for FSM_begin@F2890
   110   000AF6  000A               	dw	10
   111   000AF8  1A                 	db	low _Check_Moisture_cb
   112   000AF9  0A                 	db	high _Check_Moisture_cb
   113   000AFA  00                 	db	0
   114   000AFB  00                 	db	0
   115   000AFC  00                 	db	0
   116   000AFD  00                 	db	0
   117   000000                     _RCREG	set	4014
   118   000000                     _TXREG	set	4013
   119   000000                     _TXSTAbits	set	4012
   120   000000                     _RCSTAbits	set	4011
   121   000000                     _SPBRG	set	4015
   122   000000                     _ADRESL	set	4035
   123   000000                     _ADRESH	set	4036
   124                           
   125                           	psect	nvCOMRAM
   126   000047                     __pnvCOMRAM:
   127                           	callstack 0
   128   000047                     _FSM_state:
   129                           	callstack 0
   130   000047                     	ds	1
   131   000000                     _TRISC	set	3988
   132   000000                     _TRISBbits	set	3987
   133   000000                     _PORTBbits	set	3969
   134   000000                     _TRISB	set	3987
   135   000000                     _ADCHSbits	set	3993
   136   000000                     _ADCON1bits	set	4033
   137   000000                     _ADCON0bits	set	4034
   138   000000                     _PIR1bits	set	3998
   139   000000                     _BAUDCONbits	set	4010
   140   000000                     _ANSEL0bits	set	4024
   141   000000                     _ADCON2bits	set	4032
   142   000000                     _RCONbits	set	4048
   143   000000                     _OSCCONbits	set	4051
   144   000000                     _T0CONbits	set	4053
   145   000000                     _INTCON2bits	set	4081
   146   000000                     _INTCONbits	set	4082
   147   000000                     _TMR0H	set	4055
   148   000000                     _TMR0L	set	4054
   149   000000                     _TRISD	set	3989
   150   000000                     _TRISCbits	set	3988
   151   000000                     _LATC	set	3979
   152   000000                     _LATD	set	3980
   153   000000                     _SPBRGH	set	4016
   154                           
   155                           	psect	smallconst
   156   000300                     __psmallconst:
   157                           	callstack 0
   158   000300  00                 	db	0
   159   000301                     STR_4:
   160   000301  20                 	db	32
   161   000302  3E                 	db	62	;'>'
   162   000303  57                 	db	87	;'W'
   163   000304  41                 	db	65	;'A'
   164   000305  54                 	db	84	;'T'
   165   000306  45                 	db	69	;'E'
   166   000307  52                 	db	82	;'R'
   167   000308  49                 	db	73	;'I'
   168   000309  4E                 	db	78	;'N'
   169   00030A  47                 	db	71	;'G'
   170   00030B  20                 	db	32
   171   00030C  50                 	db	80	;'P'
   172   00030D  4C                 	db	76	;'L'
   173   00030E  41                 	db	65	;'A'
   174   00030F  4E                 	db	78	;'N'
   175   000310  54                 	db	84	;'T'
   176   000311  53                 	db	83	;'S'
   177   000312  3C                 	db	60	;'<'
   178   000313  00                 	db	0
   179   000314  00                 	db	0
   180   000315                     STR_2:
   181   000315  53                 	db	83	;'S'
   182   000316  79                 	db	121	;'y'
   183   000317  73                 	db	115	;'s'
   184   000318  74                 	db	116	;'t'
   185   000319  65                 	db	101	;'e'
   186   00031A  6D                 	db	109	;'m'
   187   00031B  20                 	db	32
   188   00031C  49                 	db	73	;'I'
   189   00031D  6E                 	db	110	;'n'
   190   00031E  69                 	db	105	;'i'
   191   00031F  74                 	db	116	;'t'
   192   000320  69                 	db	105	;'i'
   193   000321  61                 	db	97	;'a'
   194   000322  6C                 	db	108	;'l'
   195   000323  2E                 	db	46
   196   000324  2E                 	db	46
   197   000325  2E                 	db	46
   198   000326  00                 	db	0
   199   000327  00                 	db	0
   200   000328                     STR_5:
   201   000328  20                 	db	32
   202   000329  3E                 	db	62	;'>'
   203   00032A  43                 	db	67	;'C'
   204   00032B  48                 	db	72	;'H'
   205   00032C  45                 	db	69	;'E'
   206   00032D  43                 	db	67	;'C'
   207   00032E  4B                 	db	75	;'K'
   208   00032F  49                 	db	73	;'I'
   209   000330  4E                 	db	78	;'N'
   210   000331  47                 	db	71	;'G'
   211   000332  20                 	db	32
   212   000333  4D                 	db	77	;'M'
   213   000334  4F                 	db	79	;'O'
   214   000335  49                 	db	73	;'I'
   215   000336  53                 	db	83	;'S'
   216   000337  54                 	db	84	;'T'
   217   000338  3C                 	db	60	;'<'
   218   000339  00                 	db	0
   219   00033A  00                 	db	0
   220   00033B                     STR_1:
   221   00033B  20                 	db	32
   222   00033C  50                 	db	80	;'P'
   223   00033D  6C                 	db	108	;'l'
   224   00033E  61                 	db	97	;'a'
   225   00033F  6E                 	db	110	;'n'
   226   000340  74                 	db	116	;'t'
   227   000341  20                 	db	32
   228   000342  57                 	db	87	;'W'
   229   000343  61                 	db	97	;'a'
   230   000344  74                 	db	116	;'t'
   231   000345  65                 	db	101	;'e'
   232   000346  72                 	db	114	;'r'
   233   000347  69                 	db	105	;'i'
   234   000348  6E                 	db	110	;'n'
   235   000349  67                 	db	103	;'g'
   236   00034A  00                 	db	0
   237   00034B  00                 	db	0
   238   00034C                     STR_3:
   239   00034C  20                 	db	32
   240   00034D  3E                 	db	62	;'>'
   241   00034E  49                 	db	73	;'I'
   242   00034F  44                 	db	68	;'D'
   243   000350  4C                 	db	76	;'L'
   244   000351  45                 	db	69	;'E'
   245   000352  20                 	db	32
   246   000353  53                 	db	83	;'S'
   247   000354  54                 	db	84	;'T'
   248   000355  41                 	db	65	;'A'
   249   000356  54                 	db	84	;'T'
   250   000357  45                 	db	69	;'E'
   251   000358  3C                 	db	60	;'<'
   252   000359  00                 	db	0
   253   00035A  00                 	db	0
   254   00035B  00                 	db	0	; dummy byte at the end
   255   000000                     
   256                           ; #config settings
   257                           
   258                           	psect	cinit
   259   00092A                     __pcinit:
   260                           	callstack 0
   261   00092A                     start_initialization:
   262                           	callstack 0
   263   00092A                     __initialization:
   264                           	callstack 0
   265                           
   266                           ; Initialize objects allocated to COMRAM (16 bytes)
   267                           ; load TBLPTR registers with __pidataCOMRAM
   268   00092A  0EEE               	movlw	low __pidataCOMRAM
   269   00092C  6EF6               	movwf	tblptrl,c
   270   00092E  0E0A               	movlw	high __pidataCOMRAM
   271   000930  6EF7               	movwf	tblptrh,c
   272   000932  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   273   000934  6EF8               	movwf	tblptru,c
   274   000936  EE00  F02D         	lfsr	0,__pdataCOMRAM
   275   00093A  EE10 F010          	lfsr	1,16
   276   00093E                     copy_data0:
   277   00093E  0009               	tblrd		*+
   278   000940  CFF5 FFEE          	movff	tablat,postinc0
   279   000944  50E5               	movf	postdec1,w,c
   280   000946  50E1               	movf	fsr1l,w,c
   281   000948  E1FA               	bnz	copy_data0
   282                           
   283                           ; Clear objects allocated to BANK0 (40 bytes)
   284   00094A  EE00  F060         	lfsr	0,__pbssBANK0
   285   00094E  0E28               	movlw	40
   286   000950                     clear_0:
   287   000950  6AEE               	clrf	postinc0,c
   288   000952  06E8               	decf	wreg,f,c
   289   000954  E1FD               	bnz	clear_0
   290                           
   291                           ; Clear objects allocated to COMRAM (10 bytes)
   292   000956  EE00  F03D         	lfsr	0,__pbssCOMRAM
   293   00095A  0E0A               	movlw	10
   294   00095C                     clear_1:
   295   00095C  6AEE               	clrf	postinc0,c
   296   00095E  06E8               	decf	wreg,f,c
   297   000960  E1FD               	bnz	clear_1
   298   000962                     end_of_initialization:
   299                           	callstack 0
   300   000962                     __end_of__initialization:
   301                           	callstack 0
   302   000962  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   303   000964  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   304   000966  0E00               	movlw	low (__Lmediumconst shr (0+16))
   305   000968  6EF8               	movwf	tblptru,c
   306   00096A  0100               	movlb	0
   307   00096C  EFB8  F004         	goto	_main	;jump to C main() function
   308                           
   309                           	psect	bssCOMRAM
   310   00003D                     __pbssCOMRAM:
   311                           	callstack 0
   312   00003D                     _tmr0Counter@SystemInterrupts$F993:
   313                           	callstack 0
   314   00003D                     	ds	2
   315   00003F                     _tmr0Counter:
   316                           	callstack 0
   317   00003F                     	ds	2
   318   000041                     _ADC:
   319                           	callstack 0
   320   000041                     	ds	2
   321   000043                     _rx_data:
   322                           	callstack 0
   323   000043                     	ds	1
   324   000044                     _rx_flag:
   325                           	callstack 0
   326   000044                     	ds	1
   327   000045                     _pump_status:
   328                           	callstack 0
   329   000045                     	ds	1
   330   000046                     _callback_count:
   331                           	callstack 0
   332   000046                     	ds	1
   333                           
   334                           	psect	dataCOMRAM
   335   00002D                     __pdataCOMRAM:
   336                           	callstack 0
   337   00002D                     FSM_begin@F2893:
   338                           	callstack 0
   339   00002D                     	ds	8
   340   000035                     FSM_begin@F2890:
   341                           	callstack 0
   342   000035                     	ds	8
   343                           
   344                           	psect	bssBANK0
   345   000060                     __pbssBANK0:
   346                           	callstack 0
   347   000060                     _registered_callbacks:
   348                           	callstack 0
   349   000060                     	ds	40
   350                           
   351                           	psect	cstackCOMRAM
   352   000001                     __pcstackCOMRAM:
   353                           	callstack 0
   354   000001                     i2set_state@state_to_set:
   355                           	callstack 0
   356                           
   357                           ; 1 bytes @ 0x0
   358   000001                     	ds	1
   359   000002                     
   360                           ; 1 bytes @ 0x1
   361   000002                     	ds	4
   362   000006                     Callbacks_Manager@callbacks:
   363                           	callstack 0
   364                           
   365                           ; 1 bytes @ 0x5
   366   000006                     	ds	1
   367   000007                     ??_timer_overflow_isr:
   368                           
   369                           ; 1 bytes @ 0x6
   370   000007                     	ds	8
   371   00000F                     ??_init_leds:
   372   00000F                     ?_ADC_Read:
   373                           	callstack 0
   374   00000F                     LCD_DATA@Data:
   375                           	callstack 0
   376   00000F                     set_state@state_to_set:
   377                           	callstack 0
   378   00000F                     Callbacks_Init@callback:
   379                           	callstack 0
   380   00000F                     UART_send@data:
   381                           	callstack 0
   382   00000F                     Reset_Counter@config:
   383                           	callstack 0
   384                           
   385                           ; 2 bytes @ 0xE
   386   00000F                     	ds	1
   387   000010                     LCD_CMD@CMD:
   388                           	callstack 0
   389   000010                     LCD_Write_Char@Low4:
   390                           	callstack 0
   391   000010                     SMS_Set_State@moisture:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0xF
   395   000010                     	ds	1
   396   000011                     ??_LCD_Init:
   397   000011                     ?_SMS_Read_Moisture_Value:
   398                           	callstack 0
   399   000011                     LCD_Set_Cursor@c:
   400                           	callstack 0
   401   000011                     LCD_Write_Char@High4:
   402                           	callstack 0
   403   000011                     Register_Callback@config:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x10
   407   000011                     	ds	1
   408   000012                     LCD_Set_Cursor@r:
   409                           	callstack 0
   410   000012                     LCD_Write_Char@Data:
   411                           	callstack 0
   412                           
   413                           ; 1 bytes @ 0x11
   414   000012                     	ds	1
   415   000013                     LCD_Set_Cursor@Low4:
   416                           	callstack 0
   417   000013                     LCD_Write_String@str:
   418                           	callstack 0
   419   000013                     SMS_Read_Moisture_Value@moisture:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0x12
   423   000013                     	ds	1
   424   000014                     LCD_Set_Cursor@High4:
   425                           	callstack 0
   426                           
   427                           ; 1 bytes @ 0x13
   428   000014                     	ds	1
   429   000015                     ??_LCD_Write_String:
   430   000015                     LCD_Set_Cursor@Temp:
   431                           	callstack 0
   432                           
   433                           ; 1 bytes @ 0x14
   434   000015                     	ds	2
   435   000017                     LCD_Write_String@i:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x16
   439   000017                     	ds	2
   440   000019                     ??_FSM_begin:
   441                           
   442                           ; 1 bytes @ 0x18
   443   000019                     	ds	2
   444   00001B                     FSM_begin@MoistureCB_Config:
   445                           	callstack 0
   446                           
   447                           ; 8 bytes @ 0x1A
   448   00001B                     	ds	8
   449   000023                     FSM_begin@WateringDoneCB_Config:
   450                           	callstack 0
   451                           
   452                           ; 8 bytes @ 0x22
   453   000023                     	ds	8
   454   00002B                     FSM_begin@moisture:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x2A
   458   00002B                     	ds	2
   459   00002D                     
   460                           ; 1 bytes @ 0x2C
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 17 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   480 ;;      Params:         0       0       0       0
   481 ;;      Locals:         0       0       0       0
   482 ;;      Temps:          0       0       0       0
   483 ;;      Totals:         0       0       0       0
   484 ;;Total ram usage:        0 bytes
   485 ;; Hardware stack levels required when called: 8
   486 ;; This function calls:
   487 ;;		_FSM_begin
   488 ;;		_Timer0_init
   489 ;;		_Timer0_stop
   490 ;;		_UART_init
   491 ;;		_set_state
   492 ;; This function is called by:
   493 ;;		Startup code after reset
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           	psect	text0
   498   000970                     __ptext0:
   499                           	callstack 0
   500   000970                     _main:
   501                           	callstack 23
   502   000970                     
   503                           ;main.c: 20:     OSCCONbits.IRCF0 = 1;
   504   000970  88D3               	bsf	211,4,c	;volatile
   505                           
   506                           ;main.c: 21:     OSCCONbits.IRCF1 = 1;
   507   000972  8AD3               	bsf	211,5,c	;volatile
   508                           
   509                           ;main.c: 22:     OSCCONbits.IRCF2 = 1;
   510   000974  8CD3               	bsf	211,6,c	;volatile
   511                           
   512                           ;main.c: 25:     TRISCbits.RC3 = 1;
   513   000976  8694               	bsf	148,3,c	;volatile
   514   000978                     
   515                           ;main.c: 28:     Timer0_stop();
   516   000978  ECB0  F005         	call	_Timer0_stop	;wreg free
   517   00097C                     
   518                           ;main.c: 31:     RCONbits.IPEN = 1;
   519   00097C  8ED0               	bsf	208,7,c	;volatile
   520   00097E                     
   521                           ;main.c: 34:     INTCONbits.TMR0IE = 1;
   522   00097E  8AF2               	bsf	242,5,c	;volatile
   523   000980                     
   524                           ;main.c: 37:     INTCONbits.INT0IE = 1;
   525   000980  88F2               	bsf	242,4,c	;volatile
   526   000982                     
   527                           ;main.c: 40:     INTCON2bits.TMR0IP = 1;
   528   000982  84F1               	bsf	241,2,c	;volatile
   529   000984                     
   530                           ;main.c: 43:     Timer0_init();
   531   000984  EC41  F005         	call	_Timer0_init	;wreg free
   532   000988                     
   533                           ;main.c: 46:     INTCON2bits.INTEDG0 = 1;
   534   000988  8CF1               	bsf	241,6,c	;volatile
   535   00098A                     
   536                           ;main.c: 52:     UART_init();
   537   00098A  EC29  F005         	call	_UART_init	;wreg free
   538   00098E                     
   539                           ;main.c: 55:     INTCONbits.GIEH = 1;
   540   00098E  8EF2               	bsf	242,7,c	;volatile
   541   000990                     
   542                           ;main.c: 56:     INTCONbits.GIEL = 1;
   543   000990  8CF2               	bsf	242,6,c	;volatile
   544   000992                     
   545                           ;main.c: 59:     set_state(INIT_STATE);
   546   000992  0E00               	movlw	0
   547   000994  ECA2  F005         	call	_set_state
   548   000998                     l1713:
   549                           
   550                           ;main.c: 61:     {;main.c: 62:      FSM_begin();
   551   000998  ECAE  F001         	call	_FSM_begin	;wreg free
   552   00099C  EFCC  F004         	goto	l1713
   553   0009A0  EF54  F000         	goto	start
   554   0009A4                     __end_of_main:
   555                           	callstack 0
   556                           
   557 ;; *************** function _UART_init *****************
   558 ;; Defined at:
   559 ;;		line 14 in file "PIC18F4331_UART2.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;		None
   562 ;; Auto vars:     Size  Location     Type
   563 ;;		None
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, status,2
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   573 ;;      Params:         0       0       0       0
   574 ;;      Locals:         0       0       0       0
   575 ;;      Temps:          0       0       0       0
   576 ;;      Totals:         0       0       0       0
   577 ;;Total ram usage:        0 bytes
   578 ;; Hardware stack levels used: 1
   579 ;; Hardware stack levels required when called: 4
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text1
   588   000A52                     __ptext1:
   589                           	callstack 0
   590   000A52                     _UART_init:
   591                           	callstack 26
   592   000A52                     
   593                           ;PIC18F4331_UART2.c: 34:     TRISCbits.RC6 = 0;
   594   000A52  9C94               	bcf	148,6,c	;volatile
   595                           
   596                           ;PIC18F4331_UART2.c: 35:     TRISCbits.RC7 = 1;
   597   000A54  8E94               	bsf	148,7,c	;volatile
   598                           
   599                           ;PIC18F4331_UART2.c: 38:     BAUDCONbits.BRG16 = 1;
   600   000A56  86AA               	bsf	170,3,c	;volatile
   601   000A58                     
   602                           ;PIC18F4331_UART2.c: 40:     SPBRG = (int)51;
   603   000A58  0E33               	movlw	51
   604   000A5A  6EAF               	movwf	175,c	;volatile
   605                           
   606                           ;PIC18F4331_UART2.c: 41:     SPBRGH = (int)0;
   607   000A5C  0E00               	movlw	0
   608   000A5E  6EB0               	movwf	176,c	;volatile
   609   000A60                     
   610                           ;PIC18F4331_UART2.c: 42:     RCSTAbits.SPEN = 1;
   611   000A60  8EAB               	bsf	171,7,c	;volatile
   612   000A62                     
   613                           ;PIC18F4331_UART2.c: 43:     TXSTAbits.TXEN = 1;
   614   000A62  8AAC               	bsf	172,5,c	;volatile
   615   000A64                     
   616                           ;PIC18F4331_UART2.c: 44:     TXSTAbits.BRGH = 1;
   617   000A64  84AC               	bsf	172,2,c	;volatile
   618   000A66                     
   619                           ;PIC18F4331_UART2.c: 45:     RCSTAbits.CREN = 1;
   620   000A66  88AB               	bsf	171,4,c	;volatile
   621   000A68  0012               	return		;funcret
   622   000A6A                     __end_of_UART_init:
   623                           	callstack 0
   624                           
   625 ;; *************** function _Timer0_stop *****************
   626 ;; Defined at:
   627 ;;		line 92 in file "PIC18F4331_Timer.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		None
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   641 ;;      Params:         0       0       0       0
   642 ;;      Locals:         0       0       0       0
   643 ;;      Temps:          0       0       0       0
   644 ;;      Totals:         0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used: 1
   647 ;; Hardware stack levels required when called: 4
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655                           	psect	text2
   656   000B60                     __ptext2:
   657                           	callstack 0
   658   000B60                     _Timer0_stop:
   659                           	callstack 26
   660   000B60                     
   661                           ;PIC18F4331_Timer.c: 94:     T0CONbits.TMR0ON = 0;
   662   000B60  9ED5               	bcf	213,7,c	;volatile
   663   000B62  0012               	return		;funcret
   664   000B64                     __end_of_Timer0_stop:
   665                           	callstack 0
   666                           
   667 ;; *************** function _Timer0_init *****************
   668 ;; Defined at:
   669 ;;		line 56 in file "PIC18F4331_Timer.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, status,2
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   683 ;;      Params:         0       0       0       0
   684 ;;      Locals:         0       0       0       0
   685 ;;      Temps:          0       0       0       0
   686 ;;      Totals:         0       0       0       0
   687 ;;Total ram usage:        0 bytes
   688 ;; Hardware stack levels used: 1
   689 ;; Hardware stack levels required when called: 4
   690 ;; This function calls:
   691 ;;		Nothing
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           	psect	text3
   698   000A82                     __ptext3:
   699                           	callstack 0
   700   000A82                     _Timer0_init:
   701                           	callstack 26
   702   000A82                     
   703                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   704   000A82  80D5               	bsf	213,0,c	;volatile
   705                           
   706                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 0;
   707   000A84  92D5               	bcf	213,1,c	;volatile
   708                           
   709                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   710   000A86  84D5               	bsf	213,2,c	;volatile
   711                           
   712                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   713   000A88  96D5               	bcf	213,3,c	;volatile
   714                           
   715                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   716   000A8A  9AD5               	bcf	213,5,c	;volatile
   717                           
   718                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   719   000A8C  9CD5               	bcf	213,6,c	;volatile
   720   000A8E                     
   721                           ;PIC18F4331_Timer.c: 80:     TMR0L = (0x7C);
   722   000A8E  0E7C               	movlw	124
   723   000A90  6ED6               	movwf	214,c	;volatile
   724                           
   725                           ;PIC18F4331_Timer.c: 81:     TMR0H = (0xE1);
   726   000A92  0EE1               	movlw	225
   727   000A94  6ED7               	movwf	215,c	;volatile
   728   000A96  0012               	return		;funcret
   729   000A98                     __end_of_Timer0_init:
   730                           	callstack 0
   731                           
   732 ;; *************** function _FSM_begin *****************
   733 ;; Defined at:
   734 ;;		line 37 in file "System_FSM.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  moisture        2   42[COMRAM] unsigned short 
   739 ;;  WateringDone    8   34[COMRAM] struct .
   740 ;;  MoistureCB_C    8   26[COMRAM] struct .
   741 ;; Return value:  Size  Location     Type
   742 ;;                  1    wreg      void 
   743 ;; Registers used:
   744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   745 ;; Tracked objects:
   746 ;;		On entry : 0/0
   747 ;;		On exit  : 0/0
   748 ;;		Unchanged: 0/0
   749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   750 ;;      Params:         0       0       0       0
   751 ;;      Locals:        18       0       0       0
   752 ;;      Temps:          2       0       0       0
   753 ;;      Totals:        20       0       0       0
   754 ;;Total ram usage:       20 bytes
   755 ;; Hardware stack levels used: 1
   756 ;; Hardware stack levels required when called: 7
   757 ;; This function calls:
   758 ;;		_Callbacks_Init
   759 ;;		_LCD_Clear
   760 ;;		_LCD_Init
   761 ;;		_LCD_Set_Cursor
   762 ;;		_LCD_Write_String
   763 ;;		_Register_Callback
   764 ;;		_SMS_Read_Moisture_Value
   765 ;;		_SMS_Set_State
   766 ;;		_SMS_init
   767 ;;		_Timer0_start
   768 ;;		_UART_send
   769 ;;		_WaterPump_Init
   770 ;;		_WaterPump_OFF
   771 ;;		_WaterPump_ON
   772 ;;		_checking_moisture_status_led
   773 ;;		_get_current_state
   774 ;;		_idle_status_led
   775 ;;		_init_leds
   776 ;;		_set_state
   777 ;;		_watering_status_led
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text4
   784   00035C                     __ptext4:
   785                           	callstack 0
   786   00035C                     _FSM_begin:
   787                           	callstack 23
   788   00035C                     
   789                           ;System_FSM.c: 39:     switch(get_current_state())
   790   00035C  EF96  F002         	goto	l1663
   791   000360                     l1575:
   792                           
   793                           ;System_FSM.c: 42:         {;System_FSM.c: 43:             SMS_init();
   794   000360  ECAA  F005         	call	_SMS_init	;wreg free
   795   000364                     
   796                           ;System_FSM.c: 44:             Callbacks_Init();
   797   000364  EC4B  F004         	call	_Callbacks_Init	;wreg free
   798   000368                     
   799                           ;System_FSM.c: 45:             WaterPump_Init();
   800   000368  EC95  F005         	call	_WaterPump_Init	;wreg free
   801   00036C                     
   802                           ;System_FSM.c: 47:             Callback_Config_t MoistureCB_Config =
   803   00036C  EE20  F035         	lfsr	2,FSM_begin@F2890
   804   000370  EE10  F01B         	lfsr	1,FSM_begin@MoistureCB_Config
   805   000374  0E07               	movlw	7
   806   000376                     u501:
   807   000376  CFDB FFE3          	movff	plusw2,plusw1
   808   00037A  06E8               	decf	wreg,f,c
   809   00037C  E2FC               	bc	u501
   810   00037E                     
   811                           ;System_FSM.c: 53:             Callback_Config_t WateringDoneCB_Config =
   812   00037E  EE20  F02D         	lfsr	2,FSM_begin@F2893
   813   000382  EE10  F023         	lfsr	1,FSM_begin@WateringDoneCB_Config
   814   000386  0E07               	movlw	7
   815   000388                     u511:
   816   000388  CFDB FFE3          	movff	plusw2,plusw1
   817   00038C  06E8               	decf	wreg,f,c
   818   00038E  E2FC               	bc	u511
   819   000390                     
   820                           ;System_FSM.c: 59:             Register_Callback(&MoistureCB_Config);
   821   000390  0E1B               	movlw	low FSM_begin@MoistureCB_Config
   822   000392  6E11               	movwf	Register_Callback@config^0,c
   823   000394  0E00               	movlw	high FSM_begin@MoistureCB_Config
   824   000396  6E12               	movwf	(Register_Callback@config+1)^0,c
   825   000398  EC19  F003         	call	_Register_Callback	;wreg free
   826   00039C                     
   827                           ;System_FSM.c: 60:             Register_Callback(&WateringDoneCB_Config);
   828   00039C  0E23               	movlw	low FSM_begin@WateringDoneCB_Config
   829   00039E  6E11               	movwf	Register_Callback@config^0,c
   830   0003A0  0E00               	movlw	high FSM_begin@WateringDoneCB_Config
   831   0003A2  6E12               	movwf	(Register_Callback@config+1)^0,c
   832   0003A4  EC19  F003         	call	_Register_Callback	;wreg free
   833   0003A8                     
   834                           ;System_FSM.c: 62:             init_leds();
   835   0003A8  ECD2  F004         	call	_init_leds	;wreg free
   836   0003AC                     
   837                           ;System_FSM.c: 64:             LCD_Init();
   838   0003AC  EC56  F003         	call	_LCD_Init	;wreg free
   839   0003B0                     
   840                           ;System_FSM.c: 66:             LCD_Clear();
   841   0003B0  EC7F  F005         	call	_LCD_Clear	;wreg free
   842   0003B4                     
   843                           ;System_FSM.c: 67:             LCD_Set_Cursor(1,1);
   844   0003B4  0E01               	movlw	1
   845   0003B6  6E11               	movwf	LCD_Set_Cursor@c^0,c
   846   0003B8  0E01               	movlw	1
   847   0003BA  EC92  F003         	call	_LCD_Set_Cursor
   848   0003BE                     
   849                           ;System_FSM.c: 68:             LCD_Write_String(" Plant Watering\0");
   850   0003BE  0E3B               	movlw	low STR_1
   851   0003C0  6E13               	movwf	LCD_Write_String@str^0,c
   852   0003C2  0E03               	movlw	high STR_1
   853   0003C4  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   854   0003C6  EC20  F004         	call	_LCD_Write_String	;wreg free
   855   0003CA                     
   856                           ;System_FSM.c: 69:             LCD_Set_Cursor(2,1);
   857   0003CA  0E01               	movlw	1
   858   0003CC  6E11               	movwf	LCD_Set_Cursor@c^0,c
   859   0003CE  0E02               	movlw	2
   860   0003D0  EC92  F003         	call	_LCD_Set_Cursor
   861   0003D4                     
   862                           ;System_FSM.c: 70:             LCD_Write_String("System Initial...\0");
   863   0003D4  0E15               	movlw	low STR_2
   864   0003D6  6E13               	movwf	LCD_Write_String@str^0,c
   865   0003D8  0E03               	movlw	high STR_2
   866   0003DA  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   867   0003DC  EC20  F004         	call	_LCD_Write_String	;wreg free
   868   0003E0                     
   869                           ;System_FSM.c: 72:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   870   0003E0  0E0B               	movlw	11
   871   0003E2  6E1A               	movwf	(??_FSM_begin+1)^0,c
   872   0003E4  0E26               	movlw	38
   873   0003E6  6E19               	movwf	??_FSM_begin^0,c
   874   0003E8  0E5E               	movlw	94
   875   0003EA                     u637:
   876   0003EA  2EE8               	decfsz	wreg,f,c
   877   0003EC  D7FE               	bra	u637
   878   0003EE  2E19               	decfsz	??_FSM_begin^0,f,c
   879   0003F0  D7FC               	bra	u637
   880   0003F2  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   881   0003F4  D7FA               	bra	u637
   882   0003F6                     
   883                           ;System_FSM.c: 74:             Timer0_start();
   884   0003F6  ECB4  F005         	call	_Timer0_start	;wreg free
   885   0003FA                     
   886                           ;System_FSM.c: 76:             set_state(IDLE_STATE);
   887   0003FA  0E01               	movlw	1
   888   0003FC  ECA2  F005         	call	_set_state
   889                           
   890                           ;System_FSM.c: 78:             break;
   891   000400  EFB4  F002         	goto	l229
   892   000404                     l1609:
   893                           
   894                           ;System_FSM.c: 82:         {;System_FSM.c: 84:             UART_send(235);
   895   000404  0EEB               	movlw	235
   896   000406  EC4C  F005         	call	_UART_send
   897   00040A                     
   898                           ;System_FSM.c: 86:             LCD_Clear();
   899   00040A  EC7F  F005         	call	_LCD_Clear	;wreg free
   900   00040E                     
   901                           ;System_FSM.c: 87:             LCD_Set_Cursor(1,1);
   902   00040E  0E01               	movlw	1
   903   000410  6E11               	movwf	LCD_Set_Cursor@c^0,c
   904   000412  0E01               	movlw	1
   905   000414  EC92  F003         	call	_LCD_Set_Cursor
   906   000418                     
   907                           ;System_FSM.c: 88:             LCD_Write_String(" >IDLE STATE<\0");
   908   000418  0E4C               	movlw	low STR_3
   909   00041A  6E13               	movwf	LCD_Write_String@str^0,c
   910   00041C  0E03               	movlw	high STR_3
   911   00041E  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   912   000420  EC20  F004         	call	_LCD_Write_String	;wreg free
   913   000424                     
   914                           ;System_FSM.c: 90:             WaterPump_OFF();
   915   000424  EC9E  F005         	call	_WaterPump_OFF	;wreg free
   916                           
   917                           ;System_FSM.c: 94:             while(get_current_state() == IDLE_STATE)
   918   000428  EF18  F002         	goto	l1621
   919   00042C                     l1619:
   920                           
   921                           ;System_FSM.c: 95:             {;System_FSM.c: 97:                 idle_status_led();
   922   00042C  EC8B  F005         	call	_idle_status_led	;wreg free
   923   000430                     l1621:
   924                           
   925                           ;System_FSM.c: 94:             while(get_current_state() == IDLE_STATE)
   926   000430  ECB2  F005         	call	_get_current_state	;wreg free
   927   000434  06E8               	decf	wreg,f,c
   928   000436  B4D8               	btfsc	status,2,c
   929   000438  EF20  F002         	goto	u521
   930   00043C  EF22  F002         	goto	u520
   931   000440                     u521:
   932   000440  EF16  F002         	goto	l1619
   933   000444                     u520:
   934   000444  EFB4  F002         	goto	l229
   935   000448                     l1623:
   936                           
   937                           ;System_FSM.c: 104:         {;System_FSM.c: 106:             UART_send('W');
   938   000448  0E57               	movlw	87
   939   00044A  EC4C  F005         	call	_UART_send
   940                           
   941                           ;System_FSM.c: 107:             UART_send('W');
   942   00044E  0E57               	movlw	87
   943   000450  EC4C  F005         	call	_UART_send
   944                           
   945                           ;System_FSM.c: 108:             UART_send('W');
   946   000454  0E57               	movlw	87
   947   000456  EC4C  F005         	call	_UART_send
   948                           
   949                           ;System_FSM.c: 109:             UART_send('W');
   950   00045A  0E57               	movlw	87
   951   00045C  EC4C  F005         	call	_UART_send
   952                           
   953                           ;System_FSM.c: 110:             UART_send('W');
   954   000460  0E57               	movlw	87
   955   000462  EC4C  F005         	call	_UART_send
   956                           
   957                           ;System_FSM.c: 111:             UART_send('W');
   958   000466  0E57               	movlw	87
   959   000468  EC4C  F005         	call	_UART_send
   960   00046C                     
   961                           ;System_FSM.c: 112:             WaterPump_ON();
   962   00046C  EC9A  F005         	call	_WaterPump_ON	;wreg free
   963   000470                     
   964                           ;System_FSM.c: 113:             LCD_Clear();
   965   000470  EC7F  F005         	call	_LCD_Clear	;wreg free
   966   000474                     
   967                           ;System_FSM.c: 114:             LCD_Set_Cursor(1,1);
   968   000474  0E01               	movlw	1
   969   000476  6E11               	movwf	LCD_Set_Cursor@c^0,c
   970   000478  0E01               	movlw	1
   971   00047A  EC92  F003         	call	_LCD_Set_Cursor
   972   00047E                     
   973                           ;System_FSM.c: 115:             LCD_Write_String(" >WATERING PLANTS<\0");
   974   00047E  0E01               	movlw	low STR_4
   975   000480  6E13               	movwf	LCD_Write_String@str^0,c
   976   000482  0E03               	movlw	high STR_4
   977   000484  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   978   000486  EC20  F004         	call	_LCD_Write_String	;wreg free
   979                           
   980                           ;System_FSM.c: 119:             while(get_current_state() == WATER_PLANTS)
   981   00048A  EF49  F002         	goto	l1635
   982   00048E                     l1633:
   983                           
   984                           ;System_FSM.c: 120:             {;System_FSM.c: 122:               watering_status_led()
      +                          ;
   985   00048E  EC86  F005         	call	_watering_status_led	;wreg free
   986   000492                     l1635:
   987                           
   988                           ;System_FSM.c: 119:             while(get_current_state() == WATER_PLANTS)
   989   000492  ECB2  F005         	call	_get_current_state	;wreg free
   990   000496  0A02               	xorlw	2
   991   000498  B4D8               	btfsc	status,2,c
   992   00049A  EF51  F002         	goto	u531
   993   00049E  EF53  F002         	goto	u530
   994   0004A2                     u531:
   995   0004A2  EF47  F002         	goto	l1633
   996   0004A6                     u530:
   997   0004A6  EFB4  F002         	goto	l229
   998   0004AA                     l1637:
   999                           
  1000                           ;System_FSM.c: 130:         {;System_FSM.c: 134:             UART_send('A');
  1001   0004AA  0E41               	movlw	65
  1002   0004AC  EC4C  F005         	call	_UART_send
  1003   0004B0                     
  1004                           ;System_FSM.c: 136:             LCD_Clear();
  1005   0004B0  EC7F  F005         	call	_LCD_Clear	;wreg free
  1006   0004B4                     
  1007                           ;System_FSM.c: 137:             LCD_Set_Cursor(1,1);
  1008   0004B4  0E01               	movlw	1
  1009   0004B6  6E11               	movwf	LCD_Set_Cursor@c^0,c
  1010   0004B8  0E01               	movlw	1
  1011   0004BA  EC92  F003         	call	_LCD_Set_Cursor
  1012   0004BE                     
  1013                           ;System_FSM.c: 138:             LCD_Write_String(" >CHECKING MOIST<\0");
  1014   0004BE  0E28               	movlw	low STR_5
  1015   0004C0  6E13               	movwf	LCD_Write_String@str^0,c
  1016   0004C2  0E03               	movlw	high STR_5
  1017   0004C4  6E14               	movwf	(LCD_Write_String@str+1)^0,c
  1018   0004C6  EC20  F004         	call	_LCD_Write_String	;wreg free
  1019   0004CA                     
  1020                           ;System_FSM.c: 139:             WaterPump_OFF();
  1021   0004CA  EC9E  F005         	call	_WaterPump_OFF	;wreg free
  1022   0004CE                     
  1023                           ;System_FSM.c: 141:             checking_moisture_status_led();
  1024   0004CE  EC90  F005         	call	_checking_moisture_status_led	;wreg free
  1025   0004D2                     
  1026                           ;System_FSM.c: 142:             _delay((unsigned long)((1000)*(8000000/4000.0)));
  1027   0004D2  0E0B               	movlw	11
  1028   0004D4  6E1A               	movwf	(??_FSM_begin+1)^0,c
  1029   0004D6  0E26               	movlw	38
  1030   0004D8  6E19               	movwf	??_FSM_begin^0,c
  1031   0004DA  0E5E               	movlw	94
  1032   0004DC                     u647:
  1033   0004DC  2EE8               	decfsz	wreg,f,c
  1034   0004DE  D7FE               	bra	u647
  1035   0004E0  2E19               	decfsz	??_FSM_begin^0,f,c
  1036   0004E2  D7FC               	bra	u647
  1037   0004E4  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
  1038   0004E6  D7FA               	bra	u647
  1039   0004E8                     
  1040                           ;System_FSM.c: 144:             U16 moisture = SMS_Read_Moisture_Value();
  1041   0004E8  EC57  F005         	call	_SMS_Read_Moisture_Value	;wreg free
  1042   0004EC  C011  F02B         	movff	?_SMS_Read_Moisture_Value,FSM_begin@moisture
  1043   0004F0  C012  F02C         	movff	?_SMS_Read_Moisture_Value+1,FSM_begin@moisture+1
  1044   0004F4                     
  1045                           ;System_FSM.c: 146:             if(moisture > 65000)
  1046   0004F4  0EE9               	movlw	233
  1047   0004F6  5C2B               	subwf	FSM_begin@moisture^0,w,c
  1048   0004F8  0EFD               	movlw	253
  1049   0004FA  582C               	subwfb	(FSM_begin@moisture+1)^0,w,c
  1050   0004FC  A0D8               	btfss	status,0,c
  1051   0004FE  EF83  F002         	goto	u541
  1052   000502  EF85  F002         	goto	u540
  1053   000506                     u541:
  1054   000506  EF89  F002         	goto	l1657
  1055   00050A                     u540:
  1056   00050A                     
  1057                           ;System_FSM.c: 147:                 moisture = 1000;
  1058   00050A  0E03               	movlw	3
  1059   00050C  6E2C               	movwf	(FSM_begin@moisture+1)^0,c
  1060   00050E  0EE8               	movlw	232
  1061   000510  6E2B               	movwf	FSM_begin@moisture^0,c
  1062   000512                     l1657:
  1063                           
  1064                           ;System_FSM.c: 149:             SMS_Set_State(moisture);
  1065   000512  C02B  F010         	movff	FSM_begin@moisture,SMS_Set_State@moisture
  1066   000516  C02C  F011         	movff	FSM_begin@moisture+1,SMS_Set_State@moisture+1
  1067   00051A  ECC3  F003         	call	_SMS_Set_State	;wreg free
  1068                           
  1069                           ;System_FSM.c: 153:             break;
  1070   00051E  EFB4  F002         	goto	l229
  1071   000522                     l1659:
  1072                           
  1073                           ;System_FSM.c: 157:         {;System_FSM.c: 158:             set_state(INIT_STATE);
  1074   000522  0E00               	movlw	0
  1075   000524  ECA2  F005         	call	_set_state
  1076                           
  1077                           ;System_FSM.c: 159:             break;
  1078   000528  EFB4  F002         	goto	l229
  1079   00052C                     l1663:
  1080   00052C  ECB2  F005         	call	_get_current_state	;wreg free
  1081   000530  6E19               	movwf	??_FSM_begin^0,c
  1082   000532  6A1A               	clrf	(??_FSM_begin+1)^0,c
  1083                           
  1084                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1085                           ; Switch size 1, requested type "simple"
  1086                           ; Number of cases is 1, Range of values is 0 to 0
  1087                           ; switch strategies available:
  1088                           ; Name         Instructions Cycles
  1089                           ; simple_byte            4     3 (average)
  1090                           ;	Chosen strategy is simple_byte
  1091   000534  501A               	movf	(??_FSM_begin+1)^0,w,c
  1092   000536  0A00               	xorlw	0	; case 0
  1093   000538  B4D8               	btfsc	status,2,c
  1094   00053A  EFA1  F002         	goto	l1745
  1095   00053E  EF91  F002         	goto	l1659
  1096   000542                     l1745:
  1097                           
  1098                           ; Switch size 1, requested type "simple"
  1099                           ; Number of cases is 4, Range of values is 0 to 3
  1100                           ; switch strategies available:
  1101                           ; Name         Instructions Cycles
  1102                           ; simple_byte           13     7 (average)
  1103                           ;	Chosen strategy is simple_byte
  1104   000542  5019               	movf	??_FSM_begin^0,w,c
  1105   000544  0A00               	xorlw	0	; case 0
  1106   000546  B4D8               	btfsc	status,2,c
  1107   000548  EFB0  F001         	goto	l1575
  1108   00054C  0A01               	xorlw	1	; case 1
  1109   00054E  B4D8               	btfsc	status,2,c
  1110   000550  EF02  F002         	goto	l1609
  1111   000554  0A03               	xorlw	3	; case 2
  1112   000556  B4D8               	btfsc	status,2,c
  1113   000558  EF24  F002         	goto	l1623
  1114   00055C  0A01               	xorlw	1	; case 3
  1115   00055E  B4D8               	btfsc	status,2,c
  1116   000560  EF55  F002         	goto	l1637
  1117   000564  EF91  F002         	goto	l1659
  1118   000568                     l229:
  1119   000568  0012               	return		;funcret
  1120   00056A                     __end_of_FSM_begin:
  1121                           	callstack 0
  1122                           
  1123 ;; *************** function _watering_status_led *****************
  1124 ;; Defined at:
  1125 ;;		line 40 in file "LedDriver.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		status,2, status,0
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1139 ;;      Params:         0       0       0       0
  1140 ;;      Locals:         0       0       0       0
  1141 ;;      Temps:          0       0       0       0
  1142 ;;      Totals:         0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels used: 1
  1145 ;; Hardware stack levels required when called: 4
  1146 ;; This function calls:
  1147 ;;		Nothing
  1148 ;; This function is called by:
  1149 ;;		_FSM_begin
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text5
  1154   000B0C                     __ptext5:
  1155                           	callstack 0
  1156   000B0C                     _watering_status_led:
  1157                           	callstack 25
  1158   000B0C                     
  1159                           ;LedDriver.c: 42:     (((LATD))|=((0x01)));
  1160   000B0C  808C               	bsf	140,0,c	;volatile
  1161                           
  1162                           ;LedDriver.c: 44:     (((LATC))&=(~((0x02))));
  1163   000B0E  928B               	bcf	139,1,c	;volatile
  1164                           
  1165                           ;LedDriver.c: 45:     (((LATC))&=(~((0x04))));
  1166   000B10  948B               	bcf	139,2,c	;volatile
  1167                           
  1168                           ;LedDriver.c: 46:     (((LATD))&=(~((0x02))));
  1169   000B12  928C               	bcf	140,1,c	;volatile
  1170   000B14  0012               	return		;funcret
  1171   000B16                     __end_of_watering_status_led:
  1172                           	callstack 0
  1173                           
  1174 ;; *************** function _init_leds *****************
  1175 ;; Defined at:
  1176 ;;		line 12 in file "LedDriver.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1190 ;;      Params:         0       0       0       0
  1191 ;;      Locals:         0       0       0       0
  1192 ;;      Temps:          2       0       0       0
  1193 ;;      Totals:         2       0       0       0
  1194 ;;Total ram usage:        2 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 4
  1197 ;; This function calls:
  1198 ;;		Nothing
  1199 ;; This function is called by:
  1200 ;;		_FSM_begin
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text6
  1205   0009A4                     __ptext6:
  1206                           	callstack 0
  1207   0009A4                     _init_leds:
  1208                           	callstack 25
  1209   0009A4                     
  1210                           ;LedDriver.c: 14:     (((TRISC))&=(~((0x02))));
  1211   0009A4  9294               	bcf	148,1,c	;volatile
  1212                           
  1213                           ;LedDriver.c: 15:     (((TRISC))&=(~((0x04))));
  1214   0009A6  9494               	bcf	148,2,c	;volatile
  1215                           
  1216                           ;LedDriver.c: 16:     (((TRISD))&=(~((0x02))));
  1217   0009A8  9295               	bcf	149,1,c	;volatile
  1218                           
  1219                           ;LedDriver.c: 17:     (((TRISD))&=(~((0x01))));
  1220   0009AA  9095               	bcf	149,0,c	;volatile
  1221                           
  1222                           ;LedDriver.c: 19:     (((LATC))|=((0x02)));
  1223   0009AC  828B               	bsf	139,1,c	;volatile
  1224                           
  1225                           ;LedDriver.c: 20:     (((LATC))|=((0x04)));
  1226   0009AE  848B               	bsf	139,2,c	;volatile
  1227                           
  1228                           ;LedDriver.c: 21:     (((LATD))|=((0x02)));
  1229   0009B0  828C               	bsf	140,1,c	;volatile
  1230                           
  1231                           ;LedDriver.c: 22:     (((LATD))|=((0x01)));
  1232   0009B2  808C               	bsf	140,0,c	;volatile
  1233   0009B4                     
  1234                           ;LedDriver.c: 24:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1235   0009B4  0E0B               	movlw	11
  1236   0009B6  6E10               	movwf	(??_init_leds+1)^0,c
  1237   0009B8  0E26               	movlw	38
  1238   0009BA  6E0F               	movwf	??_init_leds^0,c
  1239   0009BC  0E5E               	movlw	94
  1240   0009BE                     u657:
  1241   0009BE  2EE8               	decfsz	wreg,f,c
  1242   0009C0  D7FE               	bra	u657
  1243   0009C2  2E0F               	decfsz	??_init_leds^0,f,c
  1244   0009C4  D7FC               	bra	u657
  1245   0009C6  2E10               	decfsz	(??_init_leds+1)^0,f,c
  1246   0009C8  D7FA               	bra	u657
  1247   0009CA                     
  1248                           ;LedDriver.c: 26:     (((LATC))&=(~((0x02))));
  1249   0009CA  928B               	bcf	139,1,c	;volatile
  1250   0009CC                     
  1251                           ;LedDriver.c: 27:     (((LATC))&=(~((0x04))));
  1252   0009CC  948B               	bcf	139,2,c	;volatile
  1253   0009CE                     
  1254                           ;LedDriver.c: 28:     (((LATD))&=(~((0x02))));
  1255   0009CE  928C               	bcf	140,1,c	;volatile
  1256   0009D0                     
  1257                           ;LedDriver.c: 29:     (((LATD))&=(~((0x01))));
  1258   0009D0  908C               	bcf	140,0,c	;volatile
  1259   0009D2  0012               	return		;funcret
  1260   0009D4                     __end_of_init_leds:
  1261                           	callstack 0
  1262                           
  1263 ;; *************** function _idle_status_led *****************
  1264 ;; Defined at:
  1265 ;;		line 32 in file "LedDriver.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		status,2, status,0
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1279 ;;      Params:         0       0       0       0
  1280 ;;      Locals:         0       0       0       0
  1281 ;;      Temps:          0       0       0       0
  1282 ;;      Totals:         0       0       0       0
  1283 ;;Total ram usage:        0 bytes
  1284 ;; Hardware stack levels used: 1
  1285 ;; Hardware stack levels required when called: 4
  1286 ;; This function calls:
  1287 ;;		Nothing
  1288 ;; This function is called by:
  1289 ;;		_FSM_begin
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text7
  1294   000B16                     __ptext7:
  1295                           	callstack 0
  1296   000B16                     _idle_status_led:
  1297                           	callstack 25
  1298   000B16                     
  1299                           ;LedDriver.c: 34:     (((LATC))|=((0x04)));
  1300   000B16  848B               	bsf	139,2,c	;volatile
  1301                           
  1302                           ;LedDriver.c: 36:     (((LATC))&=(~((0x02))));
  1303   000B18  928B               	bcf	139,1,c	;volatile
  1304                           
  1305                           ;LedDriver.c: 37:     (((LATD))&=(~((0x01))));
  1306   000B1A  908C               	bcf	140,0,c	;volatile
  1307                           
  1308                           ;LedDriver.c: 38:     (((LATD))&=(~((0x02))));
  1309   000B1C  928C               	bcf	140,1,c	;volatile
  1310   000B1E  0012               	return		;funcret
  1311   000B20                     __end_of_idle_status_led:
  1312                           	callstack 0
  1313                           
  1314 ;; *************** function _get_current_state *****************
  1315 ;; Defined at:
  1316 ;;		line 5 in file "FSM_states.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      enum E2
  1323 ;; Registers used:
  1324 ;;		wreg, status,2
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1330 ;;      Params:         0       0       0       0
  1331 ;;      Locals:         0       0       0       0
  1332 ;;      Temps:          0       0       0       0
  1333 ;;      Totals:         0       0       0       0
  1334 ;;Total ram usage:        0 bytes
  1335 ;; Hardware stack levels used: 1
  1336 ;; Hardware stack levels required when called: 4
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_FSM_begin
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text8
  1345   000B64                     __ptext8:
  1346                           	callstack 0
  1347   000B64                     _get_current_state:
  1348                           	callstack 25
  1349   000B64                     
  1350                           ;FSM_states.c: 7:     return FSM_state;
  1351   000B64  5047               	movf	_FSM_state^0,w,c
  1352   000B66  0012               	return		;funcret
  1353   000B68                     __end_of_get_current_state:
  1354                           	callstack 0
  1355                           
  1356 ;; *************** function _checking_moisture_status_led *****************
  1357 ;; Defined at:
  1358 ;;		line 49 in file "LedDriver.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  1    wreg      void 
  1365 ;; Registers used:
  1366 ;;		status,2, status,0
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1372 ;;      Params:         0       0       0       0
  1373 ;;      Locals:         0       0       0       0
  1374 ;;      Temps:          0       0       0       0
  1375 ;;      Totals:         0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used: 1
  1378 ;; Hardware stack levels required when called: 4
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_FSM_begin
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text9
  1387   000B20                     __ptext9:
  1388                           	callstack 0
  1389   000B20                     _checking_moisture_status_led:
  1390                           	callstack 25
  1391   000B20                     
  1392                           ;LedDriver.c: 51:     (((LATD))|=((0x02)));
  1393   000B20  828C               	bsf	140,1,c	;volatile
  1394                           
  1395                           ;LedDriver.c: 53:     (((LATC))&=(~((0x02))));
  1396   000B22  928B               	bcf	139,1,c	;volatile
  1397                           
  1398                           ;LedDriver.c: 54:     (((LATC))&=(~((0x04))));
  1399   000B24  948B               	bcf	139,2,c	;volatile
  1400                           
  1401                           ;LedDriver.c: 55:     (((LATD))&=(~((0x01))));
  1402   000B26  908C               	bcf	140,0,c	;volatile
  1403   000B28  0012               	return		;funcret
  1404   000B2A                     __end_of_checking_moisture_status_led:
  1405                           	callstack 0
  1406                           
  1407 ;; *************** function _WaterPump_ON *****************
  1408 ;; Defined at:
  1409 ;;		line 25 in file "WaterPump_Driver.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1423 ;;      Params:         0       0       0       0
  1424 ;;      Locals:         0       0       0       0
  1425 ;;      Temps:          0       0       0       0
  1426 ;;      Totals:         0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; Hardware stack levels required when called: 4
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_FSM_begin
  1434 ;;		_WaterPump_Toggle
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text10
  1439   000B34                     __ptext10:
  1440                           	callstack 0
  1441   000B34                     _WaterPump_ON:
  1442                           	callstack 25
  1443   000B34                     
  1444                           ;WaterPump_Driver.c: 27:     (((LATD))|=((0x04)));
  1445   000B34  848C               	bsf	140,2,c	;volatile
  1446   000B36                     
  1447                           ;WaterPump_Driver.c: 28:     pump_status = PUMP_ON;
  1448   000B36  0E00               	movlw	0
  1449   000B38  6E45               	movwf	_pump_status^0,c
  1450   000B3A  0012               	return		;funcret
  1451   000B3C                     __end_of_WaterPump_ON:
  1452                           	callstack 0
  1453                           
  1454 ;; *************** function _WaterPump_OFF *****************
  1455 ;; Defined at:
  1456 ;;		line 31 in file "WaterPump_Driver.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;		None
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1470 ;;      Params:         0       0       0       0
  1471 ;;      Locals:         0       0       0       0
  1472 ;;      Temps:          0       0       0       0
  1473 ;;      Totals:         0       0       0       0
  1474 ;;Total ram usage:        0 bytes
  1475 ;; Hardware stack levels used: 1
  1476 ;; Hardware stack levels required when called: 4
  1477 ;; This function calls:
  1478 ;;		Nothing
  1479 ;; This function is called by:
  1480 ;;		_FSM_begin
  1481 ;;		_WaterPump_Toggle
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           	psect	text11
  1486   000B3C                     __ptext11:
  1487                           	callstack 0
  1488   000B3C                     _WaterPump_OFF:
  1489                           	callstack 25
  1490   000B3C                     
  1491                           ;WaterPump_Driver.c: 33:     (((LATD))&=(~((0x04))));
  1492   000B3C  948C               	bcf	140,2,c	;volatile
  1493   000B3E                     
  1494                           ;WaterPump_Driver.c: 34:     pump_status = PUMP_OFF;
  1495   000B3E  0E01               	movlw	1
  1496   000B40  6E45               	movwf	_pump_status^0,c
  1497   000B42  0012               	return		;funcret
  1498   000B44                     __end_of_WaterPump_OFF:
  1499                           	callstack 0
  1500                           
  1501 ;; *************** function _WaterPump_Init *****************
  1502 ;; Defined at:
  1503 ;;		line 17 in file "WaterPump_Driver.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;		None
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;		None
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  1    wreg      void 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2, status,0
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1517 ;;      Params:         0       0       0       0
  1518 ;;      Locals:         0       0       0       0
  1519 ;;      Temps:          0       0       0       0
  1520 ;;      Totals:         0       0       0       0
  1521 ;;Total ram usage:        0 bytes
  1522 ;; Hardware stack levels used: 1
  1523 ;; Hardware stack levels required when called: 4
  1524 ;; This function calls:
  1525 ;;		Nothing
  1526 ;; This function is called by:
  1527 ;;		_FSM_begin
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text12
  1532   000B2A                     __ptext12:
  1533                           	callstack 0
  1534   000B2A                     _WaterPump_Init:
  1535                           	callstack 25
  1536   000B2A                     
  1537                           ;WaterPump_Driver.c: 19:     (((TRISD))&=(~((0x04))));
  1538   000B2A  9495               	bcf	149,2,c	;volatile
  1539                           
  1540                           ;WaterPump_Driver.c: 20:     (((LATD))&=(~((0x04))));
  1541   000B2C  948C               	bcf	140,2,c	;volatile
  1542   000B2E                     
  1543                           ;WaterPump_Driver.c: 21:     pump_status = PUMP_OFF;
  1544   000B2E  0E01               	movlw	1
  1545   000B30  6E45               	movwf	_pump_status^0,c
  1546   000B32  0012               	return		;funcret
  1547   000B34                     __end_of_WaterPump_Init:
  1548                           	callstack 0
  1549                           
  1550 ;; *************** function _UART_send *****************
  1551 ;; Defined at:
  1552 ;;		line 50 in file "PIC18F4331_UART2.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  data            1    wreg     unsigned char 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  data            1   14[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1566 ;;      Params:         0       0       0       0
  1567 ;;      Locals:         1       0       0       0
  1568 ;;      Temps:          0       0       0       0
  1569 ;;      Totals:         1       0       0       0
  1570 ;;Total ram usage:        1 bytes
  1571 ;; Hardware stack levels used: 1
  1572 ;; Hardware stack levels required when called: 4
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_FSM_begin
  1577 ;;		_putch
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text13
  1582   000A98                     __ptext13:
  1583                           	callstack 0
  1584   000A98                     _UART_send:
  1585                           	callstack 25
  1586                           
  1587                           ;incstack = 0
  1588                           ;UART_send@data stored from wreg
  1589   000A98  6E0F               	movwf	UART_send@data^0,c
  1590   000A9A                     l350:
  1591                           
  1592                           ;PIC18F4331_UART2.c: 52:     while(0 == PIR1bits.TXIF)
  1593   000A9A  A89E               	btfss	158,4,c	;volatile
  1594   000A9C  EF52  F005         	goto	u201
  1595   000AA0  EF54  F005         	goto	u200
  1596   000AA4                     u201:
  1597   000AA4  EF4D  F005         	goto	l350
  1598   000AA8                     u200:
  1599   000AA8                     
  1600                           ;PIC18F4331_UART2.c: 57:     TXREG = data;
  1601   000AA8  C00F  FFAD         	movff	UART_send@data,4013	;volatile
  1602   000AAC  0012               	return		;funcret
  1603   000AAE                     __end_of_UART_send:
  1604                           	callstack 0
  1605                           
  1606 ;; *************** function _Timer0_start *****************
  1607 ;; Defined at:
  1608 ;;		line 86 in file "PIC18F4331_Timer.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		None
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1622 ;;      Params:         0       0       0       0
  1623 ;;      Locals:         0       0       0       0
  1624 ;;      Temps:          0       0       0       0
  1625 ;;      Totals:         0       0       0       0
  1626 ;;Total ram usage:        0 bytes
  1627 ;; Hardware stack levels used: 1
  1628 ;; Hardware stack levels required when called: 4
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_FSM_begin
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text14
  1637   000B68                     __ptext14:
  1638                           	callstack 0
  1639   000B68                     _Timer0_start:
  1640                           	callstack 25
  1641   000B68                     
  1642                           ;PIC18F4331_Timer.c: 88:     T0CONbits.TMR0ON = 1;
  1643   000B68  8ED5               	bsf	213,7,c	;volatile
  1644   000B6A  0012               	return		;funcret
  1645   000B6C                     __end_of_Timer0_start:
  1646                           	callstack 0
  1647                           
  1648 ;; *************** function _SMS_init *****************
  1649 ;; Defined at:
  1650 ;;		line 8 in file "SoilMoistureSensor.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1664 ;;      Params:         0       0       0       0
  1665 ;;      Locals:         0       0       0       0
  1666 ;;      Temps:          0       0       0       0
  1667 ;;      Totals:         0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; Hardware stack levels required when called: 6
  1671 ;; This function calls:
  1672 ;;		_ADC_init
  1673 ;; This function is called by:
  1674 ;;		_FSM_begin
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text15
  1679   000B54                     __ptext15:
  1680                           	callstack 0
  1681   000B54                     _SMS_init:
  1682                           	callstack 23
  1683   000B54                     
  1684                           ;SoilMoistureSensor.c: 10:     ADC_init();
  1685   000B54  ECFF  F004         	call	_ADC_init	;wreg free
  1686   000B58  0012               	return		;funcret
  1687   000B5A                     __end_of_SMS_init:
  1688                           	callstack 0
  1689                           
  1690 ;; *************** function _ADC_init *****************
  1691 ;; Defined at:
  1692 ;;		line 24 in file "PIC18F4331_ADC.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1706 ;;      Params:         0       0       0       0
  1707 ;;      Locals:         0       0       0       0
  1708 ;;      Temps:          0       0       0       0
  1709 ;;      Totals:         0       0       0       0
  1710 ;;Total ram usage:        0 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 5
  1713 ;; This function calls:
  1714 ;;		_ADC_stop
  1715 ;; This function is called by:
  1716 ;;		_SMS_init
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           	psect	text16
  1721   0009FE                     __ptext16:
  1722                           	callstack 0
  1723   0009FE                     _ADC_init:
  1724                           	callstack 23
  1725   0009FE                     
  1726                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
  1727   0009FE  ECB6  F005         	call	_ADC_stop	;wreg free
  1728   000A02                     
  1729                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
  1730   000A02  0E3F               	movlw	-193
  1731   000A04  16C1               	andwf	193,f,c	;volatile
  1732   000A06                     
  1733                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
  1734   000A06  9099               	bcf	153,0,c	;volatile
  1735   000A08                     
  1736                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
  1737   000A08  9299               	bcf	153,1,c	;volatile
  1738   000A0A                     
  1739                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
  1740   000A0A  9AC2               	bcf	194,5,c	;volatile
  1741   000A0C                     
  1742                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
  1743   000A0C  0EF8               	movlw	-8
  1744   000A0E  16C0               	andwf	192,f,c	;volatile
  1745   000A10                     
  1746                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
  1747   000A10  8EC0               	bsf	192,7,c	;volatile
  1748   000A12                     
  1749                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
  1750   000A12  0E87               	movlw	-121
  1751   000A14  16C0               	andwf	192,f,c	;volatile
  1752   000A16                     
  1753                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
  1754   000A16  80B8               	bsf	184,0,c	;volatile
  1755   000A18  0012               	return		;funcret
  1756   000A1A                     __end_of_ADC_init:
  1757                           	callstack 0
  1758                           
  1759 ;; *************** function _ADC_stop *****************
  1760 ;; Defined at:
  1761 ;;		line 19 in file "PIC18F4331_ADC.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;		None
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		None
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1775 ;;      Params:         0       0       0       0
  1776 ;;      Locals:         0       0       0       0
  1777 ;;      Temps:          0       0       0       0
  1778 ;;      Totals:         0       0       0       0
  1779 ;;Total ram usage:        0 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; Hardware stack levels required when called: 4
  1782 ;; This function calls:
  1783 ;;		Nothing
  1784 ;; This function is called by:
  1785 ;;		_ADC_init
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text17
  1790   000B6C                     __ptext17:
  1791                           	callstack 0
  1792   000B6C                     _ADC_stop:
  1793                           	callstack 23
  1794   000B6C                     
  1795                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1796   000B6C  90C2               	bcf	194,0,c	;volatile
  1797   000B6E  0012               	return		;funcret
  1798   000B70                     __end_of_ADC_stop:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _SMS_Set_State *****************
  1802 ;; Defined at:
  1803 ;;		line 19 in file "SoilMoistureSensor.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  moisture        2   15[COMRAM] unsigned short 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, status,0, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1817 ;;      Params:         2       0       0       0
  1818 ;;      Locals:         0       0       0       0
  1819 ;;      Temps:          0       0       0       0
  1820 ;;      Totals:         2       0       0       0
  1821 ;;Total ram usage:        2 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 5
  1824 ;; This function calls:
  1825 ;;		_set_state
  1826 ;; This function is called by:
  1827 ;;		_FSM_begin
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text18
  1832   000786                     __ptext18:
  1833                           	callstack 0
  1834   000786                     _SMS_Set_State:
  1835                           	callstack 24
  1836   000786                     
  1837                           ;SoilMoistureSensor.c: 19: void SMS_Set_State(U16 moisture);SoilMoistureSensor.c: 20: {;
      +                          SoilMoistureSensor.c: 21:     if(moisture >= (595))
  1838   000786  0E53               	movlw	83
  1839   000788  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1840   00078A  0E02               	movlw	2
  1841   00078C  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1842   00078E  A0D8               	btfss	status,0,c
  1843   000790  EFCC  F003         	goto	u401
  1844   000794  EFCE  F003         	goto	u400
  1845   000798                     u401:
  1846   000798  EFD3  F003         	goto	l1529
  1847   00079C                     u400:
  1848   00079C                     
  1849                           ;SoilMoistureSensor.c: 22:     {;SoilMoistureSensor.c: 23:         set_state(WATER_PLANT
      +                          S);
  1850   00079C  0E02               	movlw	2
  1851   00079E  ECA2  F005         	call	_set_state
  1852                           
  1853                           ;SoilMoistureSensor.c: 24:     }
  1854   0007A2  EFF1  F003         	goto	l150
  1855   0007A6                     l1529:
  1856   0007A6  5011               	movf	(SMS_Set_State@moisture+1)^0,w,c
  1857   0007A8  E109               	bnz	u410
  1858   0007AA  0EEF               	movlw	239
  1859   0007AC  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1860   0007AE  A0D8               	btfss	status,0,c
  1861   0007B0  EFDC  F003         	goto	u411
  1862   0007B4  EFDE  F003         	goto	u410
  1863   0007B8                     u411:
  1864   0007B8  EFEE  F003         	goto	l1535
  1865   0007BC                     u410:
  1866   0007BC  0E53               	movlw	83
  1867   0007BE  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1868   0007C0  0E02               	movlw	2
  1869   0007C2  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1870   0007C4  B0D8               	btfsc	status,0,c
  1871   0007C6  EFE7  F003         	goto	u421
  1872   0007CA  EFE9  F003         	goto	u420
  1873   0007CE                     u421:
  1874   0007CE  EFEE  F003         	goto	l1535
  1875   0007D2                     u420:
  1876   0007D2                     
  1877                           ;SoilMoistureSensor.c: 26:     {;SoilMoistureSensor.c: 28:         set_state(IDLE_STATE)
      +                          ;
  1878   0007D2  0E01               	movlw	1
  1879   0007D4  ECA2  F005         	call	_set_state
  1880                           
  1881                           ;SoilMoistureSensor.c: 29:     }
  1882   0007D8  EFF1  F003         	goto	l150
  1883   0007DC                     l1535:
  1884                           
  1885                           ;SoilMoistureSensor.c: 31:     {;SoilMoistureSensor.c: 32:         set_state(IDLE_STATE)
      +                          ;
  1886   0007DC  0E01               	movlw	1
  1887   0007DE  ECA2  F005         	call	_set_state
  1888   0007E2                     l150:
  1889   0007E2  0012               	return		;funcret
  1890   0007E4                     __end_of_SMS_Set_State:
  1891                           	callstack 0
  1892                           
  1893 ;; *************** function _set_state *****************
  1894 ;; Defined at:
  1895 ;;		line 9 in file "FSM_states.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  state_to_set    1    wreg     enum E2
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  state_to_set    1   14[COMRAM] enum E2
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1909 ;;      Params:         0       0       0       0
  1910 ;;      Locals:         1       0       0       0
  1911 ;;      Temps:          0       0       0       0
  1912 ;;      Totals:         1       0       0       0
  1913 ;;Total ram usage:        1 bytes
  1914 ;; Hardware stack levels used: 1
  1915 ;; Hardware stack levels required when called: 4
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;;		_SMS_Set_State
  1921 ;;		_FSM_begin
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text19
  1926   000B44                     __ptext19:
  1927                           	callstack 0
  1928   000B44                     _set_state:
  1929                           	callstack 26
  1930                           
  1931                           ;incstack = 0
  1932                           ;set_state@state_to_set stored from wreg
  1933   000B44  6E0F               	movwf	set_state@state_to_set^0,c
  1934   000B46                     
  1935                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  1936   000B46  C00F  F047         	movff	set_state@state_to_set,_FSM_state
  1937   000B4A  0012               	return		;funcret
  1938   000B4C                     __end_of_set_state:
  1939                           	callstack 0
  1940                           
  1941 ;; *************** function _SMS_Read_Moisture_Value *****************
  1942 ;; Defined at:
  1943 ;;		line 13 in file "SoilMoistureSensor.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;		None
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  moisture        2   18[COMRAM] unsigned short 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  2   16[COMRAM] unsigned short 
  1950 ;; Registers used:
  1951 ;;		wreg, status,2, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1957 ;;      Params:         2       0       0       0
  1958 ;;      Locals:         2       0       0       0
  1959 ;;      Temps:          0       0       0       0
  1960 ;;      Totals:         4       0       0       0
  1961 ;;Total ram usage:        4 bytes
  1962 ;; Hardware stack levels used: 1
  1963 ;; Hardware stack levels required when called: 6
  1964 ;; This function calls:
  1965 ;;		_ADC_Read
  1966 ;; This function is called by:
  1967 ;;		_FSM_begin
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text20
  1972   000AAE                     __ptext20:
  1973                           	callstack 0
  1974   000AAE                     _SMS_Read_Moisture_Value:
  1975                           	callstack 23
  1976   000AAE                     
  1977                           ;SoilMoistureSensor.c: 15:     U16 moisture = ADC_Read();
  1978   000AAE  ECEA  F004         	call	_ADC_Read	;wreg free
  1979   000AB2  C00F  F013         	movff	?_ADC_Read,SMS_Read_Moisture_Value@moisture
  1980   000AB6  C010  F014         	movff	?_ADC_Read+1,SMS_Read_Moisture_Value@moisture+1
  1981   000ABA                     
  1982                           ;SoilMoistureSensor.c: 16:     return moisture;
  1983   000ABA  C013  F011         	movff	SMS_Read_Moisture_Value@moisture,?_SMS_Read_Moisture_Value
  1984   000ABE  C014  F012         	movff	SMS_Read_Moisture_Value@moisture+1,?_SMS_Read_Moisture_Value+1
  1985   000AC2  0012               	return		;funcret
  1986   000AC4                     __end_of_SMS_Read_Moisture_Value:
  1987                           	callstack 0
  1988                           
  1989 ;; *************** function _ADC_Read *****************
  1990 ;; Defined at:
  1991 ;;		line 60 in file "PIC18F4331_ADC.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;		None
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  2   14[COMRAM] unsigned short 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2005 ;;      Params:         2       0       0       0
  2006 ;;      Locals:         0       0       0       0
  2007 ;;      Temps:          0       0       0       0
  2008 ;;      Totals:         2       0       0       0
  2009 ;;Total ram usage:        2 bytes
  2010 ;; Hardware stack levels used: 1
  2011 ;; Hardware stack levels required when called: 5
  2012 ;; This function calls:
  2013 ;;		_ADC_in_progress
  2014 ;;		_ADC_start
  2015 ;; This function is called by:
  2016 ;;		_SMS_Read_Moisture_Value
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text21
  2021   0009D4                     __ptext21:
  2022                           	callstack 0
  2023   0009D4                     _ADC_Read:
  2024                           	callstack 23
  2025   0009D4                     
  2026                           ;PIC18F4331_ADC.c: 62:     ADC_start();
  2027   0009D4  ECAD  F005         	call	_ADC_start	;wreg free
  2028   0009D8                     l1487:
  2029   0009D8  EC6D  F005         	call	_ADC_in_progress	;wreg free
  2030   0009DC  0900               	iorlw	0
  2031   0009DE  A4D8               	btfss	status,2,c
  2032   0009E0  EFF4  F004         	goto	u361
  2033   0009E4  EFF6  F004         	goto	u360
  2034   0009E8                     u361:
  2035   0009E8  EFEC  F004         	goto	l1487
  2036   0009EC                     u360:
  2037   0009EC                     
  2038                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
  2039   0009EC  CFC4 F042          	movff	4036,_ADC+1	;volatile
  2040                           
  2041                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
  2042   0009F0  CFC3 F041          	movff	4035,_ADC	;volatile
  2043                           
  2044                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
  2045   0009F4  C041  F00F         	movff	_ADC,?_ADC_Read
  2046   0009F8  C042  F010         	movff	_ADC+1,?_ADC_Read+1
  2047   0009FC  0012               	return		;funcret
  2048   0009FE                     __end_of_ADC_Read:
  2049                           	callstack 0
  2050                           
  2051 ;; *************** function _ADC_start *****************
  2052 ;; Defined at:
  2053 ;;		line 13 in file "PIC18F4331_ADC.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		None
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2067 ;;      Params:         0       0       0       0
  2068 ;;      Locals:         0       0       0       0
  2069 ;;      Temps:          0       0       0       0
  2070 ;;      Totals:         0       0       0       0
  2071 ;;Total ram usage:        0 bytes
  2072 ;; Hardware stack levels used: 1
  2073 ;; Hardware stack levels required when called: 4
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_ADC_Read
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text22
  2082   000B5A                     __ptext22:
  2083                           	callstack 0
  2084   000B5A                     _ADC_start:
  2085                           	callstack 23
  2086   000B5A                     
  2087                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
  2088   000B5A  80C2               	bsf	194,0,c	;volatile
  2089                           
  2090                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
  2091   000B5C  82C2               	bsf	194,1,c	;volatile
  2092   000B5E  0012               	return		;funcret
  2093   000B60                     __end_of_ADC_start:
  2094                           	callstack 0
  2095                           
  2096 ;; *************** function _ADC_in_progress *****************
  2097 ;; Defined at:
  2098 ;;		line 53 in file "PIC18F4331_ADC.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      unsigned char 
  2105 ;; Registers used:
  2106 ;;		wreg
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2112 ;;      Params:         0       0       0       0
  2113 ;;      Locals:         0       0       0       0
  2114 ;;      Temps:          0       0       0       0
  2115 ;;      Totals:         0       0       0       0
  2116 ;;Total ram usage:        0 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; Hardware stack levels required when called: 4
  2119 ;; This function calls:
  2120 ;;		Nothing
  2121 ;; This function is called by:
  2122 ;;		_ADC_Read
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text23
  2127   000ADA                     __ptext23:
  2128                           	callstack 0
  2129   000ADA                     _ADC_in_progress:
  2130                           	callstack 23
  2131   000ADA                     
  2132                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
  2133   000ADA  B2C2               	btfsc	194,1,c	;volatile
  2134   000ADC  EF72  F005         	goto	u11
  2135   000AE0  EF75  F005         	goto	u10
  2136   000AE4                     u11:
  2137   000AE4  0E01               	movlw	1
  2138   000AE6  EF76  F005         	goto	u16
  2139   000AEA                     u10:
  2140   000AEA  0E00               	movlw	0
  2141   000AEC                     u16:
  2142   000AEC  0012               	return		;funcret
  2143   000AEE                     __end_of_ADC_in_progress:
  2144                           	callstack 0
  2145                           
  2146 ;; *************** function _Register_Callback *****************
  2147 ;; Defined at:
  2148 ;;		line 47 in file "SystemCallbacks.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  config          2   16[COMRAM] PTR struct .
  2151 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;		None
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      unsigned char 
  2156 ;; Registers used:
  2157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2163 ;;      Params:         2       0       0       0
  2164 ;;      Locals:         0       0       0       0
  2165 ;;      Temps:          2       0       0       0
  2166 ;;      Totals:         4       0       0       0
  2167 ;;Total ram usage:        4 bytes
  2168 ;; Hardware stack levels used: 1
  2169 ;; Hardware stack levels required when called: 5
  2170 ;; This function calls:
  2171 ;;		_Reset_Counter
  2172 ;; This function is called by:
  2173 ;;		_FSM_begin
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text24
  2178   000632                     __ptext24:
  2179                           	callstack 0
  2180   000632                     _Register_Callback:
  2181                           	callstack 24
  2182   000632                     
  2183                           ;SystemCallbacks.c: 47: U8 Register_Callback(Callback_Config_t *config);SystemCallbacks.
      +                          c: 48: {;SystemCallbacks.c: 49:     if(callback_count < (5))
  2184   000632  0E05               	movlw	5
  2185   000634  6046               	cpfslt	_callback_count^0,c
  2186   000636  EF1F  F003         	goto	u461
  2187   00063A  EF21  F003         	goto	u460
  2188   00063E                     u461:
  2189   00063E  EF55  F003         	goto	l256
  2190   000642                     u460:
  2191   000642                     
  2192                           ;SystemCallbacks.c: 50:     {;SystemCallbacks.c: 51:         if(config->callback != ((vo
      +                          id*)0) && config->expiry_time > 0)
  2193   000642  EE20 F002          	lfsr	2,2
  2194   000646  5011               	movf	Register_Callback@config^0,w,c
  2195   000648  26D9               	addwf	fsr2l,f,c
  2196   00064A  5012               	movf	(Register_Callback@config+1)^0,w,c
  2197   00064C  22DA               	addwfc	fsr2h,f,c
  2198   00064E  50DE               	movf	postinc2,w,c
  2199   000650  10DE               	iorwf	postinc2,w,c
  2200   000652  B4D8               	btfsc	status,2,c
  2201   000654  EF2E  F003         	goto	u471
  2202   000658  EF30  F003         	goto	u470
  2203   00065C                     u471:
  2204   00065C  EF55  F003         	goto	l256
  2205   000660                     u470:
  2206   000660  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2207   000664  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2208   000668  50DE               	movf	postinc2,w,c
  2209   00066A  10DE               	iorwf	postinc2,w,c
  2210   00066C  B4D8               	btfsc	status,2,c
  2211   00066E  EF3B  F003         	goto	u481
  2212   000672  EF3D  F003         	goto	u480
  2213   000676                     u481:
  2214   000676  EF55  F003         	goto	l256
  2215   00067A                     u480:
  2216   00067A                     
  2217                           ;SystemCallbacks.c: 52:         {;SystemCallbacks.c: 54:             registered_callback
      +                          s[callback_count] = (*config);
  2218   00067A  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2219   00067E  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2220   000682  5046               	movf	_callback_count^0,w,c
  2221   000684  0D08               	mullw	8
  2222   000686  0E60               	movlw	low _registered_callbacks
  2223   000688  24F3               	addwf	243,w,c
  2224   00068A  6EE1               	movwf	fsr1l,c
  2225   00068C  0E00               	movlw	high _registered_callbacks
  2226   00068E  20F4               	addwfc	prodh,w,c
  2227   000690  6EE2               	movwf	fsr1h,c
  2228   000692  0E07               	movlw	7
  2229   000694                     u491:
  2230   000694  CFDB FFE3          	movff	plusw2,plusw1
  2231   000698  06E8               	decf	wreg,f,c
  2232   00069A  E2FC               	bc	u491
  2233   00069C                     
  2234                           ;SystemCallbacks.c: 55:             Reset_Counter(config);
  2235   00069C  C011  F00F         	movff	Register_Callback@config,Reset_Counter@config
  2236   0006A0  C012  F010         	movff	Register_Callback@config+1,Reset_Counter@config+1
  2237   0006A4  EC62  F005         	call	_Reset_Counter	;wreg free
  2238   0006A8                     
  2239                           ;SystemCallbacks.c: 57:             callback_count++;
  2240   0006A8  2A46               	incf	_callback_count^0,f,c
  2241   0006AA                     l256:
  2242   0006AA  0012               	return		;funcret
  2243   0006AC                     __end_of_Register_Callback:
  2244                           	callstack 0
  2245                           
  2246 ;; *************** function _Reset_Counter *****************
  2247 ;; Defined at:
  2248 ;;		line 42 in file "SystemCallbacks.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  config          2   14[COMRAM] PTR struct .
  2251 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2263 ;;      Params:         2       0       0       0
  2264 ;;      Locals:         0       0       0       0
  2265 ;;      Temps:          0       0       0       0
  2266 ;;      Totals:         2       0       0       0
  2267 ;;Total ram usage:        2 bytes
  2268 ;; Hardware stack levels used: 1
  2269 ;; Hardware stack levels required when called: 4
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_Register_Callback
  2274 ;; This function uses a non-reentrant model
  2275 ;;
  2276                           
  2277                           	psect	text25
  2278   000AC4                     __ptext25:
  2279                           	callstack 0
  2280   000AC4                     _Reset_Counter:
  2281                           	callstack 24
  2282   000AC4                     
  2283                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  2284   000AC4  EE20 F005          	lfsr	2,5
  2285   000AC8  500F               	movf	Reset_Counter@config^0,w,c
  2286   000ACA  26D9               	addwf	fsr2l,f,c
  2287   000ACC  5010               	movf	(Reset_Counter@config+1)^0,w,c
  2288   000ACE  22DA               	addwfc	fsr2h,f,c
  2289   000AD0  0E00               	movlw	0
  2290   000AD2  6EDE               	movwf	postinc2,c
  2291   000AD4  0E00               	movlw	0
  2292   000AD6  6EDD               	movwf	postdec2,c
  2293   000AD8  0012               	return		;funcret
  2294   000ADA                     __end_of_Reset_Counter:
  2295                           	callstack 0
  2296                           
  2297 ;; *************** function _LCD_Write_String *****************
  2298 ;; Defined at:
  2299 ;;		line 120 in file "LCD.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  str             2   18[COMRAM] PTR unsigned char 
  2302 ;;		 -> STR_5(19), STR_4(20), STR_3(15), STR_2(19), 
  2303 ;;		 -> STR_1(17), 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  i               2   22[COMRAM] int 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2315 ;;      Params:         2       0       0       0
  2316 ;;      Locals:         2       0       0       0
  2317 ;;      Temps:          2       0       0       0
  2318 ;;      Totals:         6       0       0       0
  2319 ;;Total ram usage:        6 bytes
  2320 ;; Hardware stack levels used: 1
  2321 ;; Hardware stack levels required when called: 6
  2322 ;; This function calls:
  2323 ;;		_LCD_Write_Char
  2324 ;; This function is called by:
  2325 ;;		_FSM_begin
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text26
  2330   000840                     __ptext26:
  2331                           	callstack 0
  2332   000840                     _LCD_Write_String:
  2333                           	callstack 23
  2334   000840                     
  2335                           ;LCD.c: 120: void LCD_Write_String(char *str);LCD.c: 121: {;LCD.c: 122:   int i;;LCD.c: 
      +                          123:   for(i=0;str[i]!='\0';i++)
  2336   000840  0E00               	movlw	0
  2337   000842  6E18               	movwf	(LCD_Write_String@i+1)^0,c
  2338   000844  0E00               	movlw	0
  2339   000846  6E17               	movwf	LCD_Write_String@i^0,c
  2340   000848  EF36  F004         	goto	l1517
  2341   00084C                     l1513:
  2342                           
  2343                           ;LCD.c: 124:     LCD_Write_Char(str[i]);
  2344   00084C  5017               	movf	LCD_Write_String@i^0,w,c
  2345   00084E  2413               	addwf	LCD_Write_String@str^0,w,c
  2346   000850  6E15               	movwf	??_LCD_Write_String^0,c
  2347   000852  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2348   000854  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2349   000856  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2350   000858  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2351   00085C  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2352   000860                     	if	0	;tblptru may be non-zero
  2353   000860                     	endif
  2354   000860                     	if	0	;tblptru may be non-zero
  2355   000860                     	endif
  2356   000860  0008               	tblrd		*
  2357   000862  50F5               	movf	tablat,w,c
  2358   000864  EC71  F004         	call	_LCD_Write_Char
  2359   000868  4A17               	infsnz	LCD_Write_String@i^0,f,c
  2360   00086A  2A18               	incf	(LCD_Write_String@i+1)^0,f,c
  2361   00086C                     l1517:
  2362   00086C  5017               	movf	LCD_Write_String@i^0,w,c
  2363   00086E  2413               	addwf	LCD_Write_String@str^0,w,c
  2364   000870  6E15               	movwf	??_LCD_Write_String^0,c
  2365   000872  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2366   000874  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2367   000876  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2368   000878  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2369   00087C  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2370   000880                     	if	0	;tblptru may be non-zero
  2371   000880                     	endif
  2372   000880                     	if	0	;tblptru may be non-zero
  2373   000880                     	endif
  2374   000880  0008               	tblrd		*
  2375   000882  50F5               	movf	tablat,w,c
  2376   000884  0900               	iorlw	0
  2377   000886  A4D8               	btfss	status,2,c
  2378   000888  EF48  F004         	goto	u391
  2379   00088C  EF4A  F004         	goto	u390
  2380   000890                     u391:
  2381   000890  EF26  F004         	goto	l1513
  2382   000894                     u390:
  2383   000894  0012               	return		;funcret
  2384   000896                     __end_of_LCD_Write_String:
  2385                           	callstack 0
  2386                           
  2387 ;; *************** function _LCD_Write_Char *****************
  2388 ;; Defined at:
  2389 ;;		line 102 in file "LCD.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  Data            1    wreg     unsigned char 
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  Data            1   17[COMRAM] unsigned char 
  2394 ;;  High4           1   16[COMRAM] unsigned char 
  2395 ;;  Low4            1   15[COMRAM] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2405 ;;      Params:         0       0       0       0
  2406 ;;      Locals:         3       0       0       0
  2407 ;;      Temps:          0       0       0       0
  2408 ;;      Totals:         3       0       0       0
  2409 ;;Total ram usage:        3 bytes
  2410 ;; Hardware stack levels used: 1
  2411 ;; Hardware stack levels required when called: 5
  2412 ;; This function calls:
  2413 ;;		_LCD_DATA
  2414 ;; This function is called by:
  2415 ;;		_LCD_Write_String
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text27
  2420   0008E2                     __ptext27:
  2421                           	callstack 0
  2422   0008E2                     _LCD_Write_Char:
  2423                           	callstack 23
  2424                           
  2425                           ;incstack = 0
  2426                           ;LCD_Write_Char@Data stored from wreg
  2427   0008E2  6E12               	movwf	LCD_Write_Char@Data^0,c
  2428   0008E4                     
  2429                           ;LCD.c: 102: void LCD_Write_Char(char Data);LCD.c: 103: {;LCD.c: 104:   char Low4,High4;
      +                          ;LCD.c: 105:   Low4 = Data & 0x0F;
  2430   0008E4  5012               	movf	LCD_Write_Char@Data^0,w,c
  2431   0008E6  0B0F               	andlw	15
  2432   0008E8  6E10               	movwf	LCD_Write_Char@Low4^0,c
  2433                           
  2434                           ;LCD.c: 106:   High4 = Data & 0xF0;
  2435   0008EA  5012               	movf	LCD_Write_Char@Data^0,w,c
  2436   0008EC  0BF0               	andlw	240
  2437   0008EE  6E11               	movwf	LCD_Write_Char@High4^0,c
  2438   0008F0                     
  2439                           ;LCD.c: 107:   PORTBbits.RB5 = 1;
  2440   0008F0  8A81               	bsf	129,5,c	;volatile
  2441   0008F2                     
  2442                           ;LCD.c: 108:   LCD_DATA(High4>>4);
  2443   0008F2  3811               	swapf	LCD_Write_Char@High4^0,w,c
  2444   0008F4  0B0F               	andlw	15
  2445   0008F6  ECF2  F003         	call	_LCD_DATA
  2446   0008FA                     
  2447                           ;LCD.c: 109:   PORTBbits.RB4 = 1;
  2448   0008FA  8881               	bsf	129,4,c	;volatile
  2449   0008FC                     
  2450                           ;LCD.c: 110:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2451   0008FC  0EA6               	movlw	166
  2452   0008FE                     u667:
  2453   0008FE  2EE8               	decfsz	wreg,f,c
  2454   000900  D7FE               	bra	u667
  2455   000902  D000               	nop2	
  2456   000904                     
  2457                           ;LCD.c: 111:   PORTBbits.RB4 = 0;
  2458   000904  9881               	bcf	129,4,c	;volatile
  2459   000906                     
  2460                           ;LCD.c: 112:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2461   000906  0EA6               	movlw	166
  2462   000908                     u677:
  2463   000908  2EE8               	decfsz	wreg,f,c
  2464   00090A  D7FE               	bra	u677
  2465   00090C  D000               	nop2	
  2466   00090E                     
  2467                           ;LCD.c: 113:   LCD_DATA(Low4);
  2468   00090E  5010               	movf	LCD_Write_Char@Low4^0,w,c
  2469   000910  ECF2  F003         	call	_LCD_DATA
  2470   000914                     
  2471                           ;LCD.c: 114:   PORTBbits.RB4 = 1;
  2472   000914  8881               	bsf	129,4,c	;volatile
  2473   000916                     
  2474                           ;LCD.c: 115:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2475   000916  0EA6               	movlw	166
  2476   000918                     u687:
  2477   000918  2EE8               	decfsz	wreg,f,c
  2478   00091A  D7FE               	bra	u687
  2479   00091C  D000               	nop2	
  2480   00091E                     
  2481                           ;LCD.c: 116:   PORTBbits.RB4 = 0;
  2482   00091E  9881               	bcf	129,4,c	;volatile
  2483   000920                     
  2484                           ;LCD.c: 117:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2485   000920  0EA6               	movlw	166
  2486   000922                     u697:
  2487   000922  2EE8               	decfsz	wreg,f,c
  2488   000924  D7FE               	bra	u697
  2489   000926  D000               	nop2	
  2490   000928  0012               	return		;funcret
  2491   00092A                     __end_of_LCD_Write_Char:
  2492                           	callstack 0
  2493                           
  2494 ;; *************** function _LCD_Set_Cursor *****************
  2495 ;; Defined at:
  2496 ;;		line 81 in file "LCD.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;  r               1    wreg     unsigned char 
  2499 ;;  c               1   16[COMRAM] unsigned char 
  2500 ;; Auto vars:     Size  Location     Type
  2501 ;;  r               1   17[COMRAM] unsigned char 
  2502 ;;  Temp            1   20[COMRAM] unsigned char 
  2503 ;;  High4           1   19[COMRAM] unsigned char 
  2504 ;;  Low4            1   18[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2514 ;;      Params:         1       0       0       0
  2515 ;;      Locals:         4       0       0       0
  2516 ;;      Temps:          0       0       0       0
  2517 ;;      Totals:         5       0       0       0
  2518 ;;Total ram usage:        5 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 6
  2521 ;; This function calls:
  2522 ;;		_LCD_CMD
  2523 ;; This function is called by:
  2524 ;;		_FSM_begin
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text28
  2529   000724                     __ptext28:
  2530                           	callstack 0
  2531   000724                     _LCD_Set_Cursor:
  2532                           	callstack 23
  2533                           
  2534                           ;incstack = 0
  2535                           ;LCD_Set_Cursor@r stored from wreg
  2536   000724  6E12               	movwf	LCD_Set_Cursor@r^0,c
  2537   000726                     
  2538                           ;LCD.c: 81: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 82: {;LCD.c: 83
      +                          :   unsigned char Temp,Low4,High4;;LCD.c: 84:   if(r == 1)
  2539   000726  0412               	decf	LCD_Set_Cursor@r^0,w,c
  2540   000728  A4D8               	btfss	status,2,c
  2541   00072A  EF99  F003         	goto	u371
  2542   00072E  EF9B  F003         	goto	u370
  2543   000732                     u371:
  2544   000732  EFAA  F003         	goto	l92
  2545   000736                     u370:
  2546   000736                     
  2547                           ;LCD.c: 85:   {;LCD.c: 86:     Temp = 0x80 + c - 1;
  2548   000736  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2549   000738  0F7F               	addlw	127
  2550   00073A  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2551                           
  2552                           ;LCD.c: 87:     High4 = Temp >> 4;
  2553   00073C  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2554   00073E  0B0F               	andlw	15
  2555   000740  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2556                           
  2557                           ;LCD.c: 88:     Low4 = Temp & 0x0F;
  2558   000742  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2559   000744  0B0F               	andlw	15
  2560   000746  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2561   000748                     
  2562                           ;LCD.c: 89:     LCD_CMD(High4);
  2563   000748  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2564   00074A  EC35  F005         	call	_LCD_CMD
  2565   00074E                     
  2566                           ;LCD.c: 90:     LCD_CMD(Low4);
  2567   00074E  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2568   000750  EC35  F005         	call	_LCD_CMD
  2569   000754                     l92:
  2570                           
  2571                           ;LCD.c: 92:   if(r == 2)
  2572   000754  0E02               	movlw	2
  2573   000756  1812               	xorwf	LCD_Set_Cursor@r^0,w,c
  2574   000758  A4D8               	btfss	status,2,c
  2575   00075A  EFB1  F003         	goto	u381
  2576   00075E  EFB3  F003         	goto	u380
  2577   000762                     u381:
  2578   000762  EFC2  F003         	goto	l94
  2579   000766                     u380:
  2580   000766                     
  2581                           ;LCD.c: 93:   {;LCD.c: 94:     Temp = 0xC0 + c - 1;
  2582   000766  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2583   000768  0FBF               	addlw	191
  2584   00076A  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2585                           
  2586                           ;LCD.c: 95:     High4 = Temp >> 4;
  2587   00076C  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2588   00076E  0B0F               	andlw	15
  2589   000770  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2590                           
  2591                           ;LCD.c: 96:     Low4 = Temp & 0x0F;
  2592   000772  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2593   000774  0B0F               	andlw	15
  2594   000776  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2595   000778                     
  2596                           ;LCD.c: 97:     LCD_CMD(High4);
  2597   000778  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2598   00077A  EC35  F005         	call	_LCD_CMD
  2599   00077E                     
  2600                           ;LCD.c: 98:     LCD_CMD(Low4);
  2601   00077E  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2602   000780  EC35  F005         	call	_LCD_CMD
  2603   000784                     l94:
  2604   000784  0012               	return		;funcret
  2605   000786                     __end_of_LCD_Set_Cursor:
  2606                           	callstack 0
  2607                           
  2608 ;; *************** function _LCD_Init *****************
  2609 ;; Defined at:
  2610 ;;		line 5 in file "LCD.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;		None
  2613 ;; Auto vars:     Size  Location     Type
  2614 ;;		None
  2615 ;; Return value:  Size  Location     Type
  2616 ;;                  1    wreg      void 
  2617 ;; Registers used:
  2618 ;;		wreg, status,2, cstack
  2619 ;; Tracked objects:
  2620 ;;		On entry : 0/0
  2621 ;;		On exit  : 0/0
  2622 ;;		Unchanged: 0/0
  2623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2624 ;;      Params:         0       0       0       0
  2625 ;;      Locals:         0       0       0       0
  2626 ;;      Temps:          1       0       0       0
  2627 ;;      Totals:         1       0       0       0
  2628 ;;Total ram usage:        1 bytes
  2629 ;; Hardware stack levels used: 1
  2630 ;; Hardware stack levels required when called: 6
  2631 ;; This function calls:
  2632 ;;		_LCD_CMD
  2633 ;;		_LCD_DATA
  2634 ;; This function is called by:
  2635 ;;		_FSM_begin
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           	psect	text29
  2640   0006AC                     __ptext29:
  2641                           	callstack 0
  2642   0006AC                     _LCD_Init:
  2643                           	callstack 23
  2644   0006AC                     
  2645                           ;LCD.c: 8:   TRISB = 0x00;
  2646   0006AC  0E00               	movlw	0
  2647   0006AE  6E93               	movwf	147,c	;volatile
  2648   0006B0                     
  2649                           ;LCD.c: 9:   TRISBbits.RB5 = 0;
  2650   0006B0  9A93               	bcf	147,5,c	;volatile
  2651   0006B2                     
  2652                           ;LCD.c: 10:   TRISBbits.RB4 = 0;
  2653   0006B2  9893               	bcf	147,4,c	;volatile
  2654   0006B4                     
  2655                           ;LCD.c: 13:   LCD_DATA(0x00);
  2656   0006B4  0E00               	movlw	0
  2657   0006B6  ECF2  F003         	call	_LCD_DATA
  2658   0006BA                     
  2659                           ;LCD.c: 14:   _delay((unsigned long)((30)*(8000000/4000.0)));
  2660   0006BA  0E4E               	movlw	78
  2661   0006BC  6E11               	movwf	??_LCD_Init^0,c
  2662   0006BE  0EEB               	movlw	235
  2663   0006C0                     u707:
  2664   0006C0  2EE8               	decfsz	wreg,f,c
  2665   0006C2  D7FE               	bra	u707
  2666   0006C4  2E11               	decfsz	??_LCD_Init^0,f,c
  2667   0006C6  D7FC               	bra	u707
  2668   0006C8  F000               	nop	
  2669   0006CA                     
  2670                           ;LCD.c: 15:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2671   0006CA  0EA6               	movlw	166
  2672   0006CC                     u717:
  2673   0006CC  2EE8               	decfsz	wreg,f,c
  2674   0006CE  D7FE               	bra	u717
  2675   0006D0  D000               	nop2	
  2676   0006D2                     
  2677                           ;LCD.c: 16:   LCD_CMD(0x03);
  2678   0006D2  0E03               	movlw	3
  2679   0006D4  EC35  F005         	call	_LCD_CMD
  2680                           
  2681                           ;LCD.c: 17:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2682   0006D8  0E0D               	movlw	13
  2683   0006DA  6E11               	movwf	??_LCD_Init^0,c
  2684   0006DC  0EFC               	movlw	252
  2685   0006DE                     u727:
  2686   0006DE  2EE8               	decfsz	wreg,f,c
  2687   0006E0  D7FE               	bra	u727
  2688   0006E2  2E11               	decfsz	??_LCD_Init^0,f,c
  2689   0006E4  D7FC               	bra	u727
  2690   0006E6                     
  2691                           ;LCD.c: 18:   LCD_CMD(0x03);
  2692   0006E6  0E03               	movlw	3
  2693   0006E8  EC35  F005         	call	_LCD_CMD
  2694   0006EC                     
  2695                           ;LCD.c: 19:   _delay((unsigned long)((150)*(8000000/4000000.0)));
  2696   0006EC  0E64               	movlw	100
  2697   0006EE                     u737:
  2698   0006EE  2EE8               	decfsz	wreg,f,c
  2699   0006F0  D7FE               	bra	u737
  2700                           
  2701                           ;LCD.c: 20:   LCD_CMD(0x03);
  2702   0006F2  0E03               	movlw	3
  2703   0006F4  EC35  F005         	call	_LCD_CMD
  2704                           
  2705                           ;LCD.c: 21:   LCD_CMD(0x02);
  2706   0006F8  0E02               	movlw	2
  2707   0006FA  EC35  F005         	call	_LCD_CMD
  2708                           
  2709                           ;LCD.c: 22:   LCD_CMD(0x02);
  2710   0006FE  0E02               	movlw	2
  2711   000700  EC35  F005         	call	_LCD_CMD
  2712                           
  2713                           ;LCD.c: 23:   LCD_CMD(0x08);
  2714   000704  0E08               	movlw	8
  2715   000706  EC35  F005         	call	_LCD_CMD
  2716                           
  2717                           ;LCD.c: 24:   LCD_CMD(0x00);
  2718   00070A  0E00               	movlw	0
  2719   00070C  EC35  F005         	call	_LCD_CMD
  2720                           
  2721                           ;LCD.c: 25:   LCD_CMD(0x0C);
  2722   000710  0E0C               	movlw	12
  2723   000712  EC35  F005         	call	_LCD_CMD
  2724                           
  2725                           ;LCD.c: 26:   LCD_CMD(0x00);
  2726   000716  0E00               	movlw	0
  2727   000718  EC35  F005         	call	_LCD_CMD
  2728                           
  2729                           ;LCD.c: 27:   LCD_CMD(0x06);
  2730   00071C  0E06               	movlw	6
  2731   00071E  EC35  F005         	call	_LCD_CMD
  2732   000722  0012               	return		;funcret
  2733   000724                     __end_of_LCD_Init:
  2734                           	callstack 0
  2735                           
  2736 ;; *************** function _LCD_Clear *****************
  2737 ;; Defined at:
  2738 ;;		line 30 in file "LCD.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;		None
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;		None
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2752 ;;      Params:         0       0       0       0
  2753 ;;      Locals:         0       0       0       0
  2754 ;;      Temps:          0       0       0       0
  2755 ;;      Totals:         0       0       0       0
  2756 ;;Total ram usage:        0 bytes
  2757 ;; Hardware stack levels used: 1
  2758 ;; Hardware stack levels required when called: 6
  2759 ;; This function calls:
  2760 ;;		_LCD_CMD
  2761 ;; This function is called by:
  2762 ;;		_FSM_begin
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text30
  2767   000AFE                     __ptext30:
  2768                           	callstack 0
  2769   000AFE                     _LCD_Clear:
  2770                           	callstack 23
  2771   000AFE                     
  2772                           ;LCD.c: 32:   LCD_CMD(0);
  2773   000AFE  0E00               	movlw	0
  2774   000B00  EC35  F005         	call	_LCD_CMD
  2775                           
  2776                           ;LCD.c: 33:   LCD_CMD(1);
  2777   000B04  0E01               	movlw	1
  2778   000B06  EC35  F005         	call	_LCD_CMD
  2779   000B0A  0012               	return		;funcret
  2780   000B0C                     __end_of_LCD_Clear:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function _LCD_CMD *****************
  2784 ;; Defined at:
  2785 ;;		line 49 in file "LCD.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  CMD             1    wreg     unsigned char 
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;  CMD             1   15[COMRAM] unsigned char 
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2799 ;;      Params:         0       0       0       0
  2800 ;;      Locals:         1       0       0       0
  2801 ;;      Temps:          0       0       0       0
  2802 ;;      Totals:         1       0       0       0
  2803 ;;Total ram usage:        1 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 5
  2806 ;; This function calls:
  2807 ;;		_LCD_DATA
  2808 ;; This function is called by:
  2809 ;;		_LCD_Init
  2810 ;;		_LCD_Clear
  2811 ;;		_LCD_Set_Cursor
  2812 ;;		_LCD_SL
  2813 ;;		_LCD_SR
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text31
  2818   000A6A                     __ptext31:
  2819                           	callstack 0
  2820   000A6A                     _LCD_CMD:
  2821                           	callstack 23
  2822                           
  2823                           ;incstack = 0
  2824                           ;LCD_CMD@CMD stored from wreg
  2825   000A6A  6E10               	movwf	LCD_CMD@CMD^0,c
  2826   000A6C                     
  2827                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:   PORTBbits.RB5 = 0;
  2828   000A6C  9A81               	bcf	129,5,c	;volatile
  2829   000A6E                     
  2830                           ;LCD.c: 54:   LCD_DATA(CMD);
  2831   000A6E  5010               	movf	LCD_CMD@CMD^0,w,c
  2832   000A70  ECF2  F003         	call	_LCD_DATA
  2833   000A74                     
  2834                           ;LCD.c: 56:   PORTBbits.RB4 = 1;
  2835   000A74  8881               	bsf	129,4,c	;volatile
  2836   000A76                     
  2837                           ;LCD.c: 57:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2838   000A76  0EA6               	movlw	166
  2839   000A78                     u747:
  2840   000A78  2EE8               	decfsz	wreg,f,c
  2841   000A7A  D7FE               	bra	u747
  2842   000A7C  D000               	nop2	
  2843   000A7E                     
  2844                           ;LCD.c: 58:   PORTBbits.RB4 = 0;
  2845   000A7E  9881               	bcf	129,4,c	;volatile
  2846   000A80  0012               	return		;funcret
  2847   000A82                     __end_of_LCD_CMD:
  2848                           	callstack 0
  2849                           
  2850 ;; *************** function _LCD_DATA *****************
  2851 ;; Defined at:
  2852 ;;		line 61 in file "LCD.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  Data            1    wreg     unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  Data            1   14[COMRAM] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2866 ;;      Params:         0       0       0       0
  2867 ;;      Locals:         1       0       0       0
  2868 ;;      Temps:          0       0       0       0
  2869 ;;      Totals:         1       0       0       0
  2870 ;;Total ram usage:        1 bytes
  2871 ;; Hardware stack levels used: 1
  2872 ;; Hardware stack levels required when called: 4
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_LCD_Init
  2877 ;;		_LCD_CMD
  2878 ;;		_LCD_Write_Char
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text32
  2883   0007E4                     __ptext32:
  2884                           	callstack 0
  2885   0007E4                     _LCD_DATA:
  2886                           	callstack 23
  2887                           
  2888                           ;incstack = 0
  2889                           ;LCD_DATA@Data stored from wreg
  2890   0007E4  6E0F               	movwf	LCD_DATA@Data^0,c
  2891   0007E6                     
  2892                           ;LCD.c: 61: void LCD_DATA(unsigned char Data);LCD.c: 62: {;LCD.c: 63:   if(Data & 1)
  2893   0007E6  A00F               	btfss	LCD_DATA@Data^0,0,c
  2894   0007E8  EFF8  F003         	goto	u21
  2895   0007EC  EFFA  F003         	goto	u20
  2896   0007F0                     u21:
  2897   0007F0  EFFD  F003         	goto	l81
  2898   0007F4                     u20:
  2899   0007F4                     
  2900                           ;LCD.c: 64:     PORTBbits.RB0 = 1;
  2901   0007F4  8081               	bsf	129,0,c	;volatile
  2902   0007F6  EFFE  F003         	goto	l1053
  2903   0007FA                     l81:
  2904                           
  2905                           ;LCD.c: 66:     PORTBbits.RB0 = 0;
  2906   0007FA  9081               	bcf	129,0,c	;volatile
  2907   0007FC                     l1053:
  2908                           
  2909                           ;LCD.c: 67:   if(Data & 2)
  2910   0007FC  A20F               	btfss	LCD_DATA@Data^0,1,c
  2911   0007FE  EF03  F004         	goto	u31
  2912   000802  EF05  F004         	goto	u30
  2913   000806                     u31:
  2914   000806  EF08  F004         	goto	l83
  2915   00080A                     u30:
  2916   00080A                     
  2917                           ;LCD.c: 68:     PORTBbits.RB1 = 1;
  2918   00080A  8281               	bsf	129,1,c	;volatile
  2919   00080C  EF09  F004         	goto	l1057
  2920   000810                     l83:
  2921                           
  2922                           ;LCD.c: 70:     PORTBbits.RB1 = 0;
  2923   000810  9281               	bcf	129,1,c	;volatile
  2924   000812                     l1057:
  2925                           
  2926                           ;LCD.c: 71:   if(Data & 4)
  2927   000812  A40F               	btfss	LCD_DATA@Data^0,2,c
  2928   000814  EF0E  F004         	goto	u41
  2929   000818  EF10  F004         	goto	u40
  2930   00081C                     u41:
  2931   00081C  EF13  F004         	goto	l85
  2932   000820                     u40:
  2933   000820                     
  2934                           ;LCD.c: 72:     PORTBbits.RB2 = 1;
  2935   000820  8481               	bsf	129,2,c	;volatile
  2936   000822  EF14  F004         	goto	l1061
  2937   000826                     l85:
  2938                           
  2939                           ;LCD.c: 74:     PORTBbits.RB2 = 0;
  2940   000826  9481               	bcf	129,2,c	;volatile
  2941   000828                     l1061:
  2942                           
  2943                           ;LCD.c: 75:   if(Data & 8)
  2944   000828  A60F               	btfss	LCD_DATA@Data^0,3,c
  2945   00082A  EF19  F004         	goto	u51
  2946   00082E  EF1B  F004         	goto	u50
  2947   000832                     u51:
  2948   000832  EF1E  F004         	goto	l87
  2949   000836                     u50:
  2950   000836                     
  2951                           ;LCD.c: 76:     PORTBbits.RB3 = 1;
  2952   000836  8681               	bsf	129,3,c	;volatile
  2953   000838  EF1F  F004         	goto	l89
  2954   00083C                     l87:
  2955                           
  2956                           ;LCD.c: 78:     PORTBbits.RB3 = 0;
  2957   00083C  9681               	bcf	129,3,c	;volatile
  2958   00083E                     l89:
  2959   00083E  0012               	return		;funcret
  2960   000840                     __end_of_LCD_DATA:
  2961                           	callstack 0
  2962                           
  2963 ;; *************** function _Callbacks_Init *****************
  2964 ;; Defined at:
  2965 ;;		line 9 in file "SystemCallbacks.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  callback        1   14[COMRAM] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2979 ;;      Params:         0       0       0       0
  2980 ;;      Locals:         1       0       0       0
  2981 ;;      Temps:          0       0       0       0
  2982 ;;      Totals:         1       0       0       0
  2983 ;;Total ram usage:        1 bytes
  2984 ;; Hardware stack levels used: 1
  2985 ;; Hardware stack levels required when called: 4
  2986 ;; This function calls:
  2987 ;;		Nothing
  2988 ;; This function is called by:
  2989 ;;		_FSM_begin
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text33
  2994   000896                     __ptext33:
  2995                           	callstack 0
  2996   000896                     _Callbacks_Init:
  2997                           	callstack 25
  2998   000896                     
  2999                           ;SystemCallbacks.c: 11:     for(U8 callback=0; callback<(5); callback++)
  3000   000896  0E00               	movlw	0
  3001   000898  6E0F               	movwf	Callbacks_Init@callback^0,c
  3002   00089A                     l1551:
  3003                           
  3004                           ;SystemCallbacks.c: 12:     {;SystemCallbacks.c: 13:         registered_callbacks[callba
      +                          ck].callback = ((void*)0);
  3005   00089A  500F               	movf	Callbacks_Init@callback^0,w,c
  3006   00089C  0D08               	mullw	8
  3007   00089E  0E62               	movlw	low (_registered_callbacks+2)
  3008   0008A0  24F3               	addwf	243,w,c
  3009   0008A2  6ED9               	movwf	fsr2l,c
  3010   0008A4  0E00               	movlw	high (_registered_callbacks+2)
  3011   0008A6  20F4               	addwfc	prodh,w,c
  3012   0008A8  6EDA               	movwf	fsr2h,c
  3013   0008AA  0E00               	movlw	0
  3014   0008AC  6EDE               	movwf	postinc2,c
  3015   0008AE  0E00               	movlw	0
  3016   0008B0  6EDD               	movwf	postdec2,c
  3017                           
  3018                           ;SystemCallbacks.c: 14:         registered_callbacks[callback].count = 0;
  3019   0008B2  500F               	movf	Callbacks_Init@callback^0,w,c
  3020   0008B4  0D08               	mullw	8
  3021   0008B6  0E65               	movlw	low (_registered_callbacks+5)
  3022   0008B8  24F3               	addwf	243,w,c
  3023   0008BA  6ED9               	movwf	fsr2l,c
  3024   0008BC  0E00               	movlw	high (_registered_callbacks+5)
  3025   0008BE  20F4               	addwfc	prodh,w,c
  3026   0008C0  6EDA               	movwf	fsr2h,c
  3027   0008C2  0E00               	movlw	0
  3028   0008C4  6EDE               	movwf	postinc2,c
  3029   0008C6  0E00               	movlw	0
  3030   0008C8  6EDD               	movwf	postdec2,c
  3031   0008CA                     
  3032                           ;SystemCallbacks.c: 15:         callback_count = 0;
  3033   0008CA  0E00               	movlw	0
  3034   0008CC  6E46               	movwf	_callback_count^0,c
  3035   0008CE                     
  3036                           ;SystemCallbacks.c: 16:     }
  3037   0008CE  2A0F               	incf	Callbacks_Init@callback^0,f,c
  3038   0008D0  0E04               	movlw	4
  3039   0008D2  640F               	cpfsgt	Callbacks_Init@callback^0,c
  3040   0008D4  EF6E  F004         	goto	u451
  3041   0008D8  EF70  F004         	goto	u450
  3042   0008DC                     u451:
  3043   0008DC  EF4D  F004         	goto	l1551
  3044   0008E0                     u450:
  3045   0008E0  0012               	return		;funcret
  3046   0008E2                     __end_of_Callbacks_Init:
  3047                           	callstack 0
  3048                           
  3049 ;; *************** function _timer_overflow_isr *****************
  3050 ;; Defined at:
  3051 ;;		line 10 in file "SystemInterrupts.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3065 ;;      Params:         0       0       0       0
  3066 ;;      Locals:         0       0       0       0
  3067 ;;      Temps:          8       0       0       0
  3068 ;;      Totals:         8       0       0       0
  3069 ;;Total ram usage:        8 bytes
  3070 ;; Hardware stack levels used: 1
  3071 ;; Hardware stack levels required when called: 3
  3072 ;; This function calls:
  3073 ;;		_Callbacks_Manager
  3074 ;;		i2_set_state
  3075 ;; This function is called by:
  3076 ;;		Interrupt level 2
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	intcode
  3081   000008                     __pintcode:
  3082                           	callstack 0
  3083   000008                     _timer_overflow_isr:
  3084                           	callstack 23
  3085                           
  3086                           ;incstack = 0
  3087   000008  8248               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3088   00000A  CFFA F007          	movff	pclath,??_timer_overflow_isr
  3089   00000E  CFFB F008          	movff	pclatu,??_timer_overflow_isr+1
  3090   000012  CFE1 F009          	movff	fsr1l,??_timer_overflow_isr+2
  3091   000016  CFE2 F00A          	movff	fsr1h,??_timer_overflow_isr+3
  3092   00001A  CFD9 F00B          	movff	fsr2l,??_timer_overflow_isr+4
  3093   00001E  CFDA F00C          	movff	fsr2h,??_timer_overflow_isr+5
  3094   000022  CFF3 F00D          	movff	prodl,??_timer_overflow_isr+6
  3095   000026  CFF4 F00E          	movff	prodh,??_timer_overflow_isr+7
  3096   00002A                     
  3097                           ;SystemInterrupts.c: 13:     INTCONbits.GIEH = 0;
  3098   00002A  9EF2               	bcf	242,7,c	;volatile
  3099                           
  3100                           ;SystemInterrupts.c: 14:     INTCONbits.GIEL = 1;
  3101   00002C  8CF2               	bsf	242,6,c	;volatile
  3102   00002E                     
  3103                           ;SystemInterrupts.c: 28:     if(TMR0L < (0x7C))
  3104   00002E  0E7C               	movlw	124
  3105   000030  60D6               	cpfslt	214,c	;volatile
  3106   000032  EF1D  F000         	goto	i2u59_41
  3107   000036  EF1F  F000         	goto	i2u59_40
  3108   00003A                     i2u59_41:
  3109   00003A  EF21  F000         	goto	i2l1721
  3110   00003E                     i2u59_40:
  3111   00003E                     
  3112                           ;SystemInterrupts.c: 29:     {;SystemInterrupts.c: 30:         TMR0L = (0x7C);
  3113   00003E  0E7C               	movlw	124
  3114   000040  6ED6               	movwf	214,c	;volatile
  3115   000042                     i2l1721:
  3116                           
  3117                           ;SystemInterrupts.c: 32:     if(TMR0H < (0xE1))
  3118   000042  0EE1               	movlw	225
  3119   000044  60D7               	cpfslt	215,c	;volatile
  3120   000046  EF27  F000         	goto	i2u60_41
  3121   00004A  EF29  F000         	goto	i2u60_40
  3122   00004E                     i2u60_41:
  3123   00004E  EF2B  F000         	goto	i2l1725
  3124   000052                     i2u60_40:
  3125   000052                     
  3126                           ;SystemInterrupts.c: 33:     {;SystemInterrupts.c: 34:         TMR0H = (0xE1);
  3127   000052  0EE1               	movlw	225
  3128   000054  6ED7               	movwf	215,c	;volatile
  3129   000056                     i2l1725:
  3130                           
  3131                           ;SystemInterrupts.c: 38:     if(INTCONbits.TMR0IF)
  3132   000056  A4F2               	btfss	242,2,c	;volatile
  3133   000058  EF30  F000         	goto	i2u61_41
  3134   00005C  EF32  F000         	goto	i2u61_40
  3135   000060                     i2u61_41:
  3136   000060  EF35  F000         	goto	i2l1731
  3137   000064                     i2u61_40:
  3138   000064                     
  3139                           ;SystemInterrupts.c: 39:     {;SystemInterrupts.c: 41:         Callbacks_Manager();
  3140   000064  ECB5  F002         	call	_Callbacks_Manager	;wreg free
  3141   000068                     
  3142                           ;SystemInterrupts.c: 44:         INTCONbits.TMR0IF = 0;
  3143   000068  94F2               	bcf	242,2,c	;volatile
  3144   00006A                     i2l1731:
  3145                           
  3146                           ;SystemInterrupts.c: 48:     if(INTCONbits.INT0IF)
  3147   00006A  A2F2               	btfss	242,1,c	;volatile
  3148   00006C  EF3A  F000         	goto	i2u62_41
  3149   000070  EF3C  F000         	goto	i2u62_40
  3150   000074                     i2u62_41:
  3151   000074  EF40  F000         	goto	i2l1737
  3152   000078                     i2u62_40:
  3153   000078                     
  3154                           ;SystemInterrupts.c: 49:     {;SystemInterrupts.c: 51:         set_state(WATER_PLANTS);
  3155   000078  0E02               	movlw	2
  3156   00007A  ECA6  F005         	call	i2_set_state
  3157   00007E                     
  3158                           ;SystemInterrupts.c: 54:         INTCONbits.INT0IF = 0;
  3159   00007E  92F2               	bcf	242,1,c	;volatile
  3160   000080                     i2l1737:
  3161                           
  3162                           ;SystemInterrupts.c: 67:     INTCONbits.GIEH = 1;
  3163   000080  8EF2               	bsf	242,7,c	;volatile
  3164   000082                     
  3165                           ;SystemInterrupts.c: 68:     INTCONbits.GIEL = 1;
  3166   000082  8CF2               	bsf	242,6,c	;volatile
  3167   000084  C00E  FFF4         	movff	??_timer_overflow_isr+7,prodh
  3168   000088  C00D  FFF3         	movff	??_timer_overflow_isr+6,prodl
  3169   00008C  C00C  FFDA         	movff	??_timer_overflow_isr+5,fsr2h
  3170   000090  C00B  FFD9         	movff	??_timer_overflow_isr+4,fsr2l
  3171   000094  C00A  FFE2         	movff	??_timer_overflow_isr+3,fsr1h
  3172   000098  C009  FFE1         	movff	??_timer_overflow_isr+2,fsr1l
  3173   00009C  C008  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  3174   0000A0  C007  FFFA         	movff	??_timer_overflow_isr,pclath
  3175   0000A4  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3176   0000A6  0011               	retfie		f
  3177   0000A8                     __end_of_timer_overflow_isr:
  3178                           	callstack 0
  3179                           
  3180 ;; *************** function _Callbacks_Manager *****************
  3181 ;; Defined at:
  3182 ;;		line 24 in file "SystemCallbacks.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  callbacks       1    5[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3196 ;;      Params:         0       0       0       0
  3197 ;;      Locals:         1       0       0       0
  3198 ;;      Temps:          4       0       0       0
  3199 ;;      Totals:         5       0       0       0
  3200 ;;Total ram usage:        5 bytes
  3201 ;; Hardware stack levels used: 1
  3202 ;; Hardware stack levels required when called: 2
  3203 ;; This function calls:
  3204 ;;		_Check_Moisture_cb
  3205 ;;		_Watering_Done_cb
  3206 ;; This function is called by:
  3207 ;;		_timer_overflow_isr
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text35
  3212   00056A                     __ptext35:
  3213                           	callstack 0
  3214   00056A                     _Callbacks_Manager:
  3215                           	callstack 23
  3216   00056A                     
  3217                           ;SystemCallbacks.c: 26:     for (U8 callbacks = 0; callbacks < (5); callbacks++)
  3218   00056A  0E00               	movlw	0
  3219   00056C  6E06               	movwf	Callbacks_Manager@callbacks^0,c
  3220   00056E                     i2l1675:
  3221                           
  3222                           ;SystemCallbacks.c: 27:     {;SystemCallbacks.c: 28:         (registered_callbacks[callb
      +                          acks].count)++;
  3223   00056E  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3224   000570  0D08               	mullw	8
  3225   000572  0E65               	movlw	low (_registered_callbacks+5)
  3226   000574  24F3               	addwf	243,w,c
  3227   000576  6ED9               	movwf	fsr2l,c
  3228   000578  0E00               	movlw	high (_registered_callbacks+5)
  3229   00057A  20F4               	addwfc	prodh,w,c
  3230   00057C  6EDA               	movwf	fsr2h,c
  3231   00057E  2ADE               	incf	postinc2,f,c
  3232   000580  0E00               	movlw	0
  3233   000582  22DD               	addwfc	postdec2,f,c
  3234   000584                     
  3235                           ;SystemCallbacks.c: 29:         if(registered_callbacks[callbacks].count >=
  3236   000584  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3237   000586  0D08               	mullw	8
  3238   000588  0E60               	movlw	low _registered_callbacks
  3239   00058A  24F3               	addwf	243,w,c
  3240   00058C  6ED9               	movwf	fsr2l,c
  3241   00058E  0E00               	movlw	high _registered_callbacks
  3242   000590  20F4               	addwfc	prodh,w,c
  3243   000592  6EDA               	movwf	fsr2h,c
  3244   000594  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3245   000596  0D08               	mullw	8
  3246   000598  0E65               	movlw	low (_registered_callbacks+5)
  3247   00059A  24F3               	addwf	243,w,c
  3248   00059C  6EE1               	movwf	fsr1l,c
  3249   00059E  0E00               	movlw	high (_registered_callbacks+5)
  3250   0005A0  20F4               	addwfc	prodh,w,c
  3251   0005A2  6EE2               	movwf	fsr1h,c
  3252   0005A4  50DE               	movf	postinc2,w,c
  3253   0005A6  5CE6               	subwf	postinc1,w,c
  3254   0005A8  50DE               	movf	postinc2,w,c
  3255   0005AA  58E6               	subwfb	postinc1,w,c
  3256   0005AC  A0D8               	btfss	status,0,c
  3257   0005AE  EFDB  F002         	goto	i2u55_41
  3258   0005B2  EFDD  F002         	goto	i2u55_40
  3259   0005B6                     i2u55_41:
  3260   0005B6  EF0F  F003         	goto	i2l1685
  3261   0005BA                     i2u55_40:
  3262   0005BA                     
  3263                           ;SystemCallbacks.c: 31:         {;SystemCallbacks.c: 32:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  3264   0005BA  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3265   0005BC  0D08               	mullw	8
  3266   0005BE  0E62               	movlw	low (_registered_callbacks+2)
  3267   0005C0  24F3               	addwf	243,w,c
  3268   0005C2  6ED9               	movwf	fsr2l,c
  3269   0005C4  0E00               	movlw	high (_registered_callbacks+2)
  3270   0005C6  20F4               	addwfc	prodh,w,c
  3271   0005C8  6EDA               	movwf	fsr2h,c
  3272   0005CA  50DE               	movf	postinc2,w,c
  3273   0005CC  10DE               	iorwf	postinc2,w,c
  3274   0005CE  B4D8               	btfsc	status,2,c
  3275   0005D0  EFEC  F002         	goto	i2u56_41
  3276   0005D4  EFEE  F002         	goto	i2u56_40
  3277   0005D8                     i2u56_41:
  3278   0005D8  EF0F  F003         	goto	i2l1685
  3279   0005DC                     i2u56_40:
  3280   0005DC                     
  3281                           ;SystemCallbacks.c: 33:             {;SystemCallbacks.c: 34:                 registered_
      +                          callbacks[callbacks].count = 0;
  3282   0005DC  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3283   0005DE  0D08               	mullw	8
  3284   0005E0  0E65               	movlw	low (_registered_callbacks+5)
  3285   0005E2  24F3               	addwf	243,w,c
  3286   0005E4  6ED9               	movwf	fsr2l,c
  3287   0005E6  0E00               	movlw	high (_registered_callbacks+5)
  3288   0005E8  20F4               	addwfc	prodh,w,c
  3289   0005EA  6EDA               	movwf	fsr2h,c
  3290   0005EC  0E00               	movlw	0
  3291   0005EE  6EDE               	movwf	postinc2,c
  3292   0005F0  0E00               	movlw	0
  3293   0005F2  6EDD               	movwf	postdec2,c
  3294   0005F4                     
  3295                           ;SystemCallbacks.c: 35:                 registered_callbacks[callbacks].callback();
  3296   0005F4  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3297   0005F6  0D08               	mullw	8
  3298   0005F8  0E62               	movlw	low (_registered_callbacks+2)
  3299   0005FA  24F3               	addwf	243,w,c
  3300   0005FC  6ED9               	movwf	fsr2l,c
  3301   0005FE  0E00               	movlw	high (_registered_callbacks+2)
  3302   000600  20F4               	addwfc	prodh,w,c
  3303   000602  6EDA               	movwf	fsr2h,c
  3304   000604  D802               	call	i2u57_48
  3305   000606  EF0F  F003         	goto	i2u57_49
  3306   00060A                     i2u57_48:
  3307   00060A  0005               	push	
  3308   00060C  6EFA               	movwf	pclath,c
  3309   00060E  50DE               	movf	postinc2,w,c
  3310   000610  6EFD               	movwf	tosl,c
  3311   000612  50DE               	movf	postinc2,w,c
  3312   000614  6EFE               	movwf	tosh,c
  3313   000616  50F8               	movf	tblptru,w,c
  3314   000618  6EFF               	movwf	tosu,c
  3315   00061A  50FA               	movf	pclath,w,c
  3316   00061C  0012               	return		;indir
  3317   00061E                     i2u57_49:
  3318   00061E                     i2l1685:
  3319                           
  3320                           ;SystemCallbacks.c: 38:     }
  3321   00061E  2A06               	incf	Callbacks_Manager@callbacks^0,f,c
  3322   000620  0E04               	movlw	4
  3323   000622  6406               	cpfsgt	Callbacks_Manager@callbacks^0,c
  3324   000624  EF16  F003         	goto	i2u58_41
  3325   000628  EF18  F003         	goto	i2u58_40
  3326   00062C                     i2u58_41:
  3327   00062C  EFB7  F002         	goto	i2l1675
  3328   000630                     i2u58_40:
  3329   000630  0012               	return		;funcret
  3330   000632                     __end_of_Callbacks_Manager:
  3331                           	callstack 0
  3332                           
  3333 ;; *************** function _Check_Moisture_cb *****************
  3334 ;; Defined at:
  3335 ;;		line 17 in file "System_FSM.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  1    wreg      void 
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3349 ;;      Params:         0       0       0       0
  3350 ;;      Locals:         0       0       0       0
  3351 ;;      Temps:          0       0       0       0
  3352 ;;      Totals:         0       0       0       0
  3353 ;;Total ram usage:        0 bytes
  3354 ;; Hardware stack levels used: 1
  3355 ;; Hardware stack levels required when called: 1
  3356 ;; This function calls:
  3357 ;;		i2_get_current_state
  3358 ;;		i2_set_state
  3359 ;; This function is called by:
  3360 ;;		_Callbacks_Manager
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text36
  3365   000A1A                     __ptext36:
  3366                           	callstack 0
  3367   000A1A                     _Check_Moisture_cb:
  3368                           	callstack 23
  3369   000A1A                     
  3370                           ;System_FSM.c: 22:     if(get_current_state() != WATER_PLANTS)
  3371   000A1A  ECB8  F005         	call	i2_get_current_state	;wreg free
  3372   000A1E  0A02               	xorlw	2
  3373   000A20  B4D8               	btfsc	status,2,c
  3374   000A22  EF15  F005         	goto	i2u43_41
  3375   000A26  EF17  F005         	goto	i2u43_40
  3376   000A2A                     i2u43_41:
  3377   000A2A  EF1A  F005         	goto	i2l204
  3378   000A2E                     i2u43_40:
  3379   000A2E                     
  3380                           ;System_FSM.c: 23:     {;System_FSM.c: 24:       set_state(CHECK_MOISTURE);
  3381   000A2E  0E03               	movlw	3
  3382   000A30  ECA6  F005         	call	i2_set_state
  3383   000A34                     i2l204:
  3384   000A34  0012               	return		;funcret
  3385   000A36                     __end_of_Check_Moisture_cb:
  3386                           	callstack 0
  3387                           
  3388 ;; *************** function _Watering_Done_cb *****************
  3389 ;; Defined at:
  3390 ;;		line 28 in file "System_FSM.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;		None
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;		None
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      void 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2, cstack
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3404 ;;      Params:         0       0       0       0
  3405 ;;      Locals:         0       0       0       0
  3406 ;;      Temps:          0       0       0       0
  3407 ;;      Totals:         0       0       0       0
  3408 ;;Total ram usage:        0 bytes
  3409 ;; Hardware stack levels used: 1
  3410 ;; Hardware stack levels required when called: 1
  3411 ;; This function calls:
  3412 ;;		i2_get_current_state
  3413 ;;		i2_set_state
  3414 ;; This function is called by:
  3415 ;;		_Callbacks_Manager
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text37
  3420   000A36                     __ptext37:
  3421                           	callstack 0
  3422   000A36                     _Watering_Done_cb:
  3423                           	callstack 23
  3424   000A36                     
  3425                           ;System_FSM.c: 31:     if(get_current_state() == WATER_PLANTS)
  3426   000A36  ECB8  F005         	call	i2_get_current_state	;wreg free
  3427   000A3A  0A02               	xorlw	2
  3428   000A3C  A4D8               	btfss	status,2,c
  3429   000A3E  EF23  F005         	goto	i2u44_41
  3430   000A42  EF25  F005         	goto	i2u44_40
  3431   000A46                     i2u44_41:
  3432   000A46  EF28  F005         	goto	i2l208
  3433   000A4A                     i2u44_40:
  3434   000A4A                     
  3435                           ;System_FSM.c: 32:     {;System_FSM.c: 33:         set_state(IDLE_STATE);
  3436   000A4A  0E01               	movlw	1
  3437   000A4C  ECA6  F005         	call	i2_set_state
  3438   000A50                     i2l208:
  3439   000A50  0012               	return		;funcret
  3440   000A52                     __end_of_Watering_Done_cb:
  3441                           	callstack 0
  3442                           
  3443 ;; *************** function i2_set_state *****************
  3444 ;; Defined at:
  3445 ;;		line 9 in file "FSM_states.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  state_to_set    1    wreg     enum E2
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  state_to_set    1    0[COMRAM] enum E2
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3459 ;;      Params:         0       0       0       0
  3460 ;;      Locals:         1       0       0       0
  3461 ;;      Temps:          0       0       0       0
  3462 ;;      Totals:         1       0       0       0
  3463 ;;Total ram usage:        1 bytes
  3464 ;; Hardware stack levels used: 1
  3465 ;; This function calls:
  3466 ;;		Nothing
  3467 ;; This function is called by:
  3468 ;;		_Check_Moisture_cb
  3469 ;;		_Watering_Done_cb
  3470 ;;		_timer_overflow_isr
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text38
  3475   000B4C                     __ptext38:
  3476                           	callstack 0
  3477   000B4C                     i2_set_state:
  3478                           	callstack 25
  3479                           
  3480                           ;incstack = 0
  3481                           ;i2set_state@state_to_set stored from wreg
  3482   000B4C  6E01               	movwf	i2set_state@state_to_set^0,c
  3483   000B4E                     
  3484                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  3485   000B4E  C001  F047         	movff	i2set_state@state_to_set,_FSM_state
  3486   000B52  0012               	return		;funcret
  3487   000B54                     __end_ofi2_set_state:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function i2_get_current_state *****************
  3491 ;; Defined at:
  3492 ;;		line 5 in file "FSM_states.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      enum E2
  3499 ;; Registers used:
  3500 ;;		wreg, status,2
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3506 ;;      Params:         0       0       0       0
  3507 ;;      Locals:         0       0       0       0
  3508 ;;      Temps:          0       0       0       0
  3509 ;;      Totals:         0       0       0       0
  3510 ;;Total ram usage:        0 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_Check_Moisture_cb
  3516 ;;		_Watering_Done_cb
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text39
  3521   000B70                     __ptext39:
  3522                           	callstack 0
  3523   000B70                     i2_get_current_state:
  3524                           	callstack 23
  3525   000B70                     
  3526                           ;FSM_states.c: 7:     return FSM_state;
  3527   000B70  5047               	movf	_FSM_state^0,w,c
  3528   000B72  0012               	return		;funcret
  3529   000B74                     __end_ofi2_get_current_state:
  3530                           	callstack 0
  3531                           
  3532                           	psect	text40
  3533   000000                     __ptext40:
  3534                           	callstack 0
  3535   000000                     
  3536                           	psect	rparam
  3537   000000                     
  3538                           	psect	temp
  3539   000048                     btemp:
  3540                           	callstack 0
  3541   000048                     	ds	1
  3542   000000                     int$flags	set	btemp
  3543   000000                     wtemp8	set	btemp+1
  3544   000000                     ttemp5	set	btemp+1
  3545   000000                     ttemp6	set	btemp+4
  3546   000000                     ttemp7	set	btemp+8
  3547                           
  3548                           	psect	idloc
  3549                           
  3550                           ;Config register IDLOC0 @ 0x200000
  3551                           ;	unspecified, using default values
  3552   200000                     	org	2097152
  3553   200000  FF                 	db	255
  3554                           
  3555                           ;Config register IDLOC1 @ 0x200001
  3556                           ;	unspecified, using default values
  3557   200001                     	org	2097153
  3558   200001  FF                 	db	255
  3559                           
  3560                           ;Config register IDLOC2 @ 0x200002
  3561                           ;	unspecified, using default values
  3562   200002                     	org	2097154
  3563   200002  FF                 	db	255
  3564                           
  3565                           ;Config register IDLOC3 @ 0x200003
  3566                           ;	unspecified, using default values
  3567   200003                     	org	2097155
  3568   200003  FF                 	db	255
  3569                           
  3570                           ;Config register IDLOC4 @ 0x200004
  3571                           ;	unspecified, using default values
  3572   200004                     	org	2097156
  3573   200004  FF                 	db	255
  3574                           
  3575                           ;Config register IDLOC5 @ 0x200005
  3576                           ;	unspecified, using default values
  3577   200005                     	org	2097157
  3578   200005  FF                 	db	255
  3579                           
  3580                           ;Config register IDLOC6 @ 0x200006
  3581                           ;	unspecified, using default values
  3582   200006                     	org	2097158
  3583   200006  FF                 	db	255
  3584                           
  3585                           ;Config register IDLOC7 @ 0x200007
  3586                           ;	unspecified, using default values
  3587   200007                     	org	2097159
  3588   200007  FF                 	db	255
  3589                           
  3590                           	psect	config
  3591                           
  3592                           ; Padding undefined space
  3593   300000                     	org	3145728
  3594   300000  FF                 	db	255
  3595                           
  3596                           ;Config register CONFIG1H @ 0x300001
  3597                           ;	Oscillator Selection bits
  3598                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  3599                           ;	Fail-Safe Clock Monitor Enable bit
  3600                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3601                           ;	Internal External Oscillator Switchover bit
  3602                           ;	IESO = ON, Internal External Switchover mode enabled
  3603   300001                     	org	3145729
  3604   300001  C8                 	db	200
  3605                           
  3606                           ;Config register CONFIG2L @ 0x300002
  3607                           ;	Power-up Timer Enable bit
  3608                           ;	PWRTEN = OFF, PWRT disabled
  3609                           ;	Brown-out Reset Enable bits
  3610                           ;	BOREN = OFF, Brown-out Reset disabled
  3611                           ;	Brown Out Reset Voltage bits
  3612                           ;	BORV = 0x3, unprogrammed default
  3613   300002                     	org	3145730
  3614   300002  0D                 	db	13
  3615                           
  3616                           ;Config register CONFIG2H @ 0x300003
  3617                           ;	Watchdog Timer Enable bit
  3618                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3619                           ;	Watchdog Timer Postscale Select bits
  3620                           ;	WDPS = 32768, 1:32768
  3621                           ;	Watchdog Timer Window Enable bit
  3622                           ;	WINEN = OFF, WDT window disabled
  3623   300003                     	org	3145731
  3624   300003  3E                 	db	62
  3625                           
  3626                           ;Config register CONFIG3L @ 0x300004
  3627                           ;	PWM output pins Reset state control
  3628                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  3629                           ;	Low-Side Transistors Polarity
  3630                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  3631                           ;	High-Side Transistors Polarity
  3632                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  3633                           ;	Timer1 Oscillator MUX
  3634                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  3635   300004                     	org	3145732
  3636   300004  3C                 	db	60
  3637                           
  3638                           ;Config register CONFIG3H @ 0x300005
  3639                           ;	FLTA MUX bit
  3640                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  3641                           ;	SSP I/O MUX bit
  3642                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  3643                           ;	PWM4 MUX bit
  3644                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  3645                           ;	TMR0/T5CKI External clock MUX bit
  3646                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  3647                           ;	MCLR Pin Enable bit
  3648                           ;	MCLRE = ON, Enabled
  3649   300005                     	org	3145733
  3650   300005  9D                 	db	157
  3651                           
  3652                           ;Config register CONFIG4L @ 0x300006
  3653                           ;	Stack Full/Underflow Reset Enable bit
  3654                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3655                           ;	Low-Voltage ICSP Enable bit
  3656                           ;	LVP = OFF, Low-voltage ICSP disabled
  3657                           ;	Background Debugger Enable bit
  3658                           ;	DEBUG = 0x1, unprogrammed default
  3659   300006                     	org	3145734
  3660   300006  81                 	db	129
  3661                           
  3662                           ; Padding undefined space
  3663   300007                     	org	3145735
  3664   300007  FF                 	db	255
  3665                           
  3666                           ;Config register CONFIG5L @ 0x300008
  3667                           ;	Code Protection bit
  3668                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  3669                           ;	Code Protection bit
  3670                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  3671   300008                     	org	3145736
  3672   300008  0F                 	db	15
  3673                           
  3674                           ;Config register CONFIG5H @ 0x300009
  3675                           ;	Boot Block Code Protection bit
  3676                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3677                           ;	Data EEPROM Code Protection bit
  3678                           ;	CPD = OFF, Data EEPROM not code-protected
  3679   300009                     	org	3145737
  3680   300009  C0                 	db	192
  3681                           
  3682                           ;Config register CONFIG6L @ 0x30000A
  3683                           ;	Write Protection bit
  3684                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  3685                           ;	Write Protection bit
  3686                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  3687   30000A                     	org	3145738
  3688   30000A  0F                 	db	15
  3689                           
  3690                           ;Config register CONFIG6H @ 0x30000B
  3691                           ;	Configuration Register Write Protection bit
  3692                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3693                           ;	Boot Block Write Protection bit
  3694                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3695                           ;	Data EEPROM Write Protection bit
  3696                           ;	WRTD = OFF, Data EEPROM not write-protected
  3697   30000B                     	org	3145739
  3698   30000B  E0                 	db	224
  3699                           
  3700                           ;Config register CONFIG7L @ 0x30000C
  3701                           ;	Table Read Protection bit
  3702                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  3703                           ;	Table Read Protection bit
  3704                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  3705   30000C                     	org	3145740
  3706   30000C  0F                 	db	15
  3707                           
  3708                           ;Config register CONFIG7H @ 0x30000D
  3709                           ;	Boot Block Table Read Protection bit
  3710                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3711   30000D                     	org	3145741
  3712   30000D  40                 	db	64
  3713                           tosu	equ	0xFFF
  3714                           tosh	equ	0xFFE
  3715                           tosl	equ	0xFFD
  3716                           stkptr	equ	0xFFC
  3717                           pclatu	equ	0xFFB
  3718                           pclath	equ	0xFFA
  3719                           pcl	equ	0xFF9
  3720                           tblptru	equ	0xFF8
  3721                           tblptrh	equ	0xFF7
  3722                           tblptrl	equ	0xFF6
  3723                           tablat	equ	0xFF5
  3724                           prodh	equ	0xFF4
  3725                           prodl	equ	0xFF3
  3726                           indf0	equ	0xFEF
  3727                           postinc0	equ	0xFEE
  3728                           postdec0	equ	0xFED
  3729                           preinc0	equ	0xFEC
  3730                           plusw0	equ	0xFEB
  3731                           fsr0h	equ	0xFEA
  3732                           fsr0l	equ	0xFE9
  3733                           wreg	equ	0xFE8
  3734                           indf1	equ	0xFE7
  3735                           postinc1	equ	0xFE6
  3736                           postdec1	equ	0xFE5
  3737                           preinc1	equ	0xFE4
  3738                           plusw1	equ	0xFE3
  3739                           fsr1h	equ	0xFE2
  3740                           fsr1l	equ	0xFE1
  3741                           bsr	equ	0xFE0
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           preinc2	equ	0xFDC
  3746                           plusw2	equ	0xFDB
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8

Data Sizes:
    Strings     90
    Constant    0
    Data        16
    BSS         50
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      71
    BANK0           160      0      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Register_Callback@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    Reset_Counter@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Reset_Counter@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    WateringDoneCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2893.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    MoistureCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    S812$callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2890.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[19]), STR_4(CODE[20]), STR_3(CODE[15]), STR_2(CODE[19]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_LCD_Write_String
    _SMS_Set_State->_set_state
    _SMS_Read_Moisture_Value->_ADC_Read
    _Register_Callback->_Reset_Counter
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager
    _Watering_Done_cb->i2_set_state
    _Check_Moisture_cb->i2_set_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2280
                          _FSM_begin
                        _Timer0_init
                        _Timer0_stop
                          _UART_init
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                           20    20      0    2265
                                             24 COMRAM    20    20      0
                     _Callbacks_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                  _Register_Callback
            _SMS_Read_Moisture_Value
                      _SMS_Set_State
                           _SMS_init
                       _Timer0_start
                          _UART_send
                     _WaterPump_Init
                      _WaterPump_OFF
                       _WaterPump_ON
       _checking_moisture_status_led
                  _get_current_state
                    _idle_status_led
                          _init_leds
                          _set_state
                _watering_status_led
 ---------------------------------------------------------------------------------
 (2) _watering_status_led                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_leds                                            2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _idle_status_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checking_moisture_status_led                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_ON                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_OFF                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART_send                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_Set_State                                        2     0      2     157
                                             15 COMRAM     2     0      2
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_Read_Moisture_Value                              4     2      2      23
                                             16 COMRAM     4     2      2
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             14 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Register_Callback                                    4     2      2     338
                                             16 COMRAM     4     2      2
                      _Reset_Counter
 ---------------------------------------------------------------------------------
 (3) _Reset_Counter                                        2     0      2      98
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2     590
                                             18 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1     725
                                             16 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                             16 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              1     1      0      75
                                             15 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_DATA                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Callbacks_Init                                       1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   8     8      0     244
                                              6 COMRAM     8     8      0
                  _Callbacks_Manager
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     222
                                              1 COMRAM     5     5      0
                  _Check_Moisture_cb *
                   _Watering_Done_cb *
 ---------------------------------------------------------------------------------
 (7) _Watering_Done_cb                                     0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (7) _Check_Moisture_cb                                    0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) i2_set_state                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_get_current_state                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _Callbacks_Init
     _LCD_Clear
       _LCD_CMD
         _LCD_DATA
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _LCD_Set_Cursor
       _LCD_CMD
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_DATA
     _Register_Callback
       _Reset_Counter
     _SMS_Read_Moisture_Value
       _ADC_Read
         _ADC_in_progress
         _ADC_start
     _SMS_Set_State
       _set_state
     _SMS_init
       _ADC_init
         _ADC_stop
     _Timer0_start
     _UART_send
     _WaterPump_Init
     _WaterPump_OFF
     _WaterPump_ON
     _checking_moisture_status_led
     _get_current_state
     _idle_status_led
     _init_leds
     _set_state
     _watering_status_led
   _Timer0_init
   _Timer0_stop
   _UART_init
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager
     _Check_Moisture_cb *
       i2_get_current_state
       i2_set_state
     _Watering_Done_cb *
       i2_get_current_state
       i2_set_state
   i2_set_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      47       1       75.5%
BITBIGSFRllll       21      0       0      21        0.0%
BITBIGSFRhhhl       19      0       0      10        0.0%
BITBIGSFRhhhh        D      0       0       9        0.0%
BITBIGSFRlhllh       B      0       0      16        0.0%
BITBIGSFRhhlll       B      0       0      13        0.0%
BITBIGSFRlllhl       9      0       0      20        0.0%
BITBIGSFRlhlhh       7      0       0      15        0.0%
BITBIGSFRlhh         7      0       0      14        0.0%
BITBIGSFRlllhh       6      0       0      19        0.0%
BITBIGSFRlhlll       4      0       0      17        0.0%
BITBIGSFRllh         3      0       0      18        0.0%
BITBIGSFRhhllh       2      0       0      12        0.0%
BITBIGSFRhhlh        1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6F      22        0.0%
DATA                 0      0      6F      24        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Mar 29 13:01:07 2023

                                  l22 0B6E                                    l33 09EC  
                                  l25 0A18                                    l34 09FC  
                                  l19 0B5E                                    l51 0B62  
                                  l28 0AEC                                    l45 0A96  
                                  l48 0B6A                                    l81 07FA  
                                  l66 0722                                    l83 0810  
                                  l92 0754                                    l85 0826  
                                  l69 0B0A                                    l78 0A80  
                                  l94 0784                                    l87 083C  
                                  l89 083E                                    l97 0928  
                                  u10 0AEA                                    u11 0AE4  
                                  u20 07F4                                    u21 07F0  
                                  u30 080A                                    u31 0806  
                                  u40 0820                                    u16 0AEC  
                                  u41 081C                                    u50 0836  
                                  u51 0832                   __end_ofi2_set_state 0B54  
                         _pump_status 0045                                   l103 0894  
                                 l140 0B58                                   l150 07E2  
                                 l143 0AC2                                   l311 0B32  
                                 l314 0B3A                                   l251 0AD8  
                                 l155 0B66                                   l317 0B42  
                                 l229 0568                                   l238 08E0  
                                 l158 0B4A                                   l350 0A9A  
                                 _ADC 0041                                   l256 06AA  
                                 l272 09D2                                   l353 0AAC  
                                 l281 0B28                                   l275 0B1E  
                                 l347 0A68                                   l278 0B14  
                                 u200 0AA8                                   u201 0AA4  
                                 u400 079C                                   u401 0798  
                                 u410 07BC                                   u411 07B8  
                                 u420 07D2                                   u421 07CE  
                                 u501 0376                                   u511 0388  
                                 u360 09EC                                   u520 0444  
                                 u361 09E8                                   u521 0440  
                                 u450 08E0                                   u370 0736  
                                 u530 04A6                                   u451 08DC  
                                 u371 0732                                   u531 04A2  
                                 u380 0766                                   u460 0642  
                                 u540 050A                                   u381 0762  
                                 u461 063E                                   u541 0506  
                                 u390 0894                                   u470 0660  
                                 u391 0890                                   u471 065C  
                                 u480 067A                                   u481 0676  
                                 u707 06C0                                   u491 0694  
                                 u717 06CC                                   u637 03EA  
                                 u727 06DE                                   u647 04DC  
                                 u737 06EE                                   u657 09BE  
                                 u747 0A78                                   u667 08FE  
                                 u677 0908                                   u687 0918  
                                 u697 0922                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                     __end_of_LCD_CMD 0A82                        _LCD_Set_Cursor 0724  
                                l1101 08F2                                  l1111 090E  
                                l1103 08FA                                  l1113 0914  
                                l1105 08FC                                  l1041 0B5A  
                                l1121 0B46                                  l1051 07F4  
                                l1115 0916                                  l1107 0904  
                                l1043 0B6C                                  l1131 0B68  
                                l1061 0828                                  l1053 07FC  
                                l1141 06BA                                  l1133 06AC  
                                l1117 091E                                  l1109 0906  
                                l1045 0ADA                                  l1221 0B2A  
                                l1063 0836                                  l1055 080A  
                                l1151 0AFE                                  l1143 06CA  
                                l1135 06B0                                  l1119 0920  
                                l1071 0A08                                  l1223 0B2E  
                                l1057 0812                                  l1049 07E6  
                                l1145 06D2                                  l1137 06B2  
                                l1081 0A16                                  l1073 0A0A  
                                l1065 09FE                                  l1241 09B4  
                                l1059 0820                                  l1091 0A74  
                                l1147 06E6                                  l1139 06B4  
                                l1075 0A0C                                  l1067 0A02  
                                l1251 0A9A                                  l1243 09CA  
                                l1093 0A76                                  l1149 06EC  
                                l1501 0748                                  l1077 0A10  
                                l1069 0A06                                  l1253 0AA8  
                                l1261 0B34                                  l1245 09CC  
                                l1095 0A7E                                  l1087 0A6C  
                                l1503 074E                                  l1511 0840  
                                l1079 0A12                                  l1175 0B54  
                                l1255 0B3C                                  l1263 0B36  
                                l1247 09CE                                  l1239 09A4  
                                l1271 0A8E                                  l1089 0A6E  
                                l1505 0766                                  l1097 08E4  
                                l1513 084C                                  l1521 0ABA  
                                l1257 0B3E                                  l1249 09D0  
                                l1265 0B0C                                  l1601 03D4  
                                l1273 0B60                                  l1281 0A62  
                                l1507 0778                                  l1099 08F0  
                                l1515 0868                                  l1531 07BC  
                                l1267 0B20                                  l1195 0B64  
                                l1259 0B16                                  l1611 040A  
                                l1603 03E0                                  l1283 0A64  
                                l1275 0A52                                  l1509 077E  
                                l1517 086C                                  l1533 07D2  
                                l1525 0786                                  l1621 0430  
                                l1613 040E                                  l1605 03F6  
                                l1269 0A82                                  l1285 0A66  
                                l1277 0A58                                  l1701 0984  
                                l1551 089A                                  l1519 0AAE  
                                l1535 07DC                                  l1527 079C  
                                l1631 047E                                  l1623 0448  
                                l1615 0418                                  l1607 03FA  
                                l1279 0A60                                  l1711 0992  
                                l1703 0988                                  l1553 08CA  
                                l1545 0896                                  l1561 0642  
                                l1529 07A6                                  l1641 04B4  
                                l1633 048E                                  l1625 046C  
                                l1617 0424                                  l1609 0404  
                                l1713 0998                                  l1705 098A  
                                l1555 08CE                                  l1563 0660  
                                l1651 04E8                                  l1643 04BE  
                                l1635 0492                                  l1627 0470  
                                l1619 042C                                  l1707 098E  
                                l1557 08D0                                  l1565 067A  
                                l1485 09D4                                  l1653 04F4  
                                l1645 04CA                                  l1637 04AA  
                                l1629 0474                                  l1581 036C  
                                l1573 035C                                  l1709 0990  
                                l1567 069C                                  l1559 0632  
                                l1487 09D8                                  l1655 050A  
                                l1647 04CE                                  l1639 04B0  
                                l1591 03AC                                  l1583 037E  
                                l1575 0360                                  l1663 052C  
                                l1497 0726                                  l1489 0AC4  
                                l1569 06A8                                  l1745 0542  
                                l1657 0512                                  l1649 04D2  
                                l1593 03B0                                  l1585 0390  
                                l1577 0364                                  l1499 0736  
                                l1659 0522                                  l1595 03B4  
                                l1587 039C                                  l1579 0368  
                                l1691 0978                   LCD_Write_String@str 0013  
                                l1597 03BE                                  l1589 03A8  
                                l1693 097C                                  l1599 03CA  
                                l1695 097E                                  l1697 0980  
                                l1689 0970                                  l1699 0982  
                                STR_1 033B                                  STR_2 0315  
                                STR_3 034C                                  STR_4 0301  
                                STR_5 0328                                  _LATC 000F8B  
                                _LATD 000F8C                 __end_of_Reset_Counter 0ADA  
                   ?_LCD_Write_String 0013                                  _main 0970  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0048                      __end_of_ADC_Read 09FE  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00A8                    ??_LCD_Write_String 0015  
                    __end_of_ADC_init 0A1A                      __end_of_ADC_stop 0B70  
                        ___param_bank 000000                     FSM_begin@moisture 002B  
          Callbacks_Manager@callbacks 0006                      __end_of_LCD_DATA 0840  
                    __end_of_LCD_Init 0724              ?_SMS_Read_Moisture_Value 0011  
                               ?_main 0001                         _SMS_Set_State 0786  
                               i2l204 0A34                                 i2l302 0084  
                               i2l208 0A50                                 i2l155 0B72  
                               i2l158 0B52                                 i2l248 0630  
                               _RCREG 000FAE                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TXREG 000FAD  
              __end_of_LCD_Set_Cursor 0786                                 pclath 000FFA  
                               pclatu 000FFB                                 tablat 000FF5  
                    __end_of_SMS_init 0B5A                                 plusw1 000FE3  
                               plusw2 000FDB                                 ttemp5 0049  
                               ttemp6 004C                                 ttemp7 0050  
                               status 000FD8                                 wtemp8 0049  
                   __end_of_ADC_start 0B60                        _LCD_Write_Char 08E2  
                     __initialization 092A                          __end_of_main 09A4  
                         i2_set_state 0B4C                   _watering_status_led 0B0C  
                      ?_SMS_Set_State 0010                                ??_main 002D  
             i2set_state@state_to_set 0001                     _Check_Moisture_cb 0A1A  
                   __end_of_LCD_Clear 0B0C                         __activetblptr 000002  
                           ??_LCD_CMD 0010                    ?_Check_Moisture_cb 0001  
                     ?_LCD_Set_Cursor 0011                  ?_watering_status_led 0001  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                 ??_Check_Moisture_cb 0002                                i2l1541 0A36  
                              i2l1543 0A4A                                i2l1537 0A1A  
                              i2l1721 0042                                i2l1491 0B70  
                              i2l1539 0A2E                                i2l1731 006A  
                              i2l1723 0052                                i2l1715 002A  
                              i2l1733 0078                                i2l1725 0056  
                              i2l1717 002E                                i2l1495 0B4E  
                              i2l1735 007E                                i2l1727 0064  
                              i2l1719 003E                                i2l1681 05DC  
                              i2l1737 0080                                i2l1729 0068  
                              i2l1683 05F4                                i2l1675 056E  
                              i2l1739 0082                                i2l1685 061E  
                              i2l1677 0584                                i2l1669 056A  
                              i2l1687 0620                                i2l1679 05BA  
                   __end_of_FSM_begin 056A                                _SPBRGH 000FB0  
              __end_of_LCD_Write_Char 092A                         ??_Timer0_init 000F  
     __end_of_SMS_Read_Moisture_Value 0AC4                         ??_Timer0_stop 000F  
                   __end_of_UART_init 0A6A                     __end_of_UART_send 0AAE  
           __end_of_Check_Moisture_cb 0A36                                clear_0 0950  
                              clear_1 095C                                isa$std 000001  
                   _Callbacks_Manager 056A                  _registered_callbacks 0060  
                        __pdataCOMRAM 002D                             ?_ADC_Read 000F  
                  ?_Callbacks_Manager 0001                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                             ?_ADC_init 0001  
                           ?_ADC_stop 0001                 ??_watering_status_led 000F  
      FSM_begin@WateringDoneCB_Config 0023                       LCD_Set_Cursor@c 0011  
                     LCD_Set_Cursor@r 0012                   ??_Callbacks_Manager 0002  
                           ?_LCD_DATA 0001                            __accesstop 0060  
             __end_of__initialization 0962                             ?_LCD_Init 0001  
                    _Watering_Done_cb 0A36                         ___rparam_used 000001  
                     ?_LCD_Write_Char 0001                        __pcstackCOMRAM 0001  
               __end_of_WaterPump_OFF 0B44                       ??_SMS_Set_State 0012  
           __end_of_Callbacks_Manager 0632                   __end_of_Timer0_init 0A98  
                 __end_of_Timer0_stop 0B64     _tmr0Counter@SystemInterrupts$F993 003D  
          __end_of_timer_overflow_isr 00A8                             ?_SMS_init 0001  
                          ??_ADC_Read 0011                            ??_ADC_init 000F  
                          ??_ADC_stop 000F  __end_of_checking_moisture_status_led 0B2A  
        _checking_moisture_status_led 0B20                            __pbssBANK0 0060  
                          ??_LCD_DATA 000F            FSM_begin@MoistureCB_Config 001B  
                          ??_LCD_Init 0011                            __pnvCOMRAM 0047  
                       ?_Timer0_start 0001                            ??_SMS_init 000F  
                             _LCD_CMD 0A6A                     ??_ADC_in_progress 000F  
                             i2u43_40 0A2E                               i2u43_41 0A2A  
                             i2u44_40 0A4A                               i2u60_40 0052  
                             i2u44_41 0A46                               i2u60_41 004E  
                             i2u61_40 0064                               i2u61_41 0060  
                             i2u62_40 0078                               i2u62_41 0074  
                             i2u55_40 05BA                               i2u55_41 05B6  
                             i2u56_40 05DC                               i2u56_41 05D8  
                             i2u58_40 0630                               i2u57_48 060A  
                             i2u58_41 062C                               i2u57_49 061E  
                             i2u59_40 003E                               i2u59_41 003A  
       ?_checking_moisture_status_led 0001                             _ADCHSbits 000F99  
                             __Hparam 0000                               __Lparam 0000  
                      ??_Timer0_start 000F                           _Timer0_init 0A82  
                         _Timer0_stop 0B60                          ?i2_set_state 0001  
                           _ADC_start 0B5A                         ?_WaterPump_ON 0001  
                        __psmallconst 0300                               __pcinit 092A  
                             __ramtop 0300                      ??_LCD_Set_Cursor 0012  
                             __ptext0 0970                               __ptext1 0A52  
                             __ptext2 0B60                               __ptext3 0A82  
                             __ptext4 035C                               __ptext5 0B0C  
                             __ptext6 09A4                               __ptext7 0B16  
                             __ptext8 0B64                               __ptext9 0B20  
                           _T0CONbits 000FD5                     __end_of_init_leds 09D4  
             Register_Callback@config 0011                             _LCD_Clear 0AFE  
                             _rx_data 0043                               _rx_flag 0044  
                end_of_initialization 0962                     ??_idle_status_led 000F  
                       __Lmediumconst 0000                     __end_of_set_state 0B4C  
                           _FSM_begin 035C                        ??_WaterPump_ON 000F  
                           _FSM_state 0047                   fp__Watering_Done_cb 0000  
                           _RCSTAbits 000FAB                            ?_ADC_start 0001  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                             _PORTBbits 000F81  
                           _UART_init 0A52                             _UART_send 0A98  
            __end_of_Watering_Done_cb 0A52                            LCD_CMD@CMD 0010  
                      _WaterPump_Init 0B2A                             _TRISBbits 000F93  
                           _TRISCbits 000F94                            ?_LCD_Clear 0001  
                   LCD_Write_String@i 0017                      ??_LCD_Write_Char 0010  
              Callbacks_Init@callback 000F                         _Reset_Counter 0AC4  
                           _TXSTAbits 000FAC                            ?_FSM_begin 0001  
                      _Callbacks_Init 0896                      _LCD_Write_String 0840  
                         _BAUDCONbits 000FAA                         __pidataCOMRAM 0AEE  
              __end_of_WaterPump_Init 0B34                            ?_UART_init 0001  
                          ?_UART_send 0001           __end_of_watering_status_led 0B16  
                 start_initialization 092A               _SMS_Read_Moisture_Value 0AAE  
                 i2_get_current_state 0B70                  __end_of_Timer0_start 0B6C  
                fp__Check_Moisture_cb 0000                    _timer_overflow_isr 0008  
                      ?_Reset_Counter 000F                __end_of_Callbacks_Init 08E2  
                 ?_timer_overflow_isr 0001                  ?i2_get_current_state 0001  
                         ??_ADC_start 000F                       _ADC_in_progress 0ADA  
                     ?_WaterPump_Init 0001                 __end_of_SMS_Set_State 07E4  
                            ?_LCD_CMD 0001                           __pbssCOMRAM 003D  
                ??_timer_overflow_isr 0007                           ??_LCD_Clear 0011  
                __end_of_WaterPump_ON 0B3C                     _Register_Callback 0632  
                     ?_Callbacks_Init 0001                    ?_Register_Callback 0011  
                         ??_FSM_begin 0019                 ??i2_get_current_state 0001  
                        ?_Timer0_init 0001                          ?_Timer0_stop 0001  
                           __pintcode 0008                   ??_Register_Callback 0013  
                         ??_UART_init 000F                           ??_UART_send 000F  
                         __smallconst 0300                       _idle_status_led 0B16  
           ??_SMS_Read_Moisture_Value 0013                              _ADC_Read 09D4  
                            _ADC_init 09FE                              _ADC_stop 0B6C  
     SMS_Read_Moisture_Value@moisture 0013             __end_of_Register_Callback 06AC  
                           _init_leds 09A4                       ??_Reset_Counter 0011  
                            _LCD_DATA 07E4                              _LCD_Init 06AC  
             __end_of_ADC_in_progress 0AEE                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             _set_state 0B44  
                       _WaterPump_OFF 0B3C                            _ADCON0bits 000FC2  
                          _ADCON1bits 000FC1                            _ADCON2bits 000FC0  
                            _SMS_init 0B54                     ?_Watering_Done_cb 0001  
                 Reset_Counter@config 000F                    ??_Watering_Done_cb 0002  
                          ?_init_leds 0001                           _INTCON2bits 000FF1  
                           copy_data0 093E              __end_of_LCD_Write_String 0896  
                            __Hrparam 0000                              __Lrparam 0000  
                 LCD_Write_Char@High4 0011                            ?_set_state 0001  
                        _Timer0_start 0B68                        ?_WaterPump_OFF 0001  
             __end_of_idle_status_led 0B20                            _ANSEL0bits 000FB8  
                       UART_send@data 000F                              __ptext10 0B34  
                            __ptext11 0B3C                              __ptext20 0AAE  
                            __ptext12 0B2A                              __ptext21 09D4  
                            __ptext13 0A98                              __ptext30 0AFE  
                            __ptext22 0B5A                              __ptext14 0B68  
                            __ptext31 0A6A                              __ptext23 0ADA  
                            __ptext15 0B54                              __ptext40 0000  
                            __ptext32 07E4                              __ptext24 0632  
                            __ptext16 09FE                              __ptext33 0896  
                            __ptext25 0AC4                              __ptext17 0B6C  
                            __ptext26 0840                              __ptext18 0786  
                            __ptext35 056A                              __ptext27 08E2  
                            __ptext19 0B44                              __ptext36 0A1A  
                            __ptext28 0724                              __ptext37 0A36  
                            __ptext29 06AC                              __ptext38 0B4C  
                            __ptext39 0B70                        _callback_count 0046  
                    ?_ADC_in_progress 0001                      ??_WaterPump_Init 000F  
                            isa$xinst 000000                     _get_current_state 0B64  
                        _WaterPump_ON 0B34                              int$flags 0048  
                         _tmr0Counter 003F                   LCD_Set_Cursor@High4 0014  
                  ?_get_current_state 0001                   ??_get_current_state 000F  
                          _INTCONbits 000FF2                    LCD_Write_Char@Data 0012  
                  LCD_Write_Char@Low4 0010                           ??_init_leds 000F  
                    ??_Callbacks_Init 000F                 SMS_Set_State@moisture 0010  
                            intlevel2 0000             __end_of_get_current_state 0B68  
                          _OSCCONbits 000FD3                       ??_WaterPump_OFF 000F  
                       ??i2_set_state 0001                           ??_set_state 000F  
      ??_checking_moisture_status_led 000F                    LCD_Set_Cursor@Low4 0013  
                  LCD_Set_Cursor@Temp 0015                      ?_idle_status_led 0001  
                        LCD_DATA@Data 000F                 set_state@state_to_set 000F  
                      FSM_begin@F2890 0035           __end_ofi2_get_current_state 0B74  
                      FSM_begin@F2893 002D  
