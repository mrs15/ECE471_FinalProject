

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Feb 27 14:21:52 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4331 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _ADRESL	set	4035
    63   000000                     _ADRESH	set	4036
    64                           
    65                           	psect	nvCOMRAM
    66   00000C                     __pnvCOMRAM:
    67                           	callstack 0
    68   00000C                     _FSM_state:
    69                           	callstack 0
    70   00000C                     	ds	1
    71   000000                     _ADCHSbits	set	3993
    72   000000                     _ADCON1bits	set	4033
    73   000000                     _ADCON0bits	set	4034
    74   000000                     _T0CONbits	set	4053
    75   000000                     _TMR0L	set	4054
    76   000000                     _INTCONbits	set	4082
    77   000000                     _ANSEL0bits	set	4024
    78   000000                     _ADCON2bits	set	4032
    79                           
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83   000168                     __pcinit:
    84                           	callstack 0
    85   000168                     start_initialization:
    86                           	callstack 0
    87   000168                     __initialization:
    88                           	callstack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (4 bytes)
    91   000168  6A0B               	clrf	(__pbssCOMRAM+3)& (0+255),c
    92   00016A  6A0A               	clrf	(__pbssCOMRAM+2)& (0+255),c
    93   00016C  6A09               	clrf	(__pbssCOMRAM+1)& (0+255),c
    94   00016E  6A08               	clrf	__pbssCOMRAM& (0+255),c
    95   000170                     end_of_initialization:
    96                           	callstack 0
    97   000170                     __end_of__initialization:
    98                           	callstack 0
    99   000170  900D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   100   000172  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   101   000174  0E00               	movlw	low (__Lmediumconst shr (0+16))
   102   000176  6EF8               	movwf	tblptru,c
   103   000178  0100               	movlb	0
   104   00017A  EFC9  F000         	goto	_main	;jump to C main() function
   105                           
   106                           	psect	bssCOMRAM
   107   000008                     __pbssCOMRAM:
   108                           	callstack 0
   109   000008                     _ADC:
   110                           	callstack 0
   111   000008                     	ds	2
   112   00000A                     _tmr0Counter:
   113                           	callstack 0
   114   00000A                     	ds	2
   115                           
   116                           	psect	cstackCOMRAM
   117   000001                     __pcstackCOMRAM:
   118                           	callstack 0
   119   000001                     ?_ADC_Read:
   120                           	callstack 0
   121   000001                     set_state@state_to_set:
   122                           	callstack 0
   123                           
   124                           ; 1 bytes @ 0x0
   125   000001                     	ds	2
   126   000003                     SMS_read_and_set_state@current_state:
   127                           	callstack 0
   128                           
   129                           ; 1 bytes @ 0x2
   130   000003                     	ds	1
   131   000004                     SMS_read_and_set_state@moisture:
   132                           	callstack 0
   133                           
   134                           ; 2 bytes @ 0x3
   135   000004                     	ds	2
   136   000006                     ??_FSM_begin:
   137                           
   138                           ; 1 bytes @ 0x5
   139   000006                     	ds	2
   140   000008                     
   141                           ; 1 bytes @ 0x7
   142 ;;
   143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   144 ;;
   145 ;; *************** function _main *****************
   146 ;; Defined at:
   147 ;;		line 14 in file "main.c"
   148 ;; Parameters:    Size  Location     Type
   149 ;;		None
   150 ;; Auto vars:     Size  Location     Type
   151 ;;		None
   152 ;; Return value:  Size  Location     Type
   153 ;;                  1    wreg      void 
   154 ;; Registers used:
   155 ;;		wreg, status,2, status,0, cstack
   156 ;; Tracked objects:
   157 ;;		On entry : 0/0
   158 ;;		On exit  : 0/0
   159 ;;		Unchanged: 0/0
   160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   161 ;;      Params:         0       0       0       0
   162 ;;      Locals:         0       0       0       0
   163 ;;      Temps:          0       0       0       0
   164 ;;      Totals:         0       0       0       0
   165 ;;Total ram usage:        0 bytes
   166 ;; Hardware stack levels required when called: 5
   167 ;; This function calls:
   168 ;;		_FSM_begin
   169 ;;		_set_state
   170 ;; This function is called by:
   171 ;;		Startup code after reset
   172 ;; This function uses a non-reentrant model
   173 ;;
   174                           
   175                           	psect	text0
   176   000192                     __ptext0:
   177                           	callstack 0
   178   000192                     _main:
   179                           	callstack 26
   180   000192                     
   181                           ;main.c: 16:     set_state(INIT_STATE);
   182   000192  0E00               	movlw	0
   183   000194  ECD0  F000         	call	_set_state
   184   000198                     
   185                           ;main.c: 17:     FSM_begin();
   186   000198  EC21  F000         	call	_FSM_begin	;wreg free
   187   00019C  EF1F  F000         	goto	start
   188   0001A0                     __end_of_main:
   189                           	callstack 0
   190                           
   191 ;; *************** function _FSM_begin *****************
   192 ;; Defined at:
   193 ;;		line 5 in file "System_FSM.c"
   194 ;; Parameters:    Size  Location     Type
   195 ;;		None
   196 ;; Auto vars:     Size  Location     Type
   197 ;;		None
   198 ;; Return value:  Size  Location     Type
   199 ;;                  1    wreg      void 
   200 ;; Registers used:
   201 ;;		wreg, status,2, status,0, cstack
   202 ;; Tracked objects:
   203 ;;		On entry : 0/0
   204 ;;		On exit  : 0/0
   205 ;;		Unchanged: 0/0
   206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   207 ;;      Params:         0       0       0       0
   208 ;;      Locals:         0       0       0       0
   209 ;;      Temps:          2       0       0       0
   210 ;;      Totals:         2       0       0       0
   211 ;;Total ram usage:        2 bytes
   212 ;; Hardware stack levels used: 1
   213 ;; Hardware stack levels required when called: 4
   214 ;; This function calls:
   215 ;;		_SMS_init
   216 ;;		_SMS_read_and_set_state
   217 ;;		_get_current_state
   218 ;;		_set_state
   219 ;; This function is called by:
   220 ;;		_main
   221 ;; This function uses a non-reentrant model
   222 ;;
   223                           
   224                           	psect	text1
   225   000042                     __ptext1:
   226                           	callstack 0
   227   000042                     _FSM_begin:
   228                           	callstack 26
   229   000042                     
   230                           ;System_FSM.c: 7:     switch(get_current_state())
   231   000042  EF3F  F000         	goto	l921
   232   000046                     l909:
   233                           
   234                           ;System_FSM.c: 10:         {;System_FSM.c: 12:             SMS_init();
   235   000046  ECD7  F000         	call	_SMS_init	;wreg free
   236   00004A                     
   237                           ;System_FSM.c: 13:             set_state(IDLE_STATE);
   238   00004A  0E01               	movlw	1
   239   00004C  ECD0  F000         	call	_set_state
   240                           
   241                           ;System_FSM.c: 14:             break;
   242   000050  EF5D  F000         	goto	l113
   243   000054                     l913:
   244                           
   245                           ;System_FSM.c: 19:             while(get_current_state() == IDLE_STATE)
   246   000054  ECDA  F000         	call	_get_current_state	;wreg free
   247   000058  06E8               	decf	wreg,f,c
   248   00005A  B4D8               	btfsc	status,2,c
   249   00005C  EF32  F000         	goto	u131
   250   000060  EF34  F000         	goto	u130
   251   000064                     u131:
   252   000064  EF2A  F000         	goto	l913
   253   000068                     u130:
   254   000068  EF5D  F000         	goto	l113
   255   00006C                     l915:
   256                           
   257                           ;System_FSM.c: 38:         {;System_FSM.c: 41:             SMS_read_and_set_state();
   258   00006C  EC5E  F000         	call	_SMS_read_and_set_state	;wreg free
   259                           
   260                           ;System_FSM.c: 42:             break;
   261   000070  EF5D  F000         	goto	l113
   262   000074                     l917:
   263                           
   264                           ;System_FSM.c: 46:         {;System_FSM.c: 47:             set_state(INIT_STATE);
   265   000074  0E00               	movlw	0
   266   000076  ECD0  F000         	call	_set_state
   267                           
   268                           ;System_FSM.c: 48:             break;
   269   00007A  EF5D  F000         	goto	l113
   270   00007E                     l921:
   271   00007E  ECDA  F000         	call	_get_current_state	;wreg free
   272   000082  6E06               	movwf	??_FSM_begin^0,c
   273   000084  6A07               	clrf	(??_FSM_begin+1)^0,c
   274                           
   275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   276                           ; Switch size 1, requested type "simple"
   277                           ; Number of cases is 1, Range of values is 0 to 0
   278                           ; switch strategies available:
   279                           ; Name         Instructions Cycles
   280                           ; simple_byte            4     3 (average)
   281                           ;	Chosen strategy is simple_byte
   282   000086  5007               	movf	(??_FSM_begin+1)^0,w,c
   283   000088  0A00               	xorlw	0	; case 0
   284   00008A  B4D8               	btfsc	status,2,c
   285   00008C  EF4A  F000         	goto	l937
   286   000090  EF3A  F000         	goto	l917
   287   000094                     l937:
   288                           
   289                           ; Switch size 1, requested type "simple"
   290                           ; Number of cases is 4, Range of values is 0 to 3
   291                           ; switch strategies available:
   292                           ; Name         Instructions Cycles
   293                           ; simple_byte           13     7 (average)
   294                           ;	Chosen strategy is simple_byte
   295   000094  5006               	movf	??_FSM_begin^0,w,c
   296   000096  0A00               	xorlw	0	; case 0
   297   000098  B4D8               	btfsc	status,2,c
   298   00009A  EF23  F000         	goto	l909
   299   00009E  0A01               	xorlw	1	; case 1
   300   0000A0  B4D8               	btfsc	status,2,c
   301   0000A2  EF2A  F000         	goto	l913
   302   0000A6  0A03               	xorlw	3	; case 2
   303   0000A8  B4D8               	btfsc	status,2,c
   304   0000AA  EF5D  F000         	goto	l113
   305   0000AE  0A01               	xorlw	1	; case 3
   306   0000B0  B4D8               	btfsc	status,2,c
   307   0000B2  EF36  F000         	goto	l915
   308   0000B6  EF3A  F000         	goto	l917
   309   0000BA                     l113:
   310   0000BA  0012               	return		;funcret
   311   0000BC                     __end_of_FSM_begin:
   312                           	callstack 0
   313                           
   314 ;; *************** function _SMS_read_and_set_state *****************
   315 ;; Defined at:
   316 ;;		line 13 in file "SoilMoistureSensor.c"
   317 ;; Parameters:    Size  Location     Type
   318 ;;		None
   319 ;; Auto vars:     Size  Location     Type
   320 ;;  current_stat    1    2[COMRAM] enum E2817
   321 ;;  moisture        2    3[COMRAM] unsigned short 
   322 ;; Return value:  Size  Location     Type
   323 ;;                  1    wreg      void 
   324 ;; Registers used:
   325 ;;		wreg, status,2, status,0, cstack
   326 ;; Tracked objects:
   327 ;;		On entry : 0/0
   328 ;;		On exit  : 0/0
   329 ;;		Unchanged: 0/0
   330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   331 ;;      Params:         0       0       0       0
   332 ;;      Locals:         3       0       0       0
   333 ;;      Temps:          0       0       0       0
   334 ;;      Totals:         3       0       0       0
   335 ;;Total ram usage:        3 bytes
   336 ;; Hardware stack levels used: 1
   337 ;; Hardware stack levels required when called: 3
   338 ;; This function calls:
   339 ;;		_ADC_Read
   340 ;;		_get_current_state
   341 ;;		_set_state
   342 ;; This function is called by:
   343 ;;		_FSM_begin
   344 ;; This function uses a non-reentrant model
   345 ;;
   346                           
   347                           	psect	text2
   348   0000BC                     __ptext2:
   349                           	callstack 0
   350   0000BC                     _SMS_read_and_set_state:
   351                           	callstack 26
   352   0000BC                     
   353                           ;SoilMoistureSensor.c: 15:     uint16_t moisture = ADC_Read();
   354   0000BC  EC91  F000         	call	_ADC_Read	;wreg free
   355   0000C0  C001  F004         	movff	?_ADC_Read,SMS_read_and_set_state@moisture
   356   0000C4  C002  F005         	movff	?_ADC_Read+1,SMS_read_and_set_state@moisture+1
   357   0000C8                     
   358                           ;SoilMoistureSensor.c: 16:     if(moisture >= (595))
   359   0000C8  0E53               	movlw	83
   360   0000CA  5C04               	subwf	SMS_read_and_set_state@moisture^0,w,c
   361   0000CC  0E02               	movlw	2
   362   0000CE  5805               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   363   0000D0  A0D8               	btfss	status,0,c
   364   0000D2  EF6D  F000         	goto	u101
   365   0000D6  EF6F  F000         	goto	u100
   366   0000DA                     u101:
   367   0000DA  EF74  F000         	goto	l901
   368   0000DE                     u100:
   369   0000DE                     
   370                           ;SoilMoistureSensor.c: 17:     {;SoilMoistureSensor.c: 18:         set_state(WATER_PLANT
      +                          S);
   371   0000DE  0E02               	movlw	2
   372   0000E0  ECD0  F000         	call	_set_state
   373                           
   374                           ;SoilMoistureSensor.c: 19:     }
   375   0000E4  EF90  F000         	goto	l84
   376   0000E8                     l901:
   377   0000E8  5005               	movf	(SMS_read_and_set_state@moisture+1)^0,w,c
   378   0000EA  E109               	bnz	u110
   379   0000EC  0EEF               	movlw	239
   380   0000EE  5C04               	subwf	SMS_read_and_set_state@moisture^0,w,c
   381   0000F0  A0D8               	btfss	status,0,c
   382   0000F2  EF7D  F000         	goto	u111
   383   0000F6  EF7F  F000         	goto	u110
   384   0000FA                     u111:
   385   0000FA  EF90  F000         	goto	l84
   386   0000FE                     u110:
   387   0000FE  0E53               	movlw	83
   388   000100  5C04               	subwf	SMS_read_and_set_state@moisture^0,w,c
   389   000102  0E02               	movlw	2
   390   000104  5805               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   391   000106  B0D8               	btfsc	status,0,c
   392   000108  EF88  F000         	goto	u121
   393   00010C  EF8A  F000         	goto	u120
   394   000110                     u121:
   395   000110  EF90  F000         	goto	l84
   396   000114                     u120:
   397   000114                     
   398                           ;SoilMoistureSensor.c: 21:     {;SoilMoistureSensor.c: 22:         STATES current_state 
      +                          = get_current_state();
   399   000114  ECDA  F000         	call	_get_current_state	;wreg free
   400   000118  6E03               	movwf	SMS_read_and_set_state@current_state^0,c
   401                           
   402                           ;SoilMoistureSensor.c: 23:         set_state(current_state);
   403   00011A  5003               	movf	SMS_read_and_set_state@current_state^0,w,c
   404   00011C  ECD0  F000         	call	_set_state
   405   000120                     l84:
   406   000120  0012               	return		;funcret
   407   000122                     __end_of_SMS_read_and_set_state:
   408                           	callstack 0
   409                           
   410 ;; *************** function _set_state *****************
   411 ;; Defined at:
   412 ;;		line 9 in file "FSM_states.c"
   413 ;; Parameters:    Size  Location     Type
   414 ;;  state_to_set    1    wreg     enum E2813
   415 ;; Auto vars:     Size  Location     Type
   416 ;;  state_to_set    1    0[COMRAM] enum E2813
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   426 ;;      Params:         0       0       0       0
   427 ;;      Locals:         1       0       0       0
   428 ;;      Temps:          0       0       0       0
   429 ;;      Totals:         1       0       0       0
   430 ;;Total ram usage:        1 bytes
   431 ;; Hardware stack levels used: 1
   432 ;; Hardware stack levels required when called: 1
   433 ;; This function calls:
   434 ;;		Nothing
   435 ;; This function is called by:
   436 ;;		_main
   437 ;;		_SMS_read_and_set_state
   438 ;;		_FSM_begin
   439 ;; This function uses a non-reentrant model
   440 ;;
   441                           
   442                           	psect	text3
   443   0001A0                     __ptext3:
   444                           	callstack 0
   445   0001A0                     _set_state:
   446                           	callstack 29
   447                           
   448                           ;incstack = 0
   449                           ;set_state@state_to_set stored from wreg
   450   0001A0  6E01               	movwf	set_state@state_to_set^0,c
   451   0001A2                     
   452                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
   453   0001A2  C001  F00C         	movff	set_state@state_to_set,_FSM_state
   454   0001A6  0012               	return		;funcret
   455   0001A8                     __end_of_set_state:
   456                           	callstack 0
   457                           
   458 ;; *************** function _get_current_state *****************
   459 ;; Defined at:
   460 ;;		line 5 in file "FSM_states.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;		None
   463 ;; Auto vars:     Size  Location     Type
   464 ;;		None
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      enum E2817
   467 ;; Registers used:
   468 ;;		wreg, status,2
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   474 ;;      Params:         0       0       0       0
   475 ;;      Locals:         0       0       0       0
   476 ;;      Temps:          0       0       0       0
   477 ;;      Totals:         0       0       0       0
   478 ;;Total ram usage:        0 bytes
   479 ;; Hardware stack levels used: 1
   480 ;; Hardware stack levels required when called: 1
   481 ;; This function calls:
   482 ;;		Nothing
   483 ;; This function is called by:
   484 ;;		_SMS_read_and_set_state
   485 ;;		_FSM_begin
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           	psect	text4
   490   0001B4                     __ptext4:
   491                           	callstack 0
   492   0001B4                     _get_current_state:
   493                           	callstack 28
   494   0001B4                     
   495                           ;FSM_states.c: 7:     return FSM_state;
   496   0001B4  500C               	movf	_FSM_state^0,w,c
   497   0001B6  0012               	return		;funcret
   498   0001B8                     __end_of_get_current_state:
   499                           	callstack 0
   500                           
   501 ;; *************** function _ADC_Read *****************
   502 ;; Defined at:
   503 ;;		line 60 in file "PIC18F4331_ADC.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  2    0[COMRAM] unsigned short 
   510 ;; Registers used:
   511 ;;		wreg, status,2, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   517 ;;      Params:         2       0       0       0
   518 ;;      Locals:         0       0       0       0
   519 ;;      Temps:          0       0       0       0
   520 ;;      Totals:         2       0       0       0
   521 ;;Total ram usage:        2 bytes
   522 ;; Hardware stack levels used: 1
   523 ;; Hardware stack levels required when called: 2
   524 ;; This function calls:
   525 ;;		_ADC_in_progress
   526 ;;		_ADC_start
   527 ;; This function is called by:
   528 ;;		_SMS_read_and_set_state
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           	psect	text5
   533   000122                     __ptext5:
   534                           	callstack 0
   535   000122                     _ADC_Read:
   536                           	callstack 26
   537   000122                     
   538                           ;PIC18F4331_ADC.c: 62:     ADC_start();
   539   000122  ECD4  F000         	call	_ADC_start	;wreg free
   540   000126                     l893:
   541   000126  ECBF  F000         	call	_ADC_in_progress	;wreg free
   542   00012A  0900               	iorlw	0
   543   00012C  A4D8               	btfss	status,2,c
   544   00012E  EF9B  F000         	goto	u91
   545   000132  EF9D  F000         	goto	u90
   546   000136                     u91:
   547   000136  EF93  F000         	goto	l893
   548   00013A                     u90:
   549   00013A                     
   550                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
   551   00013A  CFC4 F009          	movff	4036,_ADC+1	;volatile
   552                           
   553                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
   554   00013E  CFC3 F008          	movff	4035,_ADC	;volatile
   555                           
   556                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
   557   000142  C008  F001         	movff	_ADC,?_ADC_Read
   558   000146  C009  F002         	movff	_ADC+1,?_ADC_Read+1
   559   00014A  0012               	return		;funcret
   560   00014C                     __end_of_ADC_Read:
   561                           	callstack 0
   562                           
   563 ;; *************** function _ADC_start *****************
   564 ;; Defined at:
   565 ;;		line 13 in file "PIC18F4331_ADC.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		None
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   579 ;;      Params:         0       0       0       0
   580 ;;      Locals:         0       0       0       0
   581 ;;      Temps:          0       0       0       0
   582 ;;      Totals:         0       0       0       0
   583 ;;Total ram usage:        0 bytes
   584 ;; Hardware stack levels used: 1
   585 ;; Hardware stack levels required when called: 1
   586 ;; This function calls:
   587 ;;		Nothing
   588 ;; This function is called by:
   589 ;;		_ADC_Read
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text6
   594   0001A8                     __ptext6:
   595                           	callstack 0
   596   0001A8                     _ADC_start:
   597                           	callstack 26
   598   0001A8                     
   599                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
   600   0001A8  80C2               	bsf	194,0,c	;volatile
   601                           
   602                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
   603   0001AA  82C2               	bsf	194,1,c	;volatile
   604   0001AC  0012               	return		;funcret
   605   0001AE                     __end_of_ADC_start:
   606                           	callstack 0
   607                           
   608 ;; *************** function _ADC_in_progress *****************
   609 ;; Defined at:
   610 ;;		line 53 in file "PIC18F4331_ADC.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      unsigned char 
   617 ;; Registers used:
   618 ;;		wreg
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   624 ;;      Params:         0       0       0       0
   625 ;;      Locals:         0       0       0       0
   626 ;;      Temps:          0       0       0       0
   627 ;;      Totals:         0       0       0       0
   628 ;;Total ram usage:        0 bytes
   629 ;; Hardware stack levels used: 1
   630 ;; Hardware stack levels required when called: 1
   631 ;; This function calls:
   632 ;;		Nothing
   633 ;; This function is called by:
   634 ;;		_ADC_Read
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text7
   639   00017E                     __ptext7:
   640                           	callstack 0
   641   00017E                     _ADC_in_progress:
   642                           	callstack 26
   643   00017E                     
   644                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
   645   00017E  B2C2               	btfsc	194,1,c	;volatile
   646   000180  EFC4  F000         	goto	u11
   647   000184  EFC7  F000         	goto	u10
   648   000188                     u11:
   649   000188  0E01               	movlw	1
   650   00018A  EFC8  F000         	goto	u16
   651   00018E                     u10:
   652   00018E  0E00               	movlw	0
   653   000190                     u16:
   654   000190  0012               	return		;funcret
   655   000192                     __end_of_ADC_in_progress:
   656                           	callstack 0
   657                           
   658 ;; *************** function _SMS_init *****************
   659 ;; Defined at:
   660 ;;		line 8 in file "SoilMoistureSensor.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, status,2, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   674 ;;      Params:         0       0       0       0
   675 ;;      Locals:         0       0       0       0
   676 ;;      Temps:          0       0       0       0
   677 ;;      Totals:         0       0       0       0
   678 ;;Total ram usage:        0 bytes
   679 ;; Hardware stack levels used: 1
   680 ;; Hardware stack levels required when called: 3
   681 ;; This function calls:
   682 ;;		_ADC_init
   683 ;; This function is called by:
   684 ;;		_FSM_begin
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text8
   689   0001AE                     __ptext8:
   690                           	callstack 0
   691   0001AE                     _SMS_init:
   692                           	callstack 26
   693   0001AE                     
   694                           ;SoilMoistureSensor.c: 10:     ADC_init();
   695   0001AE  ECA6  F000         	call	_ADC_init	;wreg free
   696   0001B2  0012               	return		;funcret
   697   0001B4                     __end_of_SMS_init:
   698                           	callstack 0
   699                           
   700 ;; *************** function _ADC_init *****************
   701 ;; Defined at:
   702 ;;		line 24 in file "PIC18F4331_ADC.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, status,2, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   716 ;;      Params:         0       0       0       0
   717 ;;      Locals:         0       0       0       0
   718 ;;      Temps:          0       0       0       0
   719 ;;      Totals:         0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used: 1
   722 ;; Hardware stack levels required when called: 2
   723 ;; This function calls:
   724 ;;		_ADC_stop
   725 ;; This function is called by:
   726 ;;		_SMS_init
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text9
   731   00014C                     __ptext9:
   732                           	callstack 0
   733   00014C                     _ADC_init:
   734                           	callstack 26
   735   00014C                     
   736                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
   737   00014C  ECDC  F000         	call	_ADC_stop	;wreg free
   738   000150                     
   739                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
   740   000150  0E3F               	movlw	-193
   741   000152  16C1               	andwf	193,f,c	;volatile
   742   000154                     
   743                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
   744   000154  9099               	bcf	153,0,c	;volatile
   745   000156                     
   746                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
   747   000156  9299               	bcf	153,1,c	;volatile
   748   000158                     
   749                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
   750   000158  9AC2               	bcf	194,5,c	;volatile
   751   00015A                     
   752                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
   753   00015A  0EF8               	movlw	-8
   754   00015C  16C0               	andwf	192,f,c	;volatile
   755   00015E                     
   756                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
   757   00015E  8EC0               	bsf	192,7,c	;volatile
   758   000160                     
   759                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
   760   000160  0E87               	movlw	-121
   761   000162  16C0               	andwf	192,f,c	;volatile
   762   000164                     
   763                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
   764   000164  80B8               	bsf	184,0,c	;volatile
   765   000166  0012               	return		;funcret
   766   000168                     __end_of_ADC_init:
   767                           	callstack 0
   768                           
   769 ;; *************** function _ADC_stop *****************
   770 ;; Defined at:
   771 ;;		line 19 in file "PIC18F4331_ADC.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;		None
   774 ;; Auto vars:     Size  Location     Type
   775 ;;		None
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		None
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   785 ;;      Params:         0       0       0       0
   786 ;;      Locals:         0       0       0       0
   787 ;;      Temps:          0       0       0       0
   788 ;;      Totals:         0       0       0       0
   789 ;;Total ram usage:        0 bytes
   790 ;; Hardware stack levels used: 1
   791 ;; Hardware stack levels required when called: 1
   792 ;; This function calls:
   793 ;;		Nothing
   794 ;; This function is called by:
   795 ;;		_ADC_init
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           	psect	text10
   800   0001B8                     __ptext10:
   801                           	callstack 0
   802   0001B8                     _ADC_stop:
   803                           	callstack 26
   804   0001B8                     
   805                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
   806   0001B8  90C2               	bcf	194,0,c	;volatile
   807   0001BA  0012               	return		;funcret
   808   0001BC                     __end_of_ADC_stop:
   809                           	callstack 0
   810                           
   811 ;; *************** function _timer_overflow_isr *****************
   812 ;; Defined at:
   813 ;;		line 5 in file "PIC18F4331_Timer.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;		None
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   827 ;;      Params:         0       0       0       0
   828 ;;      Locals:         0       0       0       0
   829 ;;      Temps:          0       0       0       0
   830 ;;      Totals:         0       0       0       0
   831 ;;Total ram usage:        0 bytes
   832 ;; Hardware stack levels used: 1
   833 ;; This function calls:
   834 ;;		Nothing
   835 ;; This function is called by:
   836 ;;		Interrupt level 2
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	intcode
   841   000008                     __pintcode:
   842                           	callstack 0
   843   000008                     _timer_overflow_isr:
   844                           	callstack 26
   845                           
   846                           ;incstack = 0
   847   000008  820D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   848   00000A                     
   849                           ;PIC18F4331_Timer.c: 8:     INTCONbits.GIEH = 0;
   850   00000A  9EF2               	bcf	242,7,c	;volatile
   851                           
   852                           ;PIC18F4331_Timer.c: 9:     INTCONbits.GIEL = 1;
   853   00000C  8CF2               	bsf	242,6,c	;volatile
   854   00000E                     
   855                           ;PIC18F4331_Timer.c: 25:     if(TMR0L < 6)
   856   00000E  0E06               	movlw	6
   857   000010  60D6               	cpfslt	214,c	;volatile
   858   000012  EF0D  F000         	goto	i2u7_41
   859   000016  EF0F  F000         	goto	i2u7_40
   860   00001A                     i2u7_41:
   861   00001A  EF11  F000         	goto	i2l871
   862   00001E                     i2u7_40:
   863   00001E                     
   864                           ;PIC18F4331_Timer.c: 26:     {;PIC18F4331_Timer.c: 27:         TMR0L = 6;
   865   00001E  0E06               	movlw	6
   866   000020  6ED6               	movwf	214,c	;volatile
   867   000022                     i2l871:
   868                           
   869                           ;PIC18F4331_Timer.c: 31:     if(INTCONbits.TMR0IF)
   870   000022  A4F2               	btfss	242,2,c	;volatile
   871   000024  EF16  F000         	goto	i2u8_41
   872   000028  EF18  F000         	goto	i2u8_40
   873   00002C                     i2u8_41:
   874   00002C  EF1B  F000         	goto	i2l877
   875   000030                     i2u8_40:
   876   000030                     
   877                           ;PIC18F4331_Timer.c: 32:     {;PIC18F4331_Timer.c: 34:         tmr0Counter++;
   878   000030  4A0A               	infsnz	_tmr0Counter^0,f,c	;volatile
   879   000032  2A0B               	incf	(_tmr0Counter+1)^0,f,c	;volatile
   880   000034                     
   881                           ;PIC18F4331_Timer.c: 37:         INTCONbits.TMR0IF = 0;
   882   000034  94F2               	bcf	242,2,c	;volatile
   883   000036                     i2l877:
   884                           
   885                           ;PIC18F4331_Timer.c: 41:     INTCONbits.GIEH = 1;
   886   000036  8EF2               	bsf	242,7,c	;volatile
   887   000038                     
   888                           ;PIC18F4331_Timer.c: 42:     INTCONbits.GIEL = 1;
   889   000038  8CF2               	bsf	242,6,c	;volatile
   890   00003A  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   891   00003C  0011               	retfie		f
   892   00003E                     __end_of_timer_overflow_isr:
   893                           	callstack 0
   894   000000                     
   895                           	psect	rparam
   896   000000                     
   897                           	psect	temp
   898   00000D                     btemp:
   899                           	callstack 0
   900   00000D                     	ds	1
   901   000000                     int$flags	set	btemp
   902   000000                     wtemp8	set	btemp+1
   903   000000                     ttemp5	set	btemp+1
   904   000000                     ttemp6	set	btemp+4
   905   000000                     ttemp7	set	btemp+8
   906                           
   907                           	psect	idloc
   908                           
   909                           ;Config register IDLOC0 @ 0x200000
   910                           ;	unspecified, using default values
   911   200000                     	org	2097152
   912   200000  FF                 	db	255
   913                           
   914                           ;Config register IDLOC1 @ 0x200001
   915                           ;	unspecified, using default values
   916   200001                     	org	2097153
   917   200001  FF                 	db	255
   918                           
   919                           ;Config register IDLOC2 @ 0x200002
   920                           ;	unspecified, using default values
   921   200002                     	org	2097154
   922   200002  FF                 	db	255
   923                           
   924                           ;Config register IDLOC3 @ 0x200003
   925                           ;	unspecified, using default values
   926   200003                     	org	2097155
   927   200003  FF                 	db	255
   928                           
   929                           ;Config register IDLOC4 @ 0x200004
   930                           ;	unspecified, using default values
   931   200004                     	org	2097156
   932   200004  FF                 	db	255
   933                           
   934                           ;Config register IDLOC5 @ 0x200005
   935                           ;	unspecified, using default values
   936   200005                     	org	2097157
   937   200005  FF                 	db	255
   938                           
   939                           ;Config register IDLOC6 @ 0x200006
   940                           ;	unspecified, using default values
   941   200006                     	org	2097158
   942   200006  FF                 	db	255
   943                           
   944                           ;Config register IDLOC7 @ 0x200007
   945                           ;	unspecified, using default values
   946   200007                     	org	2097159
   947   200007  FF                 	db	255
   948                           
   949                           	psect	config
   950                           
   951                           ; Padding undefined space
   952   300000                     	org	3145728
   953   300000  FF                 	db	255
   954                           
   955                           ;Config register CONFIG1H @ 0x300001
   956                           ;	Oscillator Selection bits
   957                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
   958                           ;	Fail-Safe Clock Monitor Enable bit
   959                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
   960                           ;	Internal External Oscillator Switchover bit
   961                           ;	IESO = ON, Internal External Switchover mode enabled
   962   300001                     	org	3145729
   963   300001  C8                 	db	200
   964                           
   965                           ;Config register CONFIG2L @ 0x300002
   966                           ;	Power-up Timer Enable bit
   967                           ;	PWRTEN = OFF, PWRT disabled
   968                           ;	Brown-out Reset Enable bits
   969                           ;	BOREN = ON, Brown-out Reset enabled
   970                           ;	Brown Out Reset Voltage bits
   971                           ;	BORV = 0x3, unprogrammed default
   972   300002                     	org	3145730
   973   300002  0F                 	db	15
   974                           
   975                           ;Config register CONFIG2H @ 0x300003
   976                           ;	Watchdog Timer Enable bit
   977                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
   978                           ;	Watchdog Timer Postscale Select bits
   979                           ;	WDPS = 32768, 1:32768
   980                           ;	Watchdog Timer Window Enable bit
   981                           ;	WINEN = OFF, WDT window disabled
   982   300003                     	org	3145731
   983   300003  3E                 	db	62
   984                           
   985                           ;Config register CONFIG3L @ 0x300004
   986                           ;	PWM output pins Reset state control
   987                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
   988                           ;	Low-Side Transistors Polarity
   989                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
   990                           ;	High-Side Transistors Polarity
   991                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
   992                           ;	Timer1 Oscillator MUX
   993                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
   994   300004                     	org	3145732
   995   300004  3C                 	db	60
   996                           
   997                           ;Config register CONFIG3H @ 0x300005
   998                           ;	FLTA MUX bit
   999                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  1000                           ;	SSP I/O MUX bit
  1001                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  1002                           ;	PWM4 MUX bit
  1003                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  1004                           ;	TMR0/T5CKI External clock MUX bit
  1005                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  1006                           ;	MCLR Pin Enable bit
  1007                           ;	MCLRE = ON, Enabled
  1008   300005                     	org	3145733
  1009   300005  9D                 	db	157
  1010                           
  1011                           ;Config register CONFIG4L @ 0x300006
  1012                           ;	Stack Full/Underflow Reset Enable bit
  1013                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1014                           ;	Low-Voltage ICSP Enable bit
  1015                           ;	LVP = ON, Low-voltage ICSP enabled
  1016                           ;	Background Debugger Enable bit
  1017                           ;	DEBUG = 0x1, unprogrammed default
  1018   300006                     	org	3145734
  1019   300006  85                 	db	133
  1020                           
  1021                           ; Padding undefined space
  1022   300007                     	org	3145735
  1023   300007  FF                 	db	255
  1024                           
  1025                           ;Config register CONFIG5L @ 0x300008
  1026                           ;	Code Protection bit
  1027                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  1028                           ;	Code Protection bit
  1029                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  1030   300008                     	org	3145736
  1031   300008  0F                 	db	15
  1032                           
  1033                           ;Config register CONFIG5H @ 0x300009
  1034                           ;	Boot Block Code Protection bit
  1035                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1036                           ;	Data EEPROM Code Protection bit
  1037                           ;	CPD = OFF, Data EEPROM not code-protected
  1038   300009                     	org	3145737
  1039   300009  C0                 	db	192
  1040                           
  1041                           ;Config register CONFIG6L @ 0x30000A
  1042                           ;	Write Protection bit
  1043                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  1044                           ;	Write Protection bit
  1045                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  1046   30000A                     	org	3145738
  1047   30000A  0F                 	db	15
  1048                           
  1049                           ;Config register CONFIG6H @ 0x30000B
  1050                           ;	Configuration Register Write Protection bit
  1051                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1052                           ;	Boot Block Write Protection bit
  1053                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1054                           ;	Data EEPROM Write Protection bit
  1055                           ;	WRTD = OFF, Data EEPROM not write-protected
  1056   30000B                     	org	3145739
  1057   30000B  E0                 	db	224
  1058                           
  1059                           ;Config register CONFIG7L @ 0x30000C
  1060                           ;	Table Read Protection bit
  1061                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  1062                           ;	Table Read Protection bit
  1063                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  1064   30000C                     	org	3145740
  1065   30000C  0F                 	db	15
  1066                           
  1067                           ;Config register CONFIG7H @ 0x30000D
  1068                           ;	Boot Block Table Read Protection bit
  1069                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1070   30000D                     	org	3145741
  1071   30000D  40                 	db	64
  1072                           tosu	equ	0xFFF
  1073                           tosh	equ	0xFFE
  1074                           tosl	equ	0xFFD
  1075                           stkptr	equ	0xFFC
  1076                           pclatu	equ	0xFFB
  1077                           pclath	equ	0xFFA
  1078                           pcl	equ	0xFF9
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           prodh	equ	0xFF4
  1084                           prodl	equ	0xFF3
  1085                           indf0	equ	0xFEF
  1086                           postinc0	equ	0xFEE
  1087                           postdec0	equ	0xFED
  1088                           preinc0	equ	0xFEC
  1089                           plusw0	equ	0xFEB
  1090                           fsr0h	equ	0xFEA
  1091                           fsr0l	equ	0xFE9
  1092                           wreg	equ	0xFE8
  1093                           indf1	equ	0xFE7
  1094                           postinc1	equ	0xFE6
  1095                           postdec1	equ	0xFE5
  1096                           preinc1	equ	0xFE4
  1097                           plusw1	equ	0xFE3
  1098                           fsr1h	equ	0xFE2
  1099                           fsr1l	equ	0xFE1
  1100                           bsr	equ	0xFE0
  1101                           indf2	equ	0xFDF
  1102                           postinc2	equ	0xFDE
  1103                           postdec2	equ	0xFDD
  1104                           preinc2	equ	0xFDC
  1105                           plusw2	equ	0xFDB
  1106                           fsr2h	equ	0xFDA
  1107                           fsr2l	equ	0xFD9
  1108                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      7      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_SMS_read_and_set_state
    _SMS_read_and_set_state->_ADC_Read

Critical Paths under _timer_overflow_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     135
                          _FSM_begin
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                            2     2      0     120
                                              5 COMRAM     2     2      0
                           _SMS_init
             _SMS_read_and_set_state
                  _get_current_state
                          _set_state
 ---------------------------------------------------------------------------------
 (2) _SMS_read_and_set_state                               3     3      0     105
                                              2 COMRAM     3     3      0
                           _ADC_Read
                  _get_current_state
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                              0 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _SMS_init
       _ADC_init
         _ADC_stop
     _SMS_read_and_set_state
       _ADC_Read
         _ADC_in_progress
         _ADC_start
       _get_current_state
       _set_state
     _get_current_state
     _set_state
   _set_state

 _timer_overflow_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      7       C       1       12.8%
BITBIGSFRllll       39      0       0      14        0.0%
BITBIGSFRlllhl      1E      0       0      13        0.0%
BITBIGSFRlh         1B      0       0      10        0.0%
BITBIGSFRllhh       10      0       0      11        0.0%
BITBIGSFRh           D      0       0       9        0.0%
BITBIGSFRlllhh       7      0       0      12        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       C      15        0.0%
DATA                 0      0       C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Feb 27 14:21:52 2023

                                  l9 019C                                   l52 01AC  
                                 l61 0190                                   l55 01BA  
                                 l58 0166                                   l66 013A  
                                 l67 014A                                   l92 01A6  
                                 l84 0120                                   l78 01B2  
                                 l89 01B6                                   u10 018E  
                                 u11 0188                                   u16 0190  
                                 u90 013A                                   u91 0136  
                                l113 00BA                                  _ADC 0008  
                                l801 0150                                  l811 015E  
                                l803 0154                                  l813 0160  
                                l805 0156                                  l821 01B4  
                                l901 00E8                                  l815 0164  
                                l807 0158                                  l903 00FE  
                                l911 004A                                  l809 015A  
                                l825 01AE                                  l905 0114  
                                l913 0054                                  l921 007E  
                                l915 006C                                  l907 0042  
                                l917 0074                                  l909 0046  
                                l791 01B8                                  l927 0192  
                                l793 017E                                  l937 0094  
                                l929 0198                                  l891 0122  
                                l789 01A8                                  l893 0126  
                                l797 01A2                                  l799 014C  
                                l895 00BC                                  l897 00C8  
                                l899 00DE                                  u100 00DE  
                                u101 00DA                                  u110 00FE  
                                u111 00FA                                  u120 0114  
                                u121 0110                                  u130 0068  
                                u131 0064                                  wreg 000FE8  
                               i2l24 003A                                 _main 0192  
                               btemp 000D                     __end_of_ADC_Read 014C  
                               start 003E                     __end_of_ADC_init 0168  
                   __end_of_ADC_stop 01BC                         ___param_bank 000000  
                              ?_main 0001                                i2l871 0022  
                              i2l873 0030                                i2l865 000A  
                              i2l875 0034                                i2l867 000E  
                              i2l877 0036                                i2l869 001E  
                              i2l879 0038                                _TMR0L 000FD6  
                   __end_of_SMS_init 01B4                                ttemp5 000E  
                              ttemp6 0011                                ttemp7 0015  
                              status 000FD8                                wtemp8 000E  
                  __end_of_ADC_start 01AE                      __initialization 0168  
                       __end_of_main 01A0                               ??_main 0008  
                      __activetblptr 000002                               _ADRESH 000FC4  
                             _ADRESL 000FC3                    __end_of_FSM_begin 00BC  
                             i2u7_40 001E                               i2u7_41 001A  
                             i2u8_40 0030                               i2u8_41 002C  
     SMS_read_and_set_state@moisture 0004                               isa$std 000001  
                          ?_ADC_Read 0001                               tblptru 000FF8  
                          ?_ADC_init 0001                            ?_ADC_stop 0001  
                         __accesstop 0060              __end_of__initialization 0170  
                      ___rparam_used 000001                       __pcstackCOMRAM 0001  
         __end_of_timer_overflow_isr 003E                            ?_SMS_init 0001  
                         ??_ADC_Read 0003                           ??_ADC_init 0001  
SMS_read_and_set_state@current_state 0003                           ??_ADC_stop 0001  
                         __pnvCOMRAM 000C                           ??_SMS_init 0001  
                  ??_ADC_in_progress 0001                            _ADCHSbits 000F99  
                            __Hparam 0000                              __Lparam 0000  
                          _ADC_start 01A8                              __pcinit 0168  
                            __ramtop 0300                              __ptext0 0192  
                            __ptext1 0042                              __ptext2 00BC  
                            __ptext3 01A0                              __ptext4 01B4  
                            __ptext5 0122                              __ptext6 01A8  
                            __ptext7 017E                              __ptext8 01AE  
                            __ptext9 014C                            _T0CONbits 000FD5  
           ??_SMS_read_and_set_state 0003                 end_of_initialization 0170  
                      __Lmediumconst 0000                    __end_of_set_state 01A8  
                          _FSM_begin 0042                            _FSM_state 000C  
                         ?_ADC_start 0001                           ?_FSM_begin 0001  
                start_initialization 0168                   _timer_overflow_isr 0008  
                ?_timer_overflow_isr 0001                          ??_ADC_start 0001  
                    _ADC_in_progress 017E                          __pbssCOMRAM 0008  
               ??_timer_overflow_isr 0001               _SMS_read_and_set_state 00BC  
                        ??_FSM_begin 0006                            __pintcode 0008  
                           _ADC_Read 0122                             _ADC_init 014C  
                           _ADC_stop 01B8              __end_of_ADC_in_progress 0192  
                          _set_state 01A0                           _ADCON0bits 000FC2  
                         _ADCON1bits 000FC1                           _ADCON2bits 000FC0  
                           _SMS_init 01AE                             __Hrparam 0000  
                           __Lrparam 0000                           ?_set_state 0001  
                         _ANSEL0bits 000FB8                             __ptext10 01B8  
                   ?_ADC_in_progress 0001                             isa$xinst 000000  
                  _get_current_state 01B4                             int$flags 000D  
                        _tmr0Counter 000A                   ?_get_current_state 0001  
                ??_get_current_state 0001                           _INTCONbits 000FF2  
            ?_SMS_read_and_set_state 0001                             intlevel2 0000  
          __end_of_get_current_state 01B8                          ??_set_state 0001  
              set_state@state_to_set 0001       __end_of_SMS_read_and_set_state 0122  
