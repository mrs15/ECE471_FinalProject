

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Mar 31 10:50:58 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.40
    61                           ; Generated 17/11/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4331 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     
    96                           	psect	idataCOMRAM
    97   000AD4                     __pidataCOMRAM:
    98                           	callstack 0
    99                           
   100                           ;initializer for FSM_begin@F2893
   101   000AD4  0002               	dw	2
   102   000AD6  34                 	db	low _Watering_Done_cb
   103   000AD7  0A                 	db	high _Watering_Done_cb
   104   000AD8  00                 	db	0
   105   000AD9  00                 	db	0
   106   000ADA  00                 	db	0
   107   000ADB  00                 	db	0
   108                           
   109                           ;initializer for FSM_begin@F2890
   110   000ADC  0004               	dw	4
   111   000ADE  18                 	db	low _Check_Moisture_cb
   112   000ADF  0A                 	db	high _Check_Moisture_cb
   113   000AE0  00                 	db	0
   114   000AE1  00                 	db	0
   115   000AE2  00                 	db	0
   116   000AE3  00                 	db	0
   117   000000                     _RCREG	set	4014
   118   000000                     _TXREG	set	4013
   119   000000                     _TXSTAbits	set	4012
   120   000000                     _SPBRG	set	4015
   121   000000                     _SPBRGH	set	4016
   122   000000                     _ADRESL	set	4035
   123   000000                     _ADRESH	set	4036
   124                           
   125                           	psect	nvCOMRAM
   126   000047                     __pnvCOMRAM:
   127                           	callstack 0
   128   000047                     _FSM_state:
   129                           	callstack 0
   130   000047                     	ds	1
   131   000000                     _TRISC	set	3988
   132   000000                     _TRISBbits	set	3987
   133   000000                     _PORTBbits	set	3969
   134   000000                     _TRISB	set	3987
   135   000000                     _ADCHSbits	set	3993
   136   000000                     _ADCON1bits	set	4033
   137   000000                     _ADCON0bits	set	4034
   138   000000                     _PIR1bits	set	3998
   139   000000                     _RCSTAbits	set	4011
   140   000000                     _ANSEL0bits	set	4024
   141   000000                     _ADCON2bits	set	4032
   142   000000                     _RCONbits	set	4048
   143   000000                     _OSCCONbits	set	4051
   144   000000                     _T0CONbits	set	4053
   145   000000                     _INTCON2bits	set	4081
   146   000000                     _INTCONbits	set	4082
   147   000000                     _TMR0H	set	4055
   148   000000                     _TMR0L	set	4054
   149   000000                     _TRISD	set	3989
   150   000000                     _TRISCbits	set	3988
   151   000000                     _LATC	set	3979
   152   000000                     _LATD	set	3980
   153                           
   154                           	psect	smallconst
   155   000300                     __psmallconst:
   156                           	callstack 0
   157   000300  00                 	db	0
   158   000301                     STR_4:
   159   000301  20                 	db	32
   160   000302  3E                 	db	62	;'>'
   161   000303  57                 	db	87	;'W'
   162   000304  41                 	db	65	;'A'
   163   000305  54                 	db	84	;'T'
   164   000306  45                 	db	69	;'E'
   165   000307  52                 	db	82	;'R'
   166   000308  49                 	db	73	;'I'
   167   000309  4E                 	db	78	;'N'
   168   00030A  47                 	db	71	;'G'
   169   00030B  20                 	db	32
   170   00030C  50                 	db	80	;'P'
   171   00030D  4C                 	db	76	;'L'
   172   00030E  41                 	db	65	;'A'
   173   00030F  4E                 	db	78	;'N'
   174   000310  54                 	db	84	;'T'
   175   000311  53                 	db	83	;'S'
   176   000312  3C                 	db	60	;'<'
   177   000313  00                 	db	0
   178   000314  00                 	db	0
   179   000315                     STR_5:
   180   000315  20                 	db	32
   181   000316  3E                 	db	62	;'>'
   182   000317  43                 	db	67	;'C'
   183   000318  48                 	db	72	;'H'
   184   000319  45                 	db	69	;'E'
   185   00031A  43                 	db	67	;'C'
   186   00031B  4B                 	db	75	;'K'
   187   00031C  49                 	db	73	;'I'
   188   00031D  4E                 	db	78	;'N'
   189   00031E  47                 	db	71	;'G'
   190   00031F  20                 	db	32
   191   000320  4D                 	db	77	;'M'
   192   000321  4F                 	db	79	;'O'
   193   000322  49                 	db	73	;'I'
   194   000323  53                 	db	83	;'S'
   195   000324  54                 	db	84	;'T'
   196   000325  3C                 	db	60	;'<'
   197   000326  00                 	db	0
   198   000327  00                 	db	0
   199   000328                     STR_1:
   200   000328  20                 	db	32
   201   000329  50                 	db	80	;'P'
   202   00032A  6C                 	db	108	;'l'
   203   00032B  61                 	db	97	;'a'
   204   00032C  6E                 	db	110	;'n'
   205   00032D  74                 	db	116	;'t'
   206   00032E  20                 	db	32
   207   00032F  57                 	db	87	;'W'
   208   000330  61                 	db	97	;'a'
   209   000331  74                 	db	116	;'t'
   210   000332  65                 	db	101	;'e'
   211   000333  72                 	db	114	;'r'
   212   000334  69                 	db	105	;'i'
   213   000335  6E                 	db	110	;'n'
   214   000336  67                 	db	103	;'g'
   215   000337  00                 	db	0
   216   000338  00                 	db	0
   217   000339                     STR_2:
   218   000339  53                 	db	83	;'S'
   219   00033A  79                 	db	121	;'y'
   220   00033B  73                 	db	115	;'s'
   221   00033C  74                 	db	116	;'t'
   222   00033D  65                 	db	101	;'e'
   223   00033E  6D                 	db	109	;'m'
   224   00033F  20                 	db	32
   225   000340  49                 	db	73	;'I'
   226   000341  6E                 	db	110	;'n'
   227   000342  69                 	db	105	;'i'
   228   000343  74                 	db	116	;'t'
   229   000344  2E                 	db	46
   230   000345  2E                 	db	46
   231   000346  2E                 	db	46
   232   000347  00                 	db	0
   233   000348  00                 	db	0
   234   000349                     STR_3:
   235   000349  20                 	db	32
   236   00034A  3E                 	db	62	;'>'
   237   00034B  49                 	db	73	;'I'
   238   00034C  44                 	db	68	;'D'
   239   00034D  4C                 	db	76	;'L'
   240   00034E  45                 	db	69	;'E'
   241   00034F  20                 	db	32
   242   000350  53                 	db	83	;'S'
   243   000351  54                 	db	84	;'T'
   244   000352  41                 	db	65	;'A'
   245   000353  54                 	db	84	;'T'
   246   000354  45                 	db	69	;'E'
   247   000355  3C                 	db	60	;'<'
   248   000356  00                 	db	0
   249   000357  00                 	db	0
   250   000358  00                 	db	0	; dummy byte at the end
   251   000000                     
   252                           ; #config settings
   253                           
   254                           	psect	cinit
   255   00090C                     __pcinit:
   256                           	callstack 0
   257   00090C                     start_initialization:
   258                           	callstack 0
   259   00090C                     __initialization:
   260                           	callstack 0
   261                           
   262                           ; Initialize objects allocated to COMRAM (16 bytes)
   263                           ; load TBLPTR registers with __pidataCOMRAM
   264   00090C  0ED4               	movlw	low __pidataCOMRAM
   265   00090E  6EF6               	movwf	tblptrl,c
   266   000910  0E0A               	movlw	high __pidataCOMRAM
   267   000912  6EF7               	movwf	tblptrh,c
   268   000914  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   269   000916  6EF8               	movwf	tblptru,c
   270   000918  EE00  F02D         	lfsr	0,__pdataCOMRAM
   271   00091C  EE10 F010          	lfsr	1,16
   272   000920                     copy_data0:
   273   000920  0009               	tblrd		*+
   274   000922  CFF5 FFEE          	movff	tablat,postinc0
   275   000926  50E5               	movf	postdec1,w,c
   276   000928  50E1               	movf	fsr1l,w,c
   277   00092A  E1FA               	bnz	copy_data0
   278                           
   279                           ; Clear objects allocated to BANK0 (40 bytes)
   280   00092C  EE00  F060         	lfsr	0,__pbssBANK0
   281   000930  0E28               	movlw	40
   282   000932                     clear_0:
   283   000932  6AEE               	clrf	postinc0,c
   284   000934  06E8               	decf	wreg,f,c
   285   000936  E1FD               	bnz	clear_0
   286                           
   287                           ; Clear objects allocated to COMRAM (10 bytes)
   288   000938  EE00  F03D         	lfsr	0,__pbssCOMRAM
   289   00093C  0E0A               	movlw	10
   290   00093E                     clear_1:
   291   00093E  6AEE               	clrf	postinc0,c
   292   000940  06E8               	decf	wreg,f,c
   293   000942  E1FD               	bnz	clear_1
   294   000944                     end_of_initialization:
   295                           	callstack 0
   296   000944                     __end_of__initialization:
   297                           	callstack 0
   298   000944  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   299   000946  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   300   000948  0E00               	movlw	low (__Lmediumconst shr (0+16))
   301   00094A  6EF8               	movwf	tblptru,c
   302   00094C  0100               	movlb	0
   303   00094E  EFA9  F004         	goto	_main	;jump to C main() function
   304                           
   305                           	psect	bssCOMRAM
   306   00003D                     __pbssCOMRAM:
   307                           	callstack 0
   308   00003D                     _tmr0Counter@SystemInterrupts$F994:
   309                           	callstack 0
   310   00003D                     	ds	2
   311   00003F                     _tmr0Counter:
   312                           	callstack 0
   313   00003F                     	ds	2
   314   000041                     _ADC:
   315                           	callstack 0
   316   000041                     	ds	2
   317   000043                     _rx_data:
   318                           	callstack 0
   319   000043                     	ds	1
   320   000044                     _rx_flag:
   321                           	callstack 0
   322   000044                     	ds	1
   323   000045                     _pump_status:
   324                           	callstack 0
   325   000045                     	ds	1
   326   000046                     _callback_count:
   327                           	callstack 0
   328   000046                     	ds	1
   329                           
   330                           	psect	dataCOMRAM
   331   00002D                     __pdataCOMRAM:
   332                           	callstack 0
   333   00002D                     FSM_begin@F2893:
   334                           	callstack 0
   335   00002D                     	ds	8
   336   000035                     FSM_begin@F2890:
   337                           	callstack 0
   338   000035                     	ds	8
   339                           
   340                           	psect	bssBANK0
   341   000060                     __pbssBANK0:
   342                           	callstack 0
   343   000060                     _registered_callbacks:
   344                           	callstack 0
   345   000060                     	ds	40
   346                           
   347                           	psect	cstackCOMRAM
   348   000001                     __pcstackCOMRAM:
   349                           	callstack 0
   350   000001                     i2set_state@state_to_set:
   351                           	callstack 0
   352                           
   353                           ; 1 bytes @ 0x0
   354   000001                     	ds	1
   355   000002                     
   356                           ; 1 bytes @ 0x1
   357   000002                     	ds	4
   358   000006                     Callbacks_Manager@callbacks:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0x5
   362   000006                     	ds	1
   363   000007                     ??_timer_overflow_isr:
   364                           
   365                           ; 1 bytes @ 0x6
   366   000007                     	ds	8
   367   00000F                     ??_init_leds:
   368   00000F                     ?_ADC_Read:
   369                           	callstack 0
   370   00000F                     LCD_DATA@Data:
   371                           	callstack 0
   372   00000F                     set_state@state_to_set:
   373                           	callstack 0
   374   00000F                     Callbacks_Init@callback:
   375                           	callstack 0
   376   00000F                     UART2_send@data:
   377                           	callstack 0
   378   00000F                     Reset_Counter@config:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0xE
   382   00000F                     	ds	1
   383   000010                     LCD_CMD@CMD:
   384                           	callstack 0
   385   000010                     LCD_Write_Char@Low4:
   386                           	callstack 0
   387   000010                     SMS_Set_State@moisture:
   388                           	callstack 0
   389                           
   390                           ; 2 bytes @ 0xF
   391   000010                     	ds	1
   392   000011                     ??_LCD_Init:
   393   000011                     ?_SMS_Read_Moisture_Value:
   394                           	callstack 0
   395   000011                     LCD_Set_Cursor@c:
   396                           	callstack 0
   397   000011                     LCD_Write_Char@High4:
   398                           	callstack 0
   399   000011                     Register_Callback@config:
   400                           	callstack 0
   401                           
   402                           ; 2 bytes @ 0x10
   403   000011                     	ds	1
   404   000012                     LCD_Set_Cursor@r:
   405                           	callstack 0
   406   000012                     LCD_Write_Char@Data:
   407                           	callstack 0
   408                           
   409                           ; 1 bytes @ 0x11
   410   000012                     	ds	1
   411   000013                     LCD_Set_Cursor@Low4:
   412                           	callstack 0
   413   000013                     LCD_Write_String@str:
   414                           	callstack 0
   415   000013                     SMS_Read_Moisture_Value@moisture:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x12
   419   000013                     	ds	1
   420   000014                     LCD_Set_Cursor@High4:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0x13
   424   000014                     	ds	1
   425   000015                     ??_LCD_Write_String:
   426   000015                     LCD_Set_Cursor@Temp:
   427                           	callstack 0
   428                           
   429                           ; 1 bytes @ 0x14
   430   000015                     	ds	2
   431   000017                     LCD_Write_String@i:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x16
   435   000017                     	ds	2
   436   000019                     ??_FSM_begin:
   437                           
   438                           ; 1 bytes @ 0x18
   439   000019                     	ds	2
   440   00001B                     FSM_begin@MoistureCB_Config:
   441                           	callstack 0
   442                           
   443                           ; 8 bytes @ 0x1A
   444   00001B                     	ds	8
   445   000023                     FSM_begin@WateringDoneCB_Config:
   446                           	callstack 0
   447                           
   448                           ; 8 bytes @ 0x22
   449   000023                     	ds	8
   450   00002B                     FSM_begin@moisture:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x2A
   454   00002B                     	ds	2
   455   00002D                     
   456                           ; 1 bytes @ 0x2C
   457 ;;
   458 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   459 ;;
   460 ;; *************** function _main *****************
   461 ;; Defined at:
   462 ;;		line 17 in file "main.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;		None
   465 ;; Auto vars:     Size  Location     Type
   466 ;;		None
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   476 ;;      Params:         0       0       0       0
   477 ;;      Locals:         0       0       0       0
   478 ;;      Temps:          0       0       0       0
   479 ;;      Totals:         0       0       0       0
   480 ;;Total ram usage:        0 bytes
   481 ;; Hardware stack levels required when called: 8
   482 ;; This function calls:
   483 ;;		_FSM_begin
   484 ;;		_Timer0_init
   485 ;;		_Timer0_stop
   486 ;;		_UART2_init
   487 ;;		_set_state
   488 ;; This function is called by:
   489 ;;		Startup code after reset
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text0
   494   000952                     __ptext0:
   495                           	callstack 0
   496   000952                     _main:
   497                           	callstack 23
   498   000952                     
   499                           ;main.c: 20:     OSCCONbits.IRCF0 = 1;
   500   000952  88D3               	bsf	211,4,c	;volatile
   501                           
   502                           ;main.c: 21:     OSCCONbits.IRCF1 = 1;
   503   000954  8AD3               	bsf	211,5,c	;volatile
   504                           
   505                           ;main.c: 22:     OSCCONbits.IRCF2 = 1;
   506   000956  8CD3               	bsf	211,6,c	;volatile
   507                           
   508                           ;main.c: 25:     TRISCbits.RC3 = 1;
   509   000958  8694               	bsf	148,3,c	;volatile
   510   00095A                     
   511                           ;main.c: 28:     Timer0_stop();
   512   00095A  ECA3  F005         	call	_Timer0_stop	;wreg free
   513   00095E                     
   514                           ;main.c: 31:     RCONbits.IPEN = 1;
   515   00095E  8ED0               	bsf	208,7,c	;volatile
   516   000960                     
   517                           ;main.c: 34:     INTCONbits.TMR0IE = 1;
   518   000960  8AF2               	bsf	242,5,c	;volatile
   519   000962                     
   520                           ;main.c: 37:     INTCONbits.INT0IE = 1;
   521   000962  88F2               	bsf	242,4,c	;volatile
   522   000964                     
   523                           ;main.c: 40:     INTCON2bits.TMR0IP = 1;
   524   000964  84F1               	bsf	241,2,c	;volatile
   525   000966                     
   526                           ;main.c: 43:     Timer0_init();
   527   000966  EC34  F005         	call	_Timer0_init	;wreg free
   528   00096A                     
   529                           ;main.c: 46:     INTCON2bits.INTEDG0 = 1;
   530   00096A  8CF1               	bsf	241,6,c	;volatile
   531   00096C                     
   532                           ;main.c: 49:     UART2_init();
   533   00096C  ECF0  F004         	call	_UART2_init	;wreg free
   534   000970                     
   535                           ;main.c: 52:     INTCONbits.GIEH = 1;
   536   000970  8EF2               	bsf	242,7,c	;volatile
   537   000972                     
   538                           ;main.c: 53:     INTCONbits.GIEL = 1;
   539   000972  8CF2               	bsf	242,6,c	;volatile
   540   000974                     
   541                           ;main.c: 56:     set_state(INIT_STATE);
   542   000974  0E00               	movlw	0
   543   000976  EC95  F005         	call	_set_state
   544   00097A                     l1724:
   545                           
   546                           ;main.c: 59:     {;main.c: 61:      FSM_begin();
   547   00097A  ECAD  F001         	call	_FSM_begin	;wreg free
   548   00097E  EFBD  F004         	goto	l1724
   549   000982  EF5E  F000         	goto	start
   550   000986                     __end_of_main:
   551                           	callstack 0
   552                           
   553 ;; *************** function _UART2_init *****************
   554 ;; Defined at:
   555 ;;		line 12 in file "PIC18F4331_UART2.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;		None
   558 ;; Auto vars:     Size  Location     Type
   559 ;;		None
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, status,2
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   569 ;;      Params:         0       0       0       0
   570 ;;      Locals:         0       0       0       0
   571 ;;      Temps:          0       0       0       0
   572 ;;      Totals:         0       0       0       0
   573 ;;Total ram usage:        0 bytes
   574 ;; Hardware stack levels used: 1
   575 ;; Hardware stack levels required when called: 4
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_main
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text1
   584   0009E0                     __ptext1:
   585                           	callstack 0
   586   0009E0                     _UART2_init:
   587                           	callstack 26
   588   0009E0                     
   589                           ;PIC18F4331_UART2.c: 14:     TRISCbits.RC6 = 0;
   590   0009E0  9C94               	bcf	148,6,c	;volatile
   591                           
   592                           ;PIC18F4331_UART2.c: 15:     TRISCbits.RC7 = 1;
   593   0009E2  8E94               	bsf	148,7,c	;volatile
   594                           
   595                           ;PIC18F4331_UART2.c: 18:     RCSTAbits.SPEN = 1;
   596   0009E4  8EAB               	bsf	171,7,c	;volatile
   597   0009E6                     
   598                           ;PIC18F4331_UART2.c: 21:     SPBRGH = 0;
   599   0009E6  0E00               	movlw	0
   600   0009E8  6EB0               	movwf	176,c	;volatile
   601                           
   602                           ;PIC18F4331_UART2.c: 22:     SPBRG = 51;
   603   0009EA  0E33               	movlw	51
   604   0009EC  6EAF               	movwf	175,c	;volatile
   605   0009EE                     
   606                           ;PIC18F4331_UART2.c: 25:     TXSTAbits.TX9 = 0;
   607   0009EE  9CAC               	bcf	172,6,c	;volatile
   608   0009F0                     
   609                           ;PIC18F4331_UART2.c: 26:     TXSTAbits.TXEN = 1;
   610   0009F0  8AAC               	bsf	172,5,c	;volatile
   611   0009F2                     
   612                           ;PIC18F4331_UART2.c: 27:     TXSTAbits.SYNC = 0;
   613   0009F2  98AC               	bcf	172,4,c	;volatile
   614   0009F4                     
   615                           ;PIC18F4331_UART2.c: 28:     TXSTAbits.BRGH = 1;
   616   0009F4  84AC               	bsf	172,2,c	;volatile
   617   0009F6                     
   618                           ;PIC18F4331_UART2.c: 29:     RCSTAbits.RX9 = 0;
   619   0009F6  9CAB               	bcf	171,6,c	;volatile
   620   0009F8                     
   621                           ;PIC18F4331_UART2.c: 30:     RCSTAbits.CREN = 1;
   622   0009F8  88AB               	bsf	171,4,c	;volatile
   623   0009FA  0012               	return		;funcret
   624   0009FC                     __end_of_UART2_init:
   625                           	callstack 0
   626                           
   627 ;; *************** function _Timer0_stop *****************
   628 ;; Defined at:
   629 ;;		line 92 in file "PIC18F4331_Timer.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		None
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   643 ;;      Params:         0       0       0       0
   644 ;;      Locals:         0       0       0       0
   645 ;;      Temps:          0       0       0       0
   646 ;;      Totals:         0       0       0       0
   647 ;;Total ram usage:        0 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 4
   650 ;; This function calls:
   651 ;;		Nothing
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text2
   658   000B46                     __ptext2:
   659                           	callstack 0
   660   000B46                     _Timer0_stop:
   661                           	callstack 26
   662   000B46                     
   663                           ;PIC18F4331_Timer.c: 94:     T0CONbits.TMR0ON = 0;
   664   000B46  9ED5               	bcf	213,7,c	;volatile
   665   000B48  0012               	return		;funcret
   666   000B4A                     __end_of_Timer0_stop:
   667                           	callstack 0
   668                           
   669 ;; *************** function _Timer0_init *****************
   670 ;; Defined at:
   671 ;;		line 56 in file "PIC18F4331_Timer.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   685 ;;      Params:         0       0       0       0
   686 ;;      Locals:         0       0       0       0
   687 ;;      Temps:          0       0       0       0
   688 ;;      Totals:         0       0       0       0
   689 ;;Total ram usage:        0 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 4
   692 ;; This function calls:
   693 ;;		Nothing
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           	psect	text3
   700   000A68                     __ptext3:
   701                           	callstack 0
   702   000A68                     _Timer0_init:
   703                           	callstack 26
   704   000A68                     
   705                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   706   000A68  80D5               	bsf	213,0,c	;volatile
   707                           
   708                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 0;
   709   000A6A  92D5               	bcf	213,1,c	;volatile
   710                           
   711                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   712   000A6C  84D5               	bsf	213,2,c	;volatile
   713                           
   714                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   715   000A6E  96D5               	bcf	213,3,c	;volatile
   716                           
   717                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   718   000A70  9AD5               	bcf	213,5,c	;volatile
   719                           
   720                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   721   000A72  9CD5               	bcf	213,6,c	;volatile
   722   000A74                     
   723                           ;PIC18F4331_Timer.c: 80:     TMR0L = (0x7C);
   724   000A74  0E7C               	movlw	124
   725   000A76  6ED6               	movwf	214,c	;volatile
   726                           
   727                           ;PIC18F4331_Timer.c: 81:     TMR0H = (0xE1);
   728   000A78  0EE1               	movlw	225
   729   000A7A  6ED7               	movwf	215,c	;volatile
   730   000A7C  0012               	return		;funcret
   731   000A7E                     __end_of_Timer0_init:
   732                           	callstack 0
   733                           
   734 ;; *************** function _FSM_begin *****************
   735 ;; Defined at:
   736 ;;		line 37 in file "System_FSM.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  moisture        2   42[COMRAM] unsigned short 
   741 ;;  WateringDone    8   34[COMRAM] struct .
   742 ;;  MoistureCB_C    8   26[COMRAM] struct .
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   752 ;;      Params:         0       0       0       0
   753 ;;      Locals:        18       0       0       0
   754 ;;      Temps:          2       0       0       0
   755 ;;      Totals:        20       0       0       0
   756 ;;Total ram usage:       20 bytes
   757 ;; Hardware stack levels used: 1
   758 ;; Hardware stack levels required when called: 7
   759 ;; This function calls:
   760 ;;		_Callbacks_Init
   761 ;;		_LCD_Clear
   762 ;;		_LCD_Init
   763 ;;		_LCD_Set_Cursor
   764 ;;		_LCD_Write_String
   765 ;;		_Register_Callback
   766 ;;		_SMS_Read_Moisture_Value
   767 ;;		_SMS_Set_State
   768 ;;		_SMS_init
   769 ;;		_Timer0_start
   770 ;;		_UART2_send
   771 ;;		_WaterPump_Init
   772 ;;		_WaterPump_OFF
   773 ;;		_WaterPump_ON
   774 ;;		_checking_moisture_status_led
   775 ;;		_get_current_state
   776 ;;		_idle_status_led
   777 ;;		_init_leds
   778 ;;		_set_state
   779 ;;		_watering_status_led
   780 ;; This function is called by:
   781 ;;		_main
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           	psect	text4
   786   00035A                     __ptext4:
   787                           	callstack 0
   788   00035A                     _FSM_begin:
   789                           	callstack 23
   790   00035A                     
   791                           ;System_FSM.c: 39:     switch(get_current_state())
   792   00035A  EF87  F002         	goto	l1674
   793   00035E                     l1584:
   794                           
   795                           ;System_FSM.c: 42:         {;System_FSM.c: 43:             SMS_init();
   796   00035E  EC9D  F005         	call	_SMS_init	;wreg free
   797   000362                     
   798                           ;System_FSM.c: 44:             Callbacks_Init();
   799   000362  EC3C  F004         	call	_Callbacks_Init	;wreg free
   800   000366                     
   801                           ;System_FSM.c: 45:             WaterPump_Init();
   802   000366  EC88  F005         	call	_WaterPump_Init	;wreg free
   803   00036A                     
   804                           ;System_FSM.c: 46:             init_leds();
   805   00036A  ECC3  F004         	call	_init_leds	;wreg free
   806   00036E                     
   807                           ;System_FSM.c: 47:             LCD_Init();
   808   00036E  EC47  F003         	call	_LCD_Init	;wreg free
   809   000372                     
   810                           ;System_FSM.c: 52:             Callback_Config_t MoistureCB_Config =
   811   000372  EE20  F035         	lfsr	2,FSM_begin@F2890
   812   000376  EE10  F01B         	lfsr	1,FSM_begin@MoistureCB_Config
   813   00037A  0E07               	movlw	7
   814   00037C                     u511:
   815   00037C  CFDB FFE3          	movff	plusw2,plusw1
   816   000380  06E8               	decf	wreg,f,c
   817   000382  E2FC               	bc	u511
   818   000384                     
   819                           ;System_FSM.c: 58:             Callback_Config_t WateringDoneCB_Config =
   820   000384  EE20  F02D         	lfsr	2,FSM_begin@F2893
   821   000388  EE10  F023         	lfsr	1,FSM_begin@WateringDoneCB_Config
   822   00038C  0E07               	movlw	7
   823   00038E                     u521:
   824   00038E  CFDB FFE3          	movff	plusw2,plusw1
   825   000392  06E8               	decf	wreg,f,c
   826   000394  E2FC               	bc	u521
   827   000396                     
   828                           ;System_FSM.c: 64:             Register_Callback(&MoistureCB_Config);
   829   000396  0E1B               	movlw	low FSM_begin@MoistureCB_Config
   830   000398  6E11               	movwf	Register_Callback@config^0,c
   831   00039A  0E00               	movlw	high FSM_begin@MoistureCB_Config
   832   00039C  6E12               	movwf	(Register_Callback@config+1)^0,c
   833   00039E  EC0A  F003         	call	_Register_Callback	;wreg free
   834   0003A2                     
   835                           ;System_FSM.c: 65:             Register_Callback(&WateringDoneCB_Config);
   836   0003A2  0E23               	movlw	low FSM_begin@WateringDoneCB_Config
   837   0003A4  6E11               	movwf	Register_Callback@config^0,c
   838   0003A6  0E00               	movlw	high FSM_begin@WateringDoneCB_Config
   839   0003A8  6E12               	movwf	(Register_Callback@config+1)^0,c
   840   0003AA  EC0A  F003         	call	_Register_Callback	;wreg free
   841   0003AE                     
   842                           ;System_FSM.c: 68:             LCD_Clear();
   843   0003AE  EC72  F005         	call	_LCD_Clear	;wreg free
   844   0003B2                     
   845                           ;System_FSM.c: 69:             LCD_Set_Cursor(1,1);
   846   0003B2  0E01               	movlw	1
   847   0003B4  6E11               	movwf	LCD_Set_Cursor@c^0,c
   848   0003B6  0E01               	movlw	1
   849   0003B8  EC83  F003         	call	_LCD_Set_Cursor
   850   0003BC                     
   851                           ;System_FSM.c: 70:             LCD_Write_String(" Plant Watering\0");
   852   0003BC  0E28               	movlw	low STR_1
   853   0003BE  6E13               	movwf	LCD_Write_String@str^0,c
   854   0003C0  0E03               	movlw	high STR_1
   855   0003C2  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   856   0003C4  EC11  F004         	call	_LCD_Write_String	;wreg free
   857   0003C8                     
   858                           ;System_FSM.c: 71:             LCD_Set_Cursor(2,1);
   859   0003C8  0E01               	movlw	1
   860   0003CA  6E11               	movwf	LCD_Set_Cursor@c^0,c
   861   0003CC  0E02               	movlw	2
   862   0003CE  EC83  F003         	call	_LCD_Set_Cursor
   863   0003D2                     
   864                           ;System_FSM.c: 72:             LCD_Write_String("System Init...\0");
   865   0003D2  0E39               	movlw	low STR_2
   866   0003D4  6E13               	movwf	LCD_Write_String@str^0,c
   867   0003D6  0E03               	movlw	high STR_2
   868   0003D8  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   869   0003DA  EC11  F004         	call	_LCD_Write_String	;wreg free
   870   0003DE                     
   871                           ;System_FSM.c: 74:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   872   0003DE  0E0B               	movlw	11
   873   0003E0  6E1A               	movwf	(??_FSM_begin+1)^0,c
   874   0003E2  0E26               	movlw	38
   875   0003E4  6E19               	movwf	??_FSM_begin^0,c
   876   0003E6  0E5E               	movlw	94
   877   0003E8                     u657:
   878   0003E8  2EE8               	decfsz	wreg,f,c
   879   0003EA  D7FE               	bra	u657
   880   0003EC  2E19               	decfsz	??_FSM_begin^0,f,c
   881   0003EE  D7FC               	bra	u657
   882   0003F0  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   883   0003F2  D7FA               	bra	u657
   884   0003F4                     
   885                           ;System_FSM.c: 76:             Timer0_start();
   886   0003F4  ECA7  F005         	call	_Timer0_start	;wreg free
   887   0003F8                     
   888                           ;System_FSM.c: 79:             set_state(IDLE_STATE);
   889   0003F8  0E01               	movlw	1
   890   0003FA  EC95  F005         	call	_set_state
   891                           
   892                           ;System_FSM.c: 81:             break;
   893   0003FE  EFA5  F002         	goto	l229
   894   000402                     l1618:
   895                           
   896                           ;System_FSM.c: 85:         {;System_FSM.c: 87:             UART2_send('S');
   897   000402  0E53               	movlw	83
   898   000404  EC3F  F005         	call	_UART2_send
   899   000408                     
   900                           ;System_FSM.c: 89:             LCD_Clear();
   901   000408  EC72  F005         	call	_LCD_Clear	;wreg free
   902   00040C                     
   903                           ;System_FSM.c: 90:             LCD_Set_Cursor(1,1);
   904   00040C  0E01               	movlw	1
   905   00040E  6E11               	movwf	LCD_Set_Cursor@c^0,c
   906   000410  0E01               	movlw	1
   907   000412  EC83  F003         	call	_LCD_Set_Cursor
   908   000416                     
   909                           ;System_FSM.c: 91:             LCD_Write_String(" >IDLE STATE<\0");
   910   000416  0E49               	movlw	low STR_3
   911   000418  6E13               	movwf	LCD_Write_String@str^0,c
   912   00041A  0E03               	movlw	high STR_3
   913   00041C  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   914   00041E  EC11  F004         	call	_LCD_Write_String	;wreg free
   915   000422                     
   916                           ;System_FSM.c: 93:             WaterPump_OFF();
   917   000422  EC91  F005         	call	_WaterPump_OFF	;wreg free
   918   000426                     
   919                           ;System_FSM.c: 94:             idle_status_led();
   920   000426  EC7E  F005         	call	_idle_status_led	;wreg free
   921   00042A                     l1630:
   922                           
   923                           ;System_FSM.c: 97:             while(get_current_state() == IDLE_STATE)
   924   00042A  ECA5  F005         	call	_get_current_state	;wreg free
   925   00042E  06E8               	decf	wreg,f,c
   926   000430  B4D8               	btfsc	status,2,c
   927   000432  EF1D  F002         	goto	u531
   928   000436  EF1F  F002         	goto	u530
   929   00043A                     u531:
   930   00043A  EF15  F002         	goto	l1630
   931   00043E                     u530:
   932   00043E  EFA5  F002         	goto	l229
   933   000442                     l1632:
   934                           
   935                           ;System_FSM.c: 106:         {;System_FSM.c: 108:             UART2_send('W');
   936   000442  0E57               	movlw	87
   937   000444  EC3F  F005         	call	_UART2_send
   938   000448                     
   939                           ;System_FSM.c: 110:             WaterPump_ON();
   940   000448  EC8D  F005         	call	_WaterPump_ON	;wreg free
   941   00044C                     
   942                           ;System_FSM.c: 111:             LCD_Clear();
   943   00044C  EC72  F005         	call	_LCD_Clear	;wreg free
   944   000450                     
   945                           ;System_FSM.c: 112:             LCD_Set_Cursor(1,1);
   946   000450  0E01               	movlw	1
   947   000452  6E11               	movwf	LCD_Set_Cursor@c^0,c
   948   000454  0E01               	movlw	1
   949   000456  EC83  F003         	call	_LCD_Set_Cursor
   950   00045A                     
   951                           ;System_FSM.c: 113:             LCD_Write_String(" >WATERING PLANTS<\0");
   952   00045A  0E01               	movlw	low STR_4
   953   00045C  6E13               	movwf	LCD_Write_String@str^0,c
   954   00045E  0E03               	movlw	high STR_4
   955   000460  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   956   000462  EC11  F004         	call	_LCD_Write_String	;wreg free
   957                           
   958                           ;System_FSM.c: 115:             while(get_current_state() == WATER_PLANTS)
   959   000466  EF37  F002         	goto	l1644
   960   00046A                     l1642:
   961                           
   962                           ;System_FSM.c: 116:             {;System_FSM.c: 117:               watering_status_led()
      +                          ;
   963   00046A  EC79  F005         	call	_watering_status_led	;wreg free
   964   00046E                     l1644:
   965                           
   966                           ;System_FSM.c: 115:             while(get_current_state() == WATER_PLANTS)
   967   00046E  ECA5  F005         	call	_get_current_state	;wreg free
   968   000472  0A02               	xorlw	2
   969   000474  B4D8               	btfsc	status,2,c
   970   000476  EF3F  F002         	goto	u541
   971   00047A  EF41  F002         	goto	u540
   972   00047E                     u541:
   973   00047E  EF35  F002         	goto	l1642
   974   000482                     u540:
   975   000482  EFA5  F002         	goto	l229
   976   000486                     l1646:
   977                           
   978                           ;System_FSM.c: 124:         {;System_FSM.c: 127:             UART2_send('M');
   979   000486  0E4D               	movlw	77
   980   000488  EC3F  F005         	call	_UART2_send
   981   00048C                     
   982                           ;System_FSM.c: 129:             LCD_Clear();
   983   00048C  EC72  F005         	call	_LCD_Clear	;wreg free
   984   000490                     
   985                           ;System_FSM.c: 130:             LCD_Set_Cursor(1,1);
   986   000490  0E01               	movlw	1
   987   000492  6E11               	movwf	LCD_Set_Cursor@c^0,c
   988   000494  0E01               	movlw	1
   989   000496  EC83  F003         	call	_LCD_Set_Cursor
   990   00049A                     
   991                           ;System_FSM.c: 131:             LCD_Write_String(" >CHECKING MOIST<\0");
   992   00049A  0E15               	movlw	low STR_5
   993   00049C  6E13               	movwf	LCD_Write_String@str^0,c
   994   00049E  0E03               	movlw	high STR_5
   995   0004A0  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   996   0004A2  EC11  F004         	call	_LCD_Write_String	;wreg free
   997   0004A6                     
   998                           ;System_FSM.c: 132:             WaterPump_OFF();
   999   0004A6  EC91  F005         	call	_WaterPump_OFF	;wreg free
  1000   0004AA                     
  1001                           ;System_FSM.c: 134:             checking_moisture_status_led();
  1002   0004AA  EC83  F005         	call	_checking_moisture_status_led	;wreg free
  1003   0004AE                     
  1004                           ;System_FSM.c: 135:             _delay((unsigned long)((1000)*(8000000/4000.0)));
  1005   0004AE  0E0B               	movlw	11
  1006   0004B0  6E1A               	movwf	(??_FSM_begin+1)^0,c
  1007   0004B2  0E26               	movlw	38
  1008   0004B4  6E19               	movwf	??_FSM_begin^0,c
  1009   0004B6  0E5E               	movlw	94
  1010   0004B8                     u667:
  1011   0004B8  2EE8               	decfsz	wreg,f,c
  1012   0004BA  D7FE               	bra	u667
  1013   0004BC  2E19               	decfsz	??_FSM_begin^0,f,c
  1014   0004BE  D7FC               	bra	u667
  1015   0004C0  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
  1016   0004C2  D7FA               	bra	u667
  1017   0004C4                     
  1018                           ;System_FSM.c: 137:             U16 moisture = SMS_Read_Moisture_Value();
  1019   0004C4  EC4A  F005         	call	_SMS_Read_Moisture_Value	;wreg free
  1020   0004C8  C011  F02B         	movff	?_SMS_Read_Moisture_Value,FSM_begin@moisture
  1021   0004CC  C012  F02C         	movff	?_SMS_Read_Moisture_Value+1,FSM_begin@moisture+1
  1022   0004D0                     
  1023                           ;System_FSM.c: 140:             if(moisture > 65000)
  1024   0004D0  0EE9               	movlw	233
  1025   0004D2  5C2B               	subwf	FSM_begin@moisture^0,w,c
  1026   0004D4  0EFD               	movlw	253
  1027   0004D6  582C               	subwfb	(FSM_begin@moisture+1)^0,w,c
  1028   0004D8  A0D8               	btfss	status,0,c
  1029   0004DA  EF71  F002         	goto	u551
  1030   0004DE  EF73  F002         	goto	u550
  1031   0004E2                     u551:
  1032   0004E2  EF77  F002         	goto	l1666
  1033   0004E6                     u550:
  1034   0004E6                     
  1035                           ;System_FSM.c: 141:                 moisture = 1000;
  1036   0004E6  0E03               	movlw	3
  1037   0004E8  6E2C               	movwf	(FSM_begin@moisture+1)^0,c
  1038   0004EA  0EE8               	movlw	232
  1039   0004EC  6E2B               	movwf	FSM_begin@moisture^0,c
  1040   0004EE                     l1666:
  1041                           
  1042                           ;System_FSM.c: 143:             UART2_send((U8)moisture);
  1043   0004EE  502B               	movf	FSM_begin@moisture^0,w,c
  1044   0004F0  EC3F  F005         	call	_UART2_send
  1045   0004F4                     
  1046                           ;System_FSM.c: 146:             SMS_Set_State(moisture);
  1047   0004F4  C02B  F010         	movff	FSM_begin@moisture,SMS_Set_State@moisture
  1048   0004F8  C02C  F011         	movff	FSM_begin@moisture+1,SMS_Set_State@moisture+1
  1049   0004FC  ECB4  F003         	call	_SMS_Set_State	;wreg free
  1050                           
  1051                           ;System_FSM.c: 148:             break;
  1052   000500  EFA5  F002         	goto	l229
  1053   000504                     l1670:
  1054                           
  1055                           ;System_FSM.c: 152:         {;System_FSM.c: 153:             set_state(INIT_STATE);
  1056   000504  0E00               	movlw	0
  1057   000506  EC95  F005         	call	_set_state
  1058                           
  1059                           ;System_FSM.c: 154:             break;
  1060   00050A  EFA5  F002         	goto	l229
  1061   00050E                     l1674:
  1062   00050E  ECA5  F005         	call	_get_current_state	;wreg free
  1063   000512  6E19               	movwf	??_FSM_begin^0,c
  1064   000514  6A1A               	clrf	(??_FSM_begin+1)^0,c
  1065                           
  1066                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1067                           ; Switch size 1, requested type "simple"
  1068                           ; Number of cases is 1, Range of values is 0 to 0
  1069                           ; switch strategies available:
  1070                           ; Name         Instructions Cycles
  1071                           ; simple_byte            4     3 (average)
  1072                           ;	Chosen strategy is simple_byte
  1073   000516  501A               	movf	(??_FSM_begin+1)^0,w,c
  1074   000518  0A00               	xorlw	0	; case 0
  1075   00051A  B4D8               	btfsc	status,2,c
  1076   00051C  EF92  F002         	goto	l1758
  1077   000520  EF82  F002         	goto	l1670
  1078   000524                     l1758:
  1079                           
  1080                           ; Switch size 1, requested type "simple"
  1081                           ; Number of cases is 4, Range of values is 0 to 3
  1082                           ; switch strategies available:
  1083                           ; Name         Instructions Cycles
  1084                           ; simple_byte           13     7 (average)
  1085                           ;	Chosen strategy is simple_byte
  1086   000524  5019               	movf	??_FSM_begin^0,w,c
  1087   000526  0A00               	xorlw	0	; case 0
  1088   000528  B4D8               	btfsc	status,2,c
  1089   00052A  EFAF  F001         	goto	l1584
  1090   00052E  0A01               	xorlw	1	; case 1
  1091   000530  B4D8               	btfsc	status,2,c
  1092   000532  EF01  F002         	goto	l1618
  1093   000536  0A03               	xorlw	3	; case 2
  1094   000538  B4D8               	btfsc	status,2,c
  1095   00053A  EF21  F002         	goto	l1632
  1096   00053E  0A01               	xorlw	1	; case 3
  1097   000540  B4D8               	btfsc	status,2,c
  1098   000542  EF43  F002         	goto	l1646
  1099   000546  EF82  F002         	goto	l1670
  1100   00054A                     l229:
  1101   00054A  0012               	return		;funcret
  1102   00054C                     __end_of_FSM_begin:
  1103                           	callstack 0
  1104                           
  1105 ;; *************** function _watering_status_led *****************
  1106 ;; Defined at:
  1107 ;;		line 40 in file "LedDriver.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;		None
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;		None
  1112 ;; Return value:  Size  Location     Type
  1113 ;;                  1    wreg      void 
  1114 ;; Registers used:
  1115 ;;		status,2, status,0
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1121 ;;      Params:         0       0       0       0
  1122 ;;      Locals:         0       0       0       0
  1123 ;;      Temps:          0       0       0       0
  1124 ;;      Totals:         0       0       0       0
  1125 ;;Total ram usage:        0 bytes
  1126 ;; Hardware stack levels used: 1
  1127 ;; Hardware stack levels required when called: 4
  1128 ;; This function calls:
  1129 ;;		Nothing
  1130 ;; This function is called by:
  1131 ;;		_FSM_begin
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text5
  1136   000AF2                     __ptext5:
  1137                           	callstack 0
  1138   000AF2                     _watering_status_led:
  1139                           	callstack 25
  1140   000AF2                     
  1141                           ;LedDriver.c: 42:     (((LATD))|=((0x01)));
  1142   000AF2  808C               	bsf	140,0,c	;volatile
  1143                           
  1144                           ;LedDriver.c: 44:     (((LATC))&=(~((0x02))));
  1145   000AF4  928B               	bcf	139,1,c	;volatile
  1146                           
  1147                           ;LedDriver.c: 45:     (((LATC))&=(~((0x04))));
  1148   000AF6  948B               	bcf	139,2,c	;volatile
  1149                           
  1150                           ;LedDriver.c: 46:     (((LATD))&=(~((0x02))));
  1151   000AF8  928C               	bcf	140,1,c	;volatile
  1152   000AFA  0012               	return		;funcret
  1153   000AFC                     __end_of_watering_status_led:
  1154                           	callstack 0
  1155                           
  1156 ;; *************** function _init_leds *****************
  1157 ;; Defined at:
  1158 ;;		line 12 in file "LedDriver.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;		None
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1172 ;;      Params:         0       0       0       0
  1173 ;;      Locals:         0       0       0       0
  1174 ;;      Temps:          2       0       0       0
  1175 ;;      Totals:         2       0       0       0
  1176 ;;Total ram usage:        2 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; Hardware stack levels required when called: 4
  1179 ;; This function calls:
  1180 ;;		Nothing
  1181 ;; This function is called by:
  1182 ;;		_FSM_begin
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text6
  1187   000986                     __ptext6:
  1188                           	callstack 0
  1189   000986                     _init_leds:
  1190                           	callstack 25
  1191   000986                     
  1192                           ;LedDriver.c: 14:     (((TRISC))&=(~((0x02))));
  1193   000986  9294               	bcf	148,1,c	;volatile
  1194                           
  1195                           ;LedDriver.c: 15:     (((TRISC))&=(~((0x04))));
  1196   000988  9494               	bcf	148,2,c	;volatile
  1197                           
  1198                           ;LedDriver.c: 16:     (((TRISD))&=(~((0x02))));
  1199   00098A  9295               	bcf	149,1,c	;volatile
  1200                           
  1201                           ;LedDriver.c: 17:     (((TRISD))&=(~((0x01))));
  1202   00098C  9095               	bcf	149,0,c	;volatile
  1203                           
  1204                           ;LedDriver.c: 19:     (((LATC))|=((0x02)));
  1205   00098E  828B               	bsf	139,1,c	;volatile
  1206                           
  1207                           ;LedDriver.c: 20:     (((LATC))|=((0x04)));
  1208   000990  848B               	bsf	139,2,c	;volatile
  1209                           
  1210                           ;LedDriver.c: 21:     (((LATD))|=((0x02)));
  1211   000992  828C               	bsf	140,1,c	;volatile
  1212                           
  1213                           ;LedDriver.c: 22:     (((LATD))|=((0x01)));
  1214   000994  808C               	bsf	140,0,c	;volatile
  1215   000996                     
  1216                           ;LedDriver.c: 24:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1217   000996  0E0B               	movlw	11
  1218   000998  6E10               	movwf	(??_init_leds+1)^0,c
  1219   00099A  0E26               	movlw	38
  1220   00099C  6E0F               	movwf	??_init_leds^0,c
  1221   00099E  0E5E               	movlw	94
  1222   0009A0                     u677:
  1223   0009A0  2EE8               	decfsz	wreg,f,c
  1224   0009A2  D7FE               	bra	u677
  1225   0009A4  2E0F               	decfsz	??_init_leds^0,f,c
  1226   0009A6  D7FC               	bra	u677
  1227   0009A8  2E10               	decfsz	(??_init_leds+1)^0,f,c
  1228   0009AA  D7FA               	bra	u677
  1229   0009AC                     
  1230                           ;LedDriver.c: 26:     (((LATC))&=(~((0x02))));
  1231   0009AC  928B               	bcf	139,1,c	;volatile
  1232   0009AE                     
  1233                           ;LedDriver.c: 27:     (((LATC))&=(~((0x04))));
  1234   0009AE  948B               	bcf	139,2,c	;volatile
  1235   0009B0                     
  1236                           ;LedDriver.c: 28:     (((LATD))&=(~((0x02))));
  1237   0009B0  928C               	bcf	140,1,c	;volatile
  1238   0009B2                     
  1239                           ;LedDriver.c: 29:     (((LATD))&=(~((0x01))));
  1240   0009B2  908C               	bcf	140,0,c	;volatile
  1241   0009B4  0012               	return		;funcret
  1242   0009B6                     __end_of_init_leds:
  1243                           	callstack 0
  1244                           
  1245 ;; *************** function _idle_status_led *****************
  1246 ;; Defined at:
  1247 ;;		line 32 in file "LedDriver.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		status,2, status,0
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1261 ;;      Params:         0       0       0       0
  1262 ;;      Locals:         0       0       0       0
  1263 ;;      Temps:          0       0       0       0
  1264 ;;      Totals:         0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 4
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_FSM_begin
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text7
  1276   000AFC                     __ptext7:
  1277                           	callstack 0
  1278   000AFC                     _idle_status_led:
  1279                           	callstack 25
  1280   000AFC                     
  1281                           ;LedDriver.c: 34:     (((LATC))|=((0x04)));
  1282   000AFC  848B               	bsf	139,2,c	;volatile
  1283                           
  1284                           ;LedDriver.c: 36:     (((LATC))&=(~((0x02))));
  1285   000AFE  928B               	bcf	139,1,c	;volatile
  1286                           
  1287                           ;LedDriver.c: 37:     (((LATD))&=(~((0x01))));
  1288   000B00  908C               	bcf	140,0,c	;volatile
  1289                           
  1290                           ;LedDriver.c: 38:     (((LATD))&=(~((0x02))));
  1291   000B02  928C               	bcf	140,1,c	;volatile
  1292   000B04  0012               	return		;funcret
  1293   000B06                     __end_of_idle_status_led:
  1294                           	callstack 0
  1295                           
  1296 ;; *************** function _get_current_state *****************
  1297 ;; Defined at:
  1298 ;;		line 5 in file "FSM_states.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      enum E2
  1305 ;; Registers used:
  1306 ;;		wreg, status,2
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1312 ;;      Params:         0       0       0       0
  1313 ;;      Locals:         0       0       0       0
  1314 ;;      Temps:          0       0       0       0
  1315 ;;      Totals:         0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; Hardware stack levels required when called: 4
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_FSM_begin
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text8
  1327   000B4A                     __ptext8:
  1328                           	callstack 0
  1329   000B4A                     _get_current_state:
  1330                           	callstack 25
  1331   000B4A                     
  1332                           ;FSM_states.c: 7:     return FSM_state;
  1333   000B4A  5047               	movf	_FSM_state^0,w,c
  1334   000B4C  0012               	return		;funcret
  1335   000B4E                     __end_of_get_current_state:
  1336                           	callstack 0
  1337                           
  1338 ;; *************** function _checking_moisture_status_led *****************
  1339 ;; Defined at:
  1340 ;;		line 49 in file "LedDriver.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;		None
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		status,2, status,0
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1354 ;;      Params:         0       0       0       0
  1355 ;;      Locals:         0       0       0       0
  1356 ;;      Temps:          0       0       0       0
  1357 ;;      Totals:         0       0       0       0
  1358 ;;Total ram usage:        0 bytes
  1359 ;; Hardware stack levels used: 1
  1360 ;; Hardware stack levels required when called: 4
  1361 ;; This function calls:
  1362 ;;		Nothing
  1363 ;; This function is called by:
  1364 ;;		_FSM_begin
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text9
  1369   000B06                     __ptext9:
  1370                           	callstack 0
  1371   000B06                     _checking_moisture_status_led:
  1372                           	callstack 25
  1373   000B06                     
  1374                           ;LedDriver.c: 51:     (((LATD))|=((0x02)));
  1375   000B06  828C               	bsf	140,1,c	;volatile
  1376                           
  1377                           ;LedDriver.c: 53:     (((LATC))&=(~((0x02))));
  1378   000B08  928B               	bcf	139,1,c	;volatile
  1379                           
  1380                           ;LedDriver.c: 54:     (((LATC))&=(~((0x04))));
  1381   000B0A  948B               	bcf	139,2,c	;volatile
  1382                           
  1383                           ;LedDriver.c: 55:     (((LATD))&=(~((0x01))));
  1384   000B0C  908C               	bcf	140,0,c	;volatile
  1385   000B0E  0012               	return		;funcret
  1386   000B10                     __end_of_checking_moisture_status_led:
  1387                           	callstack 0
  1388                           
  1389 ;; *************** function _WaterPump_ON *****************
  1390 ;; Defined at:
  1391 ;;		line 25 in file "WaterPump_Driver.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1405 ;;      Params:         0       0       0       0
  1406 ;;      Locals:         0       0       0       0
  1407 ;;      Temps:          0       0       0       0
  1408 ;;      Totals:         0       0       0       0
  1409 ;;Total ram usage:        0 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; Hardware stack levels required when called: 4
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_FSM_begin
  1416 ;;		_WaterPump_Toggle
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text10
  1421   000B1A                     __ptext10:
  1422                           	callstack 0
  1423   000B1A                     _WaterPump_ON:
  1424                           	callstack 25
  1425   000B1A                     
  1426                           ;WaterPump_Driver.c: 27:     (((LATD))|=((0x04)));
  1427   000B1A  848C               	bsf	140,2,c	;volatile
  1428   000B1C                     
  1429                           ;WaterPump_Driver.c: 28:     pump_status = PUMP_ON;
  1430   000B1C  0E00               	movlw	0
  1431   000B1E  6E45               	movwf	_pump_status^0,c
  1432   000B20  0012               	return		;funcret
  1433   000B22                     __end_of_WaterPump_ON:
  1434                           	callstack 0
  1435                           
  1436 ;; *************** function _WaterPump_OFF *****************
  1437 ;; Defined at:
  1438 ;;		line 31 in file "WaterPump_Driver.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;		None
  1443 ;; Return value:  Size  Location     Type
  1444 ;;                  1    wreg      void 
  1445 ;; Registers used:
  1446 ;;		wreg, status,2, status,0
  1447 ;; Tracked objects:
  1448 ;;		On entry : 0/0
  1449 ;;		On exit  : 0/0
  1450 ;;		Unchanged: 0/0
  1451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1452 ;;      Params:         0       0       0       0
  1453 ;;      Locals:         0       0       0       0
  1454 ;;      Temps:          0       0       0       0
  1455 ;;      Totals:         0       0       0       0
  1456 ;;Total ram usage:        0 bytes
  1457 ;; Hardware stack levels used: 1
  1458 ;; Hardware stack levels required when called: 4
  1459 ;; This function calls:
  1460 ;;		Nothing
  1461 ;; This function is called by:
  1462 ;;		_FSM_begin
  1463 ;;		_WaterPump_Toggle
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text11
  1468   000B22                     __ptext11:
  1469                           	callstack 0
  1470   000B22                     _WaterPump_OFF:
  1471                           	callstack 25
  1472   000B22                     
  1473                           ;WaterPump_Driver.c: 33:     (((LATD))&=(~((0x04))));
  1474   000B22  948C               	bcf	140,2,c	;volatile
  1475   000B24                     
  1476                           ;WaterPump_Driver.c: 34:     pump_status = PUMP_OFF;
  1477   000B24  0E01               	movlw	1
  1478   000B26  6E45               	movwf	_pump_status^0,c
  1479   000B28  0012               	return		;funcret
  1480   000B2A                     __end_of_WaterPump_OFF:
  1481                           	callstack 0
  1482                           
  1483 ;; *************** function _WaterPump_Init *****************
  1484 ;; Defined at:
  1485 ;;		line 17 in file "WaterPump_Driver.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1499 ;;      Params:         0       0       0       0
  1500 ;;      Locals:         0       0       0       0
  1501 ;;      Temps:          0       0       0       0
  1502 ;;      Totals:         0       0       0       0
  1503 ;;Total ram usage:        0 bytes
  1504 ;; Hardware stack levels used: 1
  1505 ;; Hardware stack levels required when called: 4
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_FSM_begin
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text12
  1514   000B10                     __ptext12:
  1515                           	callstack 0
  1516   000B10                     _WaterPump_Init:
  1517                           	callstack 25
  1518   000B10                     
  1519                           ;WaterPump_Driver.c: 19:     (((TRISD))&=(~((0x04))));
  1520   000B10  9495               	bcf	149,2,c	;volatile
  1521                           
  1522                           ;WaterPump_Driver.c: 20:     (((LATD))&=(~((0x04))));
  1523   000B12  948C               	bcf	140,2,c	;volatile
  1524   000B14                     
  1525                           ;WaterPump_Driver.c: 21:     pump_status = PUMP_OFF;
  1526   000B14  0E01               	movlw	1
  1527   000B16  6E45               	movwf	_pump_status^0,c
  1528   000B18  0012               	return		;funcret
  1529   000B1A                     __end_of_WaterPump_Init:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _UART2_send *****************
  1533 ;; Defined at:
  1534 ;;		line 33 in file "PIC18F4331_UART2.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  data            1    wreg     unsigned char 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  data            1   14[COMRAM] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1548 ;;      Params:         0       0       0       0
  1549 ;;      Locals:         1       0       0       0
  1550 ;;      Temps:          0       0       0       0
  1551 ;;      Totals:         1       0       0       0
  1552 ;;Total ram usage:        1 bytes
  1553 ;; Hardware stack levels used: 1
  1554 ;; Hardware stack levels required when called: 4
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_FSM_begin
  1559 ;;		_putch
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text13
  1564   000A7E                     __ptext13:
  1565                           	callstack 0
  1566   000A7E                     _UART2_send:
  1567                           	callstack 25
  1568                           
  1569                           ;incstack = 0
  1570                           ;UART2_send@data stored from wreg
  1571   000A7E  6E0F               	movwf	UART2_send@data^0,c
  1572   000A80                     l351:
  1573                           
  1574                           ;PIC18F4331_UART2.c: 35:     while(0 == PIR1bits.TXIF)
  1575   000A80  A89E               	btfss	158,4,c	;volatile
  1576   000A82  EF45  F005         	goto	u201
  1577   000A86  EF47  F005         	goto	u200
  1578   000A8A                     u201:
  1579   000A8A  EF40  F005         	goto	l351
  1580   000A8E                     u200:
  1581   000A8E                     
  1582                           ;PIC18F4331_UART2.c: 40:     TXREG = data;
  1583   000A8E  C00F  FFAD         	movff	UART2_send@data,4013	;volatile
  1584   000A92  0012               	return		;funcret
  1585   000A94                     __end_of_UART2_send:
  1586                           	callstack 0
  1587                           
  1588 ;; *************** function _Timer0_start *****************
  1589 ;; Defined at:
  1590 ;;		line 86 in file "PIC18F4331_Timer.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;		None
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		None
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1604 ;;      Params:         0       0       0       0
  1605 ;;      Locals:         0       0       0       0
  1606 ;;      Temps:          0       0       0       0
  1607 ;;      Totals:         0       0       0       0
  1608 ;;Total ram usage:        0 bytes
  1609 ;; Hardware stack levels used: 1
  1610 ;; Hardware stack levels required when called: 4
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_FSM_begin
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text14
  1619   000B4E                     __ptext14:
  1620                           	callstack 0
  1621   000B4E                     _Timer0_start:
  1622                           	callstack 25
  1623   000B4E                     
  1624                           ;PIC18F4331_Timer.c: 88:     T0CONbits.TMR0ON = 1;
  1625   000B4E  8ED5               	bsf	213,7,c	;volatile
  1626   000B50  0012               	return		;funcret
  1627   000B52                     __end_of_Timer0_start:
  1628                           	callstack 0
  1629                           
  1630 ;; *************** function _SMS_init *****************
  1631 ;; Defined at:
  1632 ;;		line 8 in file "SoilMoistureSensor.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;		None
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  1    wreg      void 
  1639 ;; Registers used:
  1640 ;;		wreg, status,2, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1646 ;;      Params:         0       0       0       0
  1647 ;;      Locals:         0       0       0       0
  1648 ;;      Temps:          0       0       0       0
  1649 ;;      Totals:         0       0       0       0
  1650 ;;Total ram usage:        0 bytes
  1651 ;; Hardware stack levels used: 1
  1652 ;; Hardware stack levels required when called: 6
  1653 ;; This function calls:
  1654 ;;		_ADC_init
  1655 ;; This function is called by:
  1656 ;;		_FSM_begin
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text15
  1661   000B3A                     __ptext15:
  1662                           	callstack 0
  1663   000B3A                     _SMS_init:
  1664                           	callstack 23
  1665   000B3A                     
  1666                           ;SoilMoistureSensor.c: 10:     ADC_init();
  1667   000B3A  ECFE  F004         	call	_ADC_init	;wreg free
  1668   000B3E  0012               	return		;funcret
  1669   000B40                     __end_of_SMS_init:
  1670                           	callstack 0
  1671                           
  1672 ;; *************** function _ADC_init *****************
  1673 ;; Defined at:
  1674 ;;		line 24 in file "PIC18F4331_ADC.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1688 ;;      Params:         0       0       0       0
  1689 ;;      Locals:         0       0       0       0
  1690 ;;      Temps:          0       0       0       0
  1691 ;;      Totals:         0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used: 1
  1694 ;; Hardware stack levels required when called: 5
  1695 ;; This function calls:
  1696 ;;		_ADC_stop
  1697 ;; This function is called by:
  1698 ;;		_SMS_init
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           	psect	text16
  1703   0009FC                     __ptext16:
  1704                           	callstack 0
  1705   0009FC                     _ADC_init:
  1706                           	callstack 23
  1707   0009FC                     
  1708                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
  1709   0009FC  ECA9  F005         	call	_ADC_stop	;wreg free
  1710   000A00                     
  1711                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
  1712   000A00  0E3F               	movlw	-193
  1713   000A02  16C1               	andwf	193,f,c	;volatile
  1714   000A04                     
  1715                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
  1716   000A04  9099               	bcf	153,0,c	;volatile
  1717   000A06                     
  1718                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
  1719   000A06  9299               	bcf	153,1,c	;volatile
  1720   000A08                     
  1721                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
  1722   000A08  9AC2               	bcf	194,5,c	;volatile
  1723   000A0A                     
  1724                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
  1725   000A0A  0EF8               	movlw	-8
  1726   000A0C  16C0               	andwf	192,f,c	;volatile
  1727   000A0E                     
  1728                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
  1729   000A0E  8EC0               	bsf	192,7,c	;volatile
  1730   000A10                     
  1731                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
  1732   000A10  0E87               	movlw	-121
  1733   000A12  16C0               	andwf	192,f,c	;volatile
  1734   000A14                     
  1735                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
  1736   000A14  80B8               	bsf	184,0,c	;volatile
  1737   000A16  0012               	return		;funcret
  1738   000A18                     __end_of_ADC_init:
  1739                           	callstack 0
  1740                           
  1741 ;; *************** function _ADC_stop *****************
  1742 ;; Defined at:
  1743 ;;		line 19 in file "PIC18F4331_ADC.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		None
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1757 ;;      Params:         0       0       0       0
  1758 ;;      Locals:         0       0       0       0
  1759 ;;      Temps:          0       0       0       0
  1760 ;;      Totals:         0       0       0       0
  1761 ;;Total ram usage:        0 bytes
  1762 ;; Hardware stack levels used: 1
  1763 ;; Hardware stack levels required when called: 4
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_ADC_init
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text17
  1772   000B52                     __ptext17:
  1773                           	callstack 0
  1774   000B52                     _ADC_stop:
  1775                           	callstack 23
  1776   000B52                     
  1777                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1778   000B52  90C2               	bcf	194,0,c	;volatile
  1779   000B54  0012               	return		;funcret
  1780   000B56                     __end_of_ADC_stop:
  1781                           	callstack 0
  1782                           
  1783 ;; *************** function _SMS_Set_State *****************
  1784 ;; Defined at:
  1785 ;;		line 19 in file "SoilMoistureSensor.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  moisture        2   15[COMRAM] unsigned short 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;		None
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, status,2, status,0, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1799 ;;      Params:         2       0       0       0
  1800 ;;      Locals:         0       0       0       0
  1801 ;;      Temps:          0       0       0       0
  1802 ;;      Totals:         2       0       0       0
  1803 ;;Total ram usage:        2 bytes
  1804 ;; Hardware stack levels used: 1
  1805 ;; Hardware stack levels required when called: 5
  1806 ;; This function calls:
  1807 ;;		_set_state
  1808 ;; This function is called by:
  1809 ;;		_FSM_begin
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text18
  1814   000768                     __ptext18:
  1815                           	callstack 0
  1816   000768                     _SMS_Set_State:
  1817                           	callstack 24
  1818   000768                     
  1819                           ;SoilMoistureSensor.c: 19: void SMS_Set_State(U16 moisture);SoilMoistureSensor.c: 20: {;
      +                          SoilMoistureSensor.c: 21:     if(moisture >= (595))
  1820   000768  0E53               	movlw	83
  1821   00076A  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1822   00076C  0E02               	movlw	2
  1823   00076E  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1824   000770  A0D8               	btfss	status,0,c
  1825   000772  EFBD  F003         	goto	u411
  1826   000776  EFBF  F003         	goto	u410
  1827   00077A                     u411:
  1828   00077A  EFC4  F003         	goto	l1538
  1829   00077E                     u410:
  1830   00077E                     
  1831                           ;SoilMoistureSensor.c: 22:     {;SoilMoistureSensor.c: 23:         set_state(WATER_PLANT
      +                          S);
  1832   00077E  0E02               	movlw	2
  1833   000780  EC95  F005         	call	_set_state
  1834                           
  1835                           ;SoilMoistureSensor.c: 24:     }
  1836   000784  EFE2  F003         	goto	l150
  1837   000788                     l1538:
  1838   000788  5011               	movf	(SMS_Set_State@moisture+1)^0,w,c
  1839   00078A  E109               	bnz	u420
  1840   00078C  0EEF               	movlw	239
  1841   00078E  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1842   000790  A0D8               	btfss	status,0,c
  1843   000792  EFCD  F003         	goto	u421
  1844   000796  EFCF  F003         	goto	u420
  1845   00079A                     u421:
  1846   00079A  EFDF  F003         	goto	l1544
  1847   00079E                     u420:
  1848   00079E  0E53               	movlw	83
  1849   0007A0  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1850   0007A2  0E02               	movlw	2
  1851   0007A4  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1852   0007A6  B0D8               	btfsc	status,0,c
  1853   0007A8  EFD8  F003         	goto	u431
  1854   0007AC  EFDA  F003         	goto	u430
  1855   0007B0                     u431:
  1856   0007B0  EFDF  F003         	goto	l1544
  1857   0007B4                     u430:
  1858   0007B4                     
  1859                           ;SoilMoistureSensor.c: 26:     {;SoilMoistureSensor.c: 28:         set_state(IDLE_STATE)
      +                          ;
  1860   0007B4  0E01               	movlw	1
  1861   0007B6  EC95  F005         	call	_set_state
  1862                           
  1863                           ;SoilMoistureSensor.c: 29:     }
  1864   0007BA  EFE2  F003         	goto	l150
  1865   0007BE                     l1544:
  1866                           
  1867                           ;SoilMoistureSensor.c: 31:     {;SoilMoistureSensor.c: 32:         set_state(IDLE_STATE)
      +                          ;
  1868   0007BE  0E01               	movlw	1
  1869   0007C0  EC95  F005         	call	_set_state
  1870   0007C4                     l150:
  1871   0007C4  0012               	return		;funcret
  1872   0007C6                     __end_of_SMS_Set_State:
  1873                           	callstack 0
  1874                           
  1875 ;; *************** function _set_state *****************
  1876 ;; Defined at:
  1877 ;;		line 9 in file "FSM_states.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;  state_to_set    1    wreg     enum E2
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  state_to_set    1   14[COMRAM] enum E2
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  1    wreg      void 
  1884 ;; Registers used:
  1885 ;;		wreg
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1891 ;;      Params:         0       0       0       0
  1892 ;;      Locals:         1       0       0       0
  1893 ;;      Temps:          0       0       0       0
  1894 ;;      Totals:         1       0       0       0
  1895 ;;Total ram usage:        1 bytes
  1896 ;; Hardware stack levels used: 1
  1897 ;; Hardware stack levels required when called: 4
  1898 ;; This function calls:
  1899 ;;		Nothing
  1900 ;; This function is called by:
  1901 ;;		_main
  1902 ;;		_SMS_Set_State
  1903 ;;		_FSM_begin
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text19
  1908   000B2A                     __ptext19:
  1909                           	callstack 0
  1910   000B2A                     _set_state:
  1911                           	callstack 26
  1912                           
  1913                           ;incstack = 0
  1914                           ;set_state@state_to_set stored from wreg
  1915   000B2A  6E0F               	movwf	set_state@state_to_set^0,c
  1916   000B2C                     
  1917                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  1918   000B2C  C00F  F047         	movff	set_state@state_to_set,_FSM_state
  1919   000B30  0012               	return		;funcret
  1920   000B32                     __end_of_set_state:
  1921                           	callstack 0
  1922                           
  1923 ;; *************** function _SMS_Read_Moisture_Value *****************
  1924 ;; Defined at:
  1925 ;;		line 13 in file "SoilMoistureSensor.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;		None
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  moisture        2   18[COMRAM] unsigned short 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  2   16[COMRAM] unsigned short 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, cstack
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1939 ;;      Params:         2       0       0       0
  1940 ;;      Locals:         2       0       0       0
  1941 ;;      Temps:          0       0       0       0
  1942 ;;      Totals:         4       0       0       0
  1943 ;;Total ram usage:        4 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; Hardware stack levels required when called: 6
  1946 ;; This function calls:
  1947 ;;		_ADC_Read
  1948 ;; This function is called by:
  1949 ;;		_FSM_begin
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text20
  1954   000A94                     __ptext20:
  1955                           	callstack 0
  1956   000A94                     _SMS_Read_Moisture_Value:
  1957                           	callstack 23
  1958   000A94                     
  1959                           ;SoilMoistureSensor.c: 15:     U16 moisture = ADC_Read();
  1960   000A94  ECDB  F004         	call	_ADC_Read	;wreg free
  1961   000A98  C00F  F013         	movff	?_ADC_Read,SMS_Read_Moisture_Value@moisture
  1962   000A9C  C010  F014         	movff	?_ADC_Read+1,SMS_Read_Moisture_Value@moisture+1
  1963   000AA0                     
  1964                           ;SoilMoistureSensor.c: 16:     return moisture;
  1965   000AA0  C013  F011         	movff	SMS_Read_Moisture_Value@moisture,?_SMS_Read_Moisture_Value
  1966   000AA4  C014  F012         	movff	SMS_Read_Moisture_Value@moisture+1,?_SMS_Read_Moisture_Value+1
  1967   000AA8  0012               	return		;funcret
  1968   000AAA                     __end_of_SMS_Read_Moisture_Value:
  1969                           	callstack 0
  1970                           
  1971 ;; *************** function _ADC_Read *****************
  1972 ;; Defined at:
  1973 ;;		line 60 in file "PIC18F4331_ADC.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  2   14[COMRAM] unsigned short 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1987 ;;      Params:         2       0       0       0
  1988 ;;      Locals:         0       0       0       0
  1989 ;;      Temps:          0       0       0       0
  1990 ;;      Totals:         2       0       0       0
  1991 ;;Total ram usage:        2 bytes
  1992 ;; Hardware stack levels used: 1
  1993 ;; Hardware stack levels required when called: 5
  1994 ;; This function calls:
  1995 ;;		_ADC_in_progress
  1996 ;;		_ADC_start
  1997 ;; This function is called by:
  1998 ;;		_SMS_Read_Moisture_Value
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text21
  2003   0009B6                     __ptext21:
  2004                           	callstack 0
  2005   0009B6                     _ADC_Read:
  2006                           	callstack 23
  2007   0009B6                     
  2008                           ;PIC18F4331_ADC.c: 62:     ADC_start();
  2009   0009B6  ECA0  F005         	call	_ADC_start	;wreg free
  2010   0009BA                     l1496:
  2011   0009BA  EC60  F005         	call	_ADC_in_progress	;wreg free
  2012   0009BE  0900               	iorlw	0
  2013   0009C0  A4D8               	btfss	status,2,c
  2014   0009C2  EFE5  F004         	goto	u371
  2015   0009C6  EFE7  F004         	goto	u370
  2016   0009CA                     u371:
  2017   0009CA  EFDD  F004         	goto	l1496
  2018   0009CE                     u370:
  2019   0009CE                     
  2020                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
  2021   0009CE  CFC4 F042          	movff	4036,_ADC+1	;volatile
  2022                           
  2023                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
  2024   0009D2  CFC3 F041          	movff	4035,_ADC	;volatile
  2025                           
  2026                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
  2027   0009D6  C041  F00F         	movff	_ADC,?_ADC_Read
  2028   0009DA  C042  F010         	movff	_ADC+1,?_ADC_Read+1
  2029   0009DE  0012               	return		;funcret
  2030   0009E0                     __end_of_ADC_Read:
  2031                           	callstack 0
  2032                           
  2033 ;; *************** function _ADC_start *****************
  2034 ;; Defined at:
  2035 ;;		line 13 in file "PIC18F4331_ADC.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;		None
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		None
  2044 ;; Tracked objects:
  2045 ;;		On entry : 0/0
  2046 ;;		On exit  : 0/0
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2049 ;;      Params:         0       0       0       0
  2050 ;;      Locals:         0       0       0       0
  2051 ;;      Temps:          0       0       0       0
  2052 ;;      Totals:         0       0       0       0
  2053 ;;Total ram usage:        0 bytes
  2054 ;; Hardware stack levels used: 1
  2055 ;; Hardware stack levels required when called: 4
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_ADC_Read
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text22
  2064   000B40                     __ptext22:
  2065                           	callstack 0
  2066   000B40                     _ADC_start:
  2067                           	callstack 23
  2068   000B40                     
  2069                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
  2070   000B40  80C2               	bsf	194,0,c	;volatile
  2071                           
  2072                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
  2073   000B42  82C2               	bsf	194,1,c	;volatile
  2074   000B44  0012               	return		;funcret
  2075   000B46                     __end_of_ADC_start:
  2076                           	callstack 0
  2077                           
  2078 ;; *************** function _ADC_in_progress *****************
  2079 ;; Defined at:
  2080 ;;		line 53 in file "PIC18F4331_ADC.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;		None
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;		None
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      unsigned char 
  2087 ;; Registers used:
  2088 ;;		wreg
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2094 ;;      Params:         0       0       0       0
  2095 ;;      Locals:         0       0       0       0
  2096 ;;      Temps:          0       0       0       0
  2097 ;;      Totals:         0       0       0       0
  2098 ;;Total ram usage:        0 bytes
  2099 ;; Hardware stack levels used: 1
  2100 ;; Hardware stack levels required when called: 4
  2101 ;; This function calls:
  2102 ;;		Nothing
  2103 ;; This function is called by:
  2104 ;;		_ADC_Read
  2105 ;; This function uses a non-reentrant model
  2106 ;;
  2107                           
  2108                           	psect	text23
  2109   000AC0                     __ptext23:
  2110                           	callstack 0
  2111   000AC0                     _ADC_in_progress:
  2112                           	callstack 23
  2113   000AC0                     
  2114                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
  2115   000AC0  B2C2               	btfsc	194,1,c	;volatile
  2116   000AC2  EF65  F005         	goto	u11
  2117   000AC6  EF68  F005         	goto	u10
  2118   000ACA                     u11:
  2119   000ACA  0E01               	movlw	1
  2120   000ACC  EF69  F005         	goto	u16
  2121   000AD0                     u10:
  2122   000AD0  0E00               	movlw	0
  2123   000AD2                     u16:
  2124   000AD2  0012               	return		;funcret
  2125   000AD4                     __end_of_ADC_in_progress:
  2126                           	callstack 0
  2127                           
  2128 ;; *************** function _Register_Callback *****************
  2129 ;; Defined at:
  2130 ;;		line 47 in file "SystemCallbacks.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;  config          2   16[COMRAM] PTR struct .
  2133 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      unsigned char 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2145 ;;      Params:         2       0       0       0
  2146 ;;      Locals:         0       0       0       0
  2147 ;;      Temps:          2       0       0       0
  2148 ;;      Totals:         4       0       0       0
  2149 ;;Total ram usage:        4 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 5
  2152 ;; This function calls:
  2153 ;;		_Reset_Counter
  2154 ;; This function is called by:
  2155 ;;		_FSM_begin
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text24
  2160   000614                     __ptext24:
  2161                           	callstack 0
  2162   000614                     _Register_Callback:
  2163                           	callstack 24
  2164   000614                     
  2165                           ;SystemCallbacks.c: 47: U8 Register_Callback(Callback_Config_t *config);SystemCallbacks.
      +                          c: 48: {;SystemCallbacks.c: 49:     if(callback_count < (5))
  2166   000614  0E05               	movlw	5
  2167   000616  6046               	cpfslt	_callback_count^0,c
  2168   000618  EF10  F003         	goto	u471
  2169   00061C  EF12  F003         	goto	u470
  2170   000620                     u471:
  2171   000620  EF46  F003         	goto	l256
  2172   000624                     u470:
  2173   000624                     
  2174                           ;SystemCallbacks.c: 50:     {;SystemCallbacks.c: 51:         if(config->callback != ((vo
      +                          id*)0) && config->expiry_time > 0)
  2175   000624  EE20 F002          	lfsr	2,2
  2176   000628  5011               	movf	Register_Callback@config^0,w,c
  2177   00062A  26D9               	addwf	fsr2l,f,c
  2178   00062C  5012               	movf	(Register_Callback@config+1)^0,w,c
  2179   00062E  22DA               	addwfc	fsr2h,f,c
  2180   000630  50DE               	movf	postinc2,w,c
  2181   000632  10DE               	iorwf	postinc2,w,c
  2182   000634  B4D8               	btfsc	status,2,c
  2183   000636  EF1F  F003         	goto	u481
  2184   00063A  EF21  F003         	goto	u480
  2185   00063E                     u481:
  2186   00063E  EF46  F003         	goto	l256
  2187   000642                     u480:
  2188   000642  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2189   000646  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2190   00064A  50DE               	movf	postinc2,w,c
  2191   00064C  10DE               	iorwf	postinc2,w,c
  2192   00064E  B4D8               	btfsc	status,2,c
  2193   000650  EF2C  F003         	goto	u491
  2194   000654  EF2E  F003         	goto	u490
  2195   000658                     u491:
  2196   000658  EF46  F003         	goto	l256
  2197   00065C                     u490:
  2198   00065C                     
  2199                           ;SystemCallbacks.c: 52:         {;SystemCallbacks.c: 54:             registered_callback
      +                          s[callback_count] = (*config);
  2200   00065C  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2201   000660  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2202   000664  5046               	movf	_callback_count^0,w,c
  2203   000666  0D08               	mullw	8
  2204   000668  0E60               	movlw	low _registered_callbacks
  2205   00066A  24F3               	addwf	243,w,c
  2206   00066C  6EE1               	movwf	fsr1l,c
  2207   00066E  0E00               	movlw	high _registered_callbacks
  2208   000670  20F4               	addwfc	prodh,w,c
  2209   000672  6EE2               	movwf	fsr1h,c
  2210   000674  0E07               	movlw	7
  2211   000676                     u501:
  2212   000676  CFDB FFE3          	movff	plusw2,plusw1
  2213   00067A  06E8               	decf	wreg,f,c
  2214   00067C  E2FC               	bc	u501
  2215   00067E                     
  2216                           ;SystemCallbacks.c: 55:             Reset_Counter(config);
  2217   00067E  C011  F00F         	movff	Register_Callback@config,Reset_Counter@config
  2218   000682  C012  F010         	movff	Register_Callback@config+1,Reset_Counter@config+1
  2219   000686  EC55  F005         	call	_Reset_Counter	;wreg free
  2220   00068A                     
  2221                           ;SystemCallbacks.c: 57:             callback_count++;
  2222   00068A  2A46               	incf	_callback_count^0,f,c
  2223   00068C                     l256:
  2224   00068C  0012               	return		;funcret
  2225   00068E                     __end_of_Register_Callback:
  2226                           	callstack 0
  2227                           
  2228 ;; *************** function _Reset_Counter *****************
  2229 ;; Defined at:
  2230 ;;		line 42 in file "SystemCallbacks.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  config          2   14[COMRAM] PTR struct .
  2233 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2245 ;;      Params:         2       0       0       0
  2246 ;;      Locals:         0       0       0       0
  2247 ;;      Temps:          0       0       0       0
  2248 ;;      Totals:         2       0       0       0
  2249 ;;Total ram usage:        2 bytes
  2250 ;; Hardware stack levels used: 1
  2251 ;; Hardware stack levels required when called: 4
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_Register_Callback
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text25
  2260   000AAA                     __ptext25:
  2261                           	callstack 0
  2262   000AAA                     _Reset_Counter:
  2263                           	callstack 24
  2264   000AAA                     
  2265                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  2266   000AAA  EE20 F005          	lfsr	2,5
  2267   000AAE  500F               	movf	Reset_Counter@config^0,w,c
  2268   000AB0  26D9               	addwf	fsr2l,f,c
  2269   000AB2  5010               	movf	(Reset_Counter@config+1)^0,w,c
  2270   000AB4  22DA               	addwfc	fsr2h,f,c
  2271   000AB6  0E00               	movlw	0
  2272   000AB8  6EDE               	movwf	postinc2,c
  2273   000ABA  0E00               	movlw	0
  2274   000ABC  6EDD               	movwf	postdec2,c
  2275   000ABE  0012               	return		;funcret
  2276   000AC0                     __end_of_Reset_Counter:
  2277                           	callstack 0
  2278                           
  2279 ;; *************** function _LCD_Write_String *****************
  2280 ;; Defined at:
  2281 ;;		line 120 in file "LCD.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  str             2   18[COMRAM] PTR unsigned char 
  2284 ;;		 -> STR_5(19), STR_4(20), STR_3(15), STR_2(16), 
  2285 ;;		 -> STR_1(17), 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  i               2   22[COMRAM] int 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  1    wreg      void 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2297 ;;      Params:         2       0       0       0
  2298 ;;      Locals:         2       0       0       0
  2299 ;;      Temps:          2       0       0       0
  2300 ;;      Totals:         6       0       0       0
  2301 ;;Total ram usage:        6 bytes
  2302 ;; Hardware stack levels used: 1
  2303 ;; Hardware stack levels required when called: 6
  2304 ;; This function calls:
  2305 ;;		_LCD_Write_Char
  2306 ;; This function is called by:
  2307 ;;		_FSM_begin
  2308 ;; This function uses a non-reentrant model
  2309 ;;
  2310                           
  2311                           	psect	text26
  2312   000822                     __ptext26:
  2313                           	callstack 0
  2314   000822                     _LCD_Write_String:
  2315                           	callstack 23
  2316   000822                     
  2317                           ;LCD.c: 120: void LCD_Write_String(char *str);LCD.c: 121: {;LCD.c: 122:   int i;;LCD.c: 
      +                          123:   for(i=0;str[i]!='\0';i++)
  2318   000822  0E00               	movlw	0
  2319   000824  6E18               	movwf	(LCD_Write_String@i+1)^0,c
  2320   000826  0E00               	movlw	0
  2321   000828  6E17               	movwf	LCD_Write_String@i^0,c
  2322   00082A  EF27  F004         	goto	l1526
  2323   00082E                     l1522:
  2324                           
  2325                           ;LCD.c: 124:     LCD_Write_Char(str[i]);
  2326   00082E  5017               	movf	LCD_Write_String@i^0,w,c
  2327   000830  2413               	addwf	LCD_Write_String@str^0,w,c
  2328   000832  6E15               	movwf	??_LCD_Write_String^0,c
  2329   000834  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2330   000836  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2331   000838  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2332   00083A  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2333   00083E  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2334   000842                     	if	0	;tblptru may be non-zero
  2335   000842                     	endif
  2336   000842                     	if	0	;tblptru may be non-zero
  2337   000842                     	endif
  2338   000842  0008               	tblrd		*
  2339   000844  50F5               	movf	tablat,w,c
  2340   000846  EC62  F004         	call	_LCD_Write_Char
  2341   00084A  4A17               	infsnz	LCD_Write_String@i^0,f,c
  2342   00084C  2A18               	incf	(LCD_Write_String@i+1)^0,f,c
  2343   00084E                     l1526:
  2344   00084E  5017               	movf	LCD_Write_String@i^0,w,c
  2345   000850  2413               	addwf	LCD_Write_String@str^0,w,c
  2346   000852  6E15               	movwf	??_LCD_Write_String^0,c
  2347   000854  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2348   000856  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2349   000858  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2350   00085A  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2351   00085E  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2352   000862                     	if	0	;tblptru may be non-zero
  2353   000862                     	endif
  2354   000862                     	if	0	;tblptru may be non-zero
  2355   000862                     	endif
  2356   000862  0008               	tblrd		*
  2357   000864  50F5               	movf	tablat,w,c
  2358   000866  0900               	iorlw	0
  2359   000868  A4D8               	btfss	status,2,c
  2360   00086A  EF39  F004         	goto	u401
  2361   00086E  EF3B  F004         	goto	u400
  2362   000872                     u401:
  2363   000872  EF17  F004         	goto	l1522
  2364   000876                     u400:
  2365   000876  0012               	return		;funcret
  2366   000878                     __end_of_LCD_Write_String:
  2367                           	callstack 0
  2368                           
  2369 ;; *************** function _LCD_Write_Char *****************
  2370 ;; Defined at:
  2371 ;;		line 102 in file "LCD.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  Data            1    wreg     unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  Data            1   17[COMRAM] unsigned char 
  2376 ;;  High4           1   16[COMRAM] unsigned char 
  2377 ;;  Low4            1   15[COMRAM] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      void 
  2380 ;; Registers used:
  2381 ;;		wreg, status,2, status,0, cstack
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2387 ;;      Params:         0       0       0       0
  2388 ;;      Locals:         3       0       0       0
  2389 ;;      Temps:          0       0       0       0
  2390 ;;      Totals:         3       0       0       0
  2391 ;;Total ram usage:        3 bytes
  2392 ;; Hardware stack levels used: 1
  2393 ;; Hardware stack levels required when called: 5
  2394 ;; This function calls:
  2395 ;;		_LCD_DATA
  2396 ;; This function is called by:
  2397 ;;		_LCD_Write_String
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           	psect	text27
  2402   0008C4                     __ptext27:
  2403                           	callstack 0
  2404   0008C4                     _LCD_Write_Char:
  2405                           	callstack 23
  2406                           
  2407                           ;incstack = 0
  2408                           ;LCD_Write_Char@Data stored from wreg
  2409   0008C4  6E12               	movwf	LCD_Write_Char@Data^0,c
  2410   0008C6                     
  2411                           ;LCD.c: 102: void LCD_Write_Char(char Data);LCD.c: 103: {;LCD.c: 104:   char Low4,High4;
      +                          ;LCD.c: 105:   Low4 = Data & 0x0F;
  2412   0008C6  5012               	movf	LCD_Write_Char@Data^0,w,c
  2413   0008C8  0B0F               	andlw	15
  2414   0008CA  6E10               	movwf	LCD_Write_Char@Low4^0,c
  2415                           
  2416                           ;LCD.c: 106:   High4 = Data & 0xF0;
  2417   0008CC  5012               	movf	LCD_Write_Char@Data^0,w,c
  2418   0008CE  0BF0               	andlw	240
  2419   0008D0  6E11               	movwf	LCD_Write_Char@High4^0,c
  2420   0008D2                     
  2421                           ;LCD.c: 107:   PORTBbits.RB5 = 1;
  2422   0008D2  8A81               	bsf	129,5,c	;volatile
  2423   0008D4                     
  2424                           ;LCD.c: 108:   LCD_DATA(High4>>4);
  2425   0008D4  3811               	swapf	LCD_Write_Char@High4^0,w,c
  2426   0008D6  0B0F               	andlw	15
  2427   0008D8  ECE3  F003         	call	_LCD_DATA
  2428   0008DC                     
  2429                           ;LCD.c: 109:   PORTBbits.RB4 = 1;
  2430   0008DC  8881               	bsf	129,4,c	;volatile
  2431   0008DE                     
  2432                           ;LCD.c: 110:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2433   0008DE  0EA6               	movlw	166
  2434   0008E0                     u687:
  2435   0008E0  2EE8               	decfsz	wreg,f,c
  2436   0008E2  D7FE               	bra	u687
  2437   0008E4  D000               	nop2	
  2438   0008E6                     
  2439                           ;LCD.c: 111:   PORTBbits.RB4 = 0;
  2440   0008E6  9881               	bcf	129,4,c	;volatile
  2441   0008E8                     
  2442                           ;LCD.c: 112:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2443   0008E8  0EA6               	movlw	166
  2444   0008EA                     u697:
  2445   0008EA  2EE8               	decfsz	wreg,f,c
  2446   0008EC  D7FE               	bra	u697
  2447   0008EE  D000               	nop2	
  2448   0008F0                     
  2449                           ;LCD.c: 113:   LCD_DATA(Low4);
  2450   0008F0  5010               	movf	LCD_Write_Char@Low4^0,w,c
  2451   0008F2  ECE3  F003         	call	_LCD_DATA
  2452   0008F6                     
  2453                           ;LCD.c: 114:   PORTBbits.RB4 = 1;
  2454   0008F6  8881               	bsf	129,4,c	;volatile
  2455   0008F8                     
  2456                           ;LCD.c: 115:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2457   0008F8  0EA6               	movlw	166
  2458   0008FA                     u707:
  2459   0008FA  2EE8               	decfsz	wreg,f,c
  2460   0008FC  D7FE               	bra	u707
  2461   0008FE  D000               	nop2	
  2462   000900                     
  2463                           ;LCD.c: 116:   PORTBbits.RB4 = 0;
  2464   000900  9881               	bcf	129,4,c	;volatile
  2465   000902                     
  2466                           ;LCD.c: 117:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2467   000902  0EA6               	movlw	166
  2468   000904                     u717:
  2469   000904  2EE8               	decfsz	wreg,f,c
  2470   000906  D7FE               	bra	u717
  2471   000908  D000               	nop2	
  2472   00090A  0012               	return		;funcret
  2473   00090C                     __end_of_LCD_Write_Char:
  2474                           	callstack 0
  2475                           
  2476 ;; *************** function _LCD_Set_Cursor *****************
  2477 ;; Defined at:
  2478 ;;		line 81 in file "LCD.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  r               1    wreg     unsigned char 
  2481 ;;  c               1   16[COMRAM] unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  r               1   17[COMRAM] unsigned char 
  2484 ;;  Temp            1   20[COMRAM] unsigned char 
  2485 ;;  High4           1   19[COMRAM] unsigned char 
  2486 ;;  Low4            1   18[COMRAM] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2496 ;;      Params:         1       0       0       0
  2497 ;;      Locals:         4       0       0       0
  2498 ;;      Temps:          0       0       0       0
  2499 ;;      Totals:         5       0       0       0
  2500 ;;Total ram usage:        5 bytes
  2501 ;; Hardware stack levels used: 1
  2502 ;; Hardware stack levels required when called: 6
  2503 ;; This function calls:
  2504 ;;		_LCD_CMD
  2505 ;; This function is called by:
  2506 ;;		_FSM_begin
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text28
  2511   000706                     __ptext28:
  2512                           	callstack 0
  2513   000706                     _LCD_Set_Cursor:
  2514                           	callstack 23
  2515                           
  2516                           ;incstack = 0
  2517                           ;LCD_Set_Cursor@r stored from wreg
  2518   000706  6E12               	movwf	LCD_Set_Cursor@r^0,c
  2519   000708                     
  2520                           ;LCD.c: 81: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 82: {;LCD.c: 83
      +                          :   unsigned char Temp,Low4,High4;;LCD.c: 84:   if(r == 1)
  2521   000708  0412               	decf	LCD_Set_Cursor@r^0,w,c
  2522   00070A  A4D8               	btfss	status,2,c
  2523   00070C  EF8A  F003         	goto	u381
  2524   000710  EF8C  F003         	goto	u380
  2525   000714                     u381:
  2526   000714  EF9B  F003         	goto	l92
  2527   000718                     u380:
  2528   000718                     
  2529                           ;LCD.c: 85:   {;LCD.c: 86:     Temp = 0x80 + c - 1;
  2530   000718  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2531   00071A  0F7F               	addlw	127
  2532   00071C  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2533                           
  2534                           ;LCD.c: 87:     High4 = Temp >> 4;
  2535   00071E  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2536   000720  0B0F               	andlw	15
  2537   000722  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2538                           
  2539                           ;LCD.c: 88:     Low4 = Temp & 0x0F;
  2540   000724  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2541   000726  0B0F               	andlw	15
  2542   000728  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2543   00072A                     
  2544                           ;LCD.c: 89:     LCD_CMD(High4);
  2545   00072A  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2546   00072C  EC28  F005         	call	_LCD_CMD
  2547   000730                     
  2548                           ;LCD.c: 90:     LCD_CMD(Low4);
  2549   000730  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2550   000732  EC28  F005         	call	_LCD_CMD
  2551   000736                     l92:
  2552                           
  2553                           ;LCD.c: 92:   if(r == 2)
  2554   000736  0E02               	movlw	2
  2555   000738  1812               	xorwf	LCD_Set_Cursor@r^0,w,c
  2556   00073A  A4D8               	btfss	status,2,c
  2557   00073C  EFA2  F003         	goto	u391
  2558   000740  EFA4  F003         	goto	u390
  2559   000744                     u391:
  2560   000744  EFB3  F003         	goto	l94
  2561   000748                     u390:
  2562   000748                     
  2563                           ;LCD.c: 93:   {;LCD.c: 94:     Temp = 0xC0 + c - 1;
  2564   000748  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2565   00074A  0FBF               	addlw	191
  2566   00074C  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2567                           
  2568                           ;LCD.c: 95:     High4 = Temp >> 4;
  2569   00074E  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2570   000750  0B0F               	andlw	15
  2571   000752  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2572                           
  2573                           ;LCD.c: 96:     Low4 = Temp & 0x0F;
  2574   000754  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2575   000756  0B0F               	andlw	15
  2576   000758  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2577   00075A                     
  2578                           ;LCD.c: 97:     LCD_CMD(High4);
  2579   00075A  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2580   00075C  EC28  F005         	call	_LCD_CMD
  2581   000760                     
  2582                           ;LCD.c: 98:     LCD_CMD(Low4);
  2583   000760  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2584   000762  EC28  F005         	call	_LCD_CMD
  2585   000766                     l94:
  2586   000766  0012               	return		;funcret
  2587   000768                     __end_of_LCD_Set_Cursor:
  2588                           	callstack 0
  2589                           
  2590 ;; *************** function _LCD_Init *****************
  2591 ;; Defined at:
  2592 ;;		line 5 in file "LCD.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;		None
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;		None
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      void 
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, cstack
  2601 ;; Tracked objects:
  2602 ;;		On entry : 0/0
  2603 ;;		On exit  : 0/0
  2604 ;;		Unchanged: 0/0
  2605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2606 ;;      Params:         0       0       0       0
  2607 ;;      Locals:         0       0       0       0
  2608 ;;      Temps:          1       0       0       0
  2609 ;;      Totals:         1       0       0       0
  2610 ;;Total ram usage:        1 bytes
  2611 ;; Hardware stack levels used: 1
  2612 ;; Hardware stack levels required when called: 6
  2613 ;; This function calls:
  2614 ;;		_LCD_CMD
  2615 ;;		_LCD_DATA
  2616 ;; This function is called by:
  2617 ;;		_FSM_begin
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text29
  2622   00068E                     __ptext29:
  2623                           	callstack 0
  2624   00068E                     _LCD_Init:
  2625                           	callstack 23
  2626   00068E                     
  2627                           ;LCD.c: 8:   TRISB = 0x00;
  2628   00068E  0E00               	movlw	0
  2629   000690  6E93               	movwf	147,c	;volatile
  2630   000692                     
  2631                           ;LCD.c: 9:   TRISBbits.RB5 = 0;
  2632   000692  9A93               	bcf	147,5,c	;volatile
  2633   000694                     
  2634                           ;LCD.c: 10:   TRISBbits.RB4 = 0;
  2635   000694  9893               	bcf	147,4,c	;volatile
  2636   000696                     
  2637                           ;LCD.c: 13:   LCD_DATA(0x00);
  2638   000696  0E00               	movlw	0
  2639   000698  ECE3  F003         	call	_LCD_DATA
  2640   00069C                     
  2641                           ;LCD.c: 14:   _delay((unsigned long)((30)*(8000000/4000.0)));
  2642   00069C  0E4E               	movlw	78
  2643   00069E  6E11               	movwf	??_LCD_Init^0,c
  2644   0006A0  0EEB               	movlw	235
  2645   0006A2                     u727:
  2646   0006A2  2EE8               	decfsz	wreg,f,c
  2647   0006A4  D7FE               	bra	u727
  2648   0006A6  2E11               	decfsz	??_LCD_Init^0,f,c
  2649   0006A8  D7FC               	bra	u727
  2650   0006AA  F000               	nop	
  2651   0006AC                     
  2652                           ;LCD.c: 15:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2653   0006AC  0EA6               	movlw	166
  2654   0006AE                     u737:
  2655   0006AE  2EE8               	decfsz	wreg,f,c
  2656   0006B0  D7FE               	bra	u737
  2657   0006B2  D000               	nop2	
  2658   0006B4                     
  2659                           ;LCD.c: 16:   LCD_CMD(0x03);
  2660   0006B4  0E03               	movlw	3
  2661   0006B6  EC28  F005         	call	_LCD_CMD
  2662                           
  2663                           ;LCD.c: 17:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2664   0006BA  0E0D               	movlw	13
  2665   0006BC  6E11               	movwf	??_LCD_Init^0,c
  2666   0006BE  0EFC               	movlw	252
  2667   0006C0                     u747:
  2668   0006C0  2EE8               	decfsz	wreg,f,c
  2669   0006C2  D7FE               	bra	u747
  2670   0006C4  2E11               	decfsz	??_LCD_Init^0,f,c
  2671   0006C6  D7FC               	bra	u747
  2672   0006C8                     
  2673                           ;LCD.c: 18:   LCD_CMD(0x03);
  2674   0006C8  0E03               	movlw	3
  2675   0006CA  EC28  F005         	call	_LCD_CMD
  2676   0006CE                     
  2677                           ;LCD.c: 19:   _delay((unsigned long)((150)*(8000000/4000000.0)));
  2678   0006CE  0E64               	movlw	100
  2679   0006D0                     u757:
  2680   0006D0  2EE8               	decfsz	wreg,f,c
  2681   0006D2  D7FE               	bra	u757
  2682                           
  2683                           ;LCD.c: 20:   LCD_CMD(0x03);
  2684   0006D4  0E03               	movlw	3
  2685   0006D6  EC28  F005         	call	_LCD_CMD
  2686                           
  2687                           ;LCD.c: 21:   LCD_CMD(0x02);
  2688   0006DA  0E02               	movlw	2
  2689   0006DC  EC28  F005         	call	_LCD_CMD
  2690                           
  2691                           ;LCD.c: 22:   LCD_CMD(0x02);
  2692   0006E0  0E02               	movlw	2
  2693   0006E2  EC28  F005         	call	_LCD_CMD
  2694                           
  2695                           ;LCD.c: 23:   LCD_CMD(0x08);
  2696   0006E6  0E08               	movlw	8
  2697   0006E8  EC28  F005         	call	_LCD_CMD
  2698                           
  2699                           ;LCD.c: 24:   LCD_CMD(0x00);
  2700   0006EC  0E00               	movlw	0
  2701   0006EE  EC28  F005         	call	_LCD_CMD
  2702                           
  2703                           ;LCD.c: 25:   LCD_CMD(0x0C);
  2704   0006F2  0E0C               	movlw	12
  2705   0006F4  EC28  F005         	call	_LCD_CMD
  2706                           
  2707                           ;LCD.c: 26:   LCD_CMD(0x00);
  2708   0006F8  0E00               	movlw	0
  2709   0006FA  EC28  F005         	call	_LCD_CMD
  2710                           
  2711                           ;LCD.c: 27:   LCD_CMD(0x06);
  2712   0006FE  0E06               	movlw	6
  2713   000700  EC28  F005         	call	_LCD_CMD
  2714   000704  0012               	return		;funcret
  2715   000706                     __end_of_LCD_Init:
  2716                           	callstack 0
  2717                           
  2718 ;; *************** function _LCD_Clear *****************
  2719 ;; Defined at:
  2720 ;;		line 30 in file "LCD.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;		None
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;		None
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, cstack
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2734 ;;      Params:         0       0       0       0
  2735 ;;      Locals:         0       0       0       0
  2736 ;;      Temps:          0       0       0       0
  2737 ;;      Totals:         0       0       0       0
  2738 ;;Total ram usage:        0 bytes
  2739 ;; Hardware stack levels used: 1
  2740 ;; Hardware stack levels required when called: 6
  2741 ;; This function calls:
  2742 ;;		_LCD_CMD
  2743 ;; This function is called by:
  2744 ;;		_FSM_begin
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text30
  2749   000AE4                     __ptext30:
  2750                           	callstack 0
  2751   000AE4                     _LCD_Clear:
  2752                           	callstack 23
  2753   000AE4                     
  2754                           ;LCD.c: 32:   LCD_CMD(0);
  2755   000AE4  0E00               	movlw	0
  2756   000AE6  EC28  F005         	call	_LCD_CMD
  2757                           
  2758                           ;LCD.c: 33:   LCD_CMD(1);
  2759   000AEA  0E01               	movlw	1
  2760   000AEC  EC28  F005         	call	_LCD_CMD
  2761   000AF0  0012               	return		;funcret
  2762   000AF2                     __end_of_LCD_Clear:
  2763                           	callstack 0
  2764                           
  2765 ;; *************** function _LCD_CMD *****************
  2766 ;; Defined at:
  2767 ;;		line 49 in file "LCD.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  CMD             1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  CMD             1   15[COMRAM] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2781 ;;      Params:         0       0       0       0
  2782 ;;      Locals:         1       0       0       0
  2783 ;;      Temps:          0       0       0       0
  2784 ;;      Totals:         1       0       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used: 1
  2787 ;; Hardware stack levels required when called: 5
  2788 ;; This function calls:
  2789 ;;		_LCD_DATA
  2790 ;; This function is called by:
  2791 ;;		_LCD_Init
  2792 ;;		_LCD_Clear
  2793 ;;		_LCD_Set_Cursor
  2794 ;;		_LCD_SL
  2795 ;;		_LCD_SR
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text31
  2800   000A50                     __ptext31:
  2801                           	callstack 0
  2802   000A50                     _LCD_CMD:
  2803                           	callstack 23
  2804                           
  2805                           ;incstack = 0
  2806                           ;LCD_CMD@CMD stored from wreg
  2807   000A50  6E10               	movwf	LCD_CMD@CMD^0,c
  2808   000A52                     
  2809                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:   PORTBbits.RB5 = 0;
  2810   000A52  9A81               	bcf	129,5,c	;volatile
  2811   000A54                     
  2812                           ;LCD.c: 54:   LCD_DATA(CMD);
  2813   000A54  5010               	movf	LCD_CMD@CMD^0,w,c
  2814   000A56  ECE3  F003         	call	_LCD_DATA
  2815   000A5A                     
  2816                           ;LCD.c: 56:   PORTBbits.RB4 = 1;
  2817   000A5A  8881               	bsf	129,4,c	;volatile
  2818   000A5C                     
  2819                           ;LCD.c: 57:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2820   000A5C  0EA6               	movlw	166
  2821   000A5E                     u767:
  2822   000A5E  2EE8               	decfsz	wreg,f,c
  2823   000A60  D7FE               	bra	u767
  2824   000A62  D000               	nop2	
  2825   000A64                     
  2826                           ;LCD.c: 58:   PORTBbits.RB4 = 0;
  2827   000A64  9881               	bcf	129,4,c	;volatile
  2828   000A66  0012               	return		;funcret
  2829   000A68                     __end_of_LCD_CMD:
  2830                           	callstack 0
  2831                           
  2832 ;; *************** function _LCD_DATA *****************
  2833 ;; Defined at:
  2834 ;;		line 61 in file "LCD.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  Data            1    wreg     unsigned char 
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  Data            1   14[COMRAM] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      void 
  2841 ;; Registers used:
  2842 ;;		wreg
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2848 ;;      Params:         0       0       0       0
  2849 ;;      Locals:         1       0       0       0
  2850 ;;      Temps:          0       0       0       0
  2851 ;;      Totals:         1       0       0       0
  2852 ;;Total ram usage:        1 bytes
  2853 ;; Hardware stack levels used: 1
  2854 ;; Hardware stack levels required when called: 4
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_LCD_Init
  2859 ;;		_LCD_CMD
  2860 ;;		_LCD_Write_Char
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text32
  2865   0007C6                     __ptext32:
  2866                           	callstack 0
  2867   0007C6                     _LCD_DATA:
  2868                           	callstack 23
  2869                           
  2870                           ;incstack = 0
  2871                           ;LCD_DATA@Data stored from wreg
  2872   0007C6  6E0F               	movwf	LCD_DATA@Data^0,c
  2873   0007C8                     
  2874                           ;LCD.c: 61: void LCD_DATA(unsigned char Data);LCD.c: 62: {;LCD.c: 63:   if(Data & 1)
  2875   0007C8  A00F               	btfss	LCD_DATA@Data^0,0,c
  2876   0007CA  EFE9  F003         	goto	u21
  2877   0007CE  EFEB  F003         	goto	u20
  2878   0007D2                     u21:
  2879   0007D2  EFEE  F003         	goto	l81
  2880   0007D6                     u20:
  2881   0007D6                     
  2882                           ;LCD.c: 64:     PORTBbits.RB0 = 1;
  2883   0007D6  8081               	bsf	129,0,c	;volatile
  2884   0007D8  EFEF  F003         	goto	l1054
  2885   0007DC                     l81:
  2886                           
  2887                           ;LCD.c: 66:     PORTBbits.RB0 = 0;
  2888   0007DC  9081               	bcf	129,0,c	;volatile
  2889   0007DE                     l1054:
  2890                           
  2891                           ;LCD.c: 67:   if(Data & 2)
  2892   0007DE  A20F               	btfss	LCD_DATA@Data^0,1,c
  2893   0007E0  EFF4  F003         	goto	u31
  2894   0007E4  EFF6  F003         	goto	u30
  2895   0007E8                     u31:
  2896   0007E8  EFF9  F003         	goto	l83
  2897   0007EC                     u30:
  2898   0007EC                     
  2899                           ;LCD.c: 68:     PORTBbits.RB1 = 1;
  2900   0007EC  8281               	bsf	129,1,c	;volatile
  2901   0007EE  EFFA  F003         	goto	l1058
  2902   0007F2                     l83:
  2903                           
  2904                           ;LCD.c: 70:     PORTBbits.RB1 = 0;
  2905   0007F2  9281               	bcf	129,1,c	;volatile
  2906   0007F4                     l1058:
  2907                           
  2908                           ;LCD.c: 71:   if(Data & 4)
  2909   0007F4  A40F               	btfss	LCD_DATA@Data^0,2,c
  2910   0007F6  EFFF  F003         	goto	u41
  2911   0007FA  EF01  F004         	goto	u40
  2912   0007FE                     u41:
  2913   0007FE  EF04  F004         	goto	l85
  2914   000802                     u40:
  2915   000802                     
  2916                           ;LCD.c: 72:     PORTBbits.RB2 = 1;
  2917   000802  8481               	bsf	129,2,c	;volatile
  2918   000804  EF05  F004         	goto	l1062
  2919   000808                     l85:
  2920                           
  2921                           ;LCD.c: 74:     PORTBbits.RB2 = 0;
  2922   000808  9481               	bcf	129,2,c	;volatile
  2923   00080A                     l1062:
  2924                           
  2925                           ;LCD.c: 75:   if(Data & 8)
  2926   00080A  A60F               	btfss	LCD_DATA@Data^0,3,c
  2927   00080C  EF0A  F004         	goto	u51
  2928   000810  EF0C  F004         	goto	u50
  2929   000814                     u51:
  2930   000814  EF0F  F004         	goto	l87
  2931   000818                     u50:
  2932   000818                     
  2933                           ;LCD.c: 76:     PORTBbits.RB3 = 1;
  2934   000818  8681               	bsf	129,3,c	;volatile
  2935   00081A  EF10  F004         	goto	l89
  2936   00081E                     l87:
  2937                           
  2938                           ;LCD.c: 78:     PORTBbits.RB3 = 0;
  2939   00081E  9681               	bcf	129,3,c	;volatile
  2940   000820                     l89:
  2941   000820  0012               	return		;funcret
  2942   000822                     __end_of_LCD_DATA:
  2943                           	callstack 0
  2944                           
  2945 ;; *************** function _Callbacks_Init *****************
  2946 ;; Defined at:
  2947 ;;		line 9 in file "SystemCallbacks.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;		None
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  callback        1   14[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      void 
  2954 ;; Registers used:
  2955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2961 ;;      Params:         0       0       0       0
  2962 ;;      Locals:         1       0       0       0
  2963 ;;      Temps:          0       0       0       0
  2964 ;;      Totals:         1       0       0       0
  2965 ;;Total ram usage:        1 bytes
  2966 ;; Hardware stack levels used: 1
  2967 ;; Hardware stack levels required when called: 4
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_FSM_begin
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text33
  2976   000878                     __ptext33:
  2977                           	callstack 0
  2978   000878                     _Callbacks_Init:
  2979                           	callstack 25
  2980   000878                     
  2981                           ;SystemCallbacks.c: 11:     for(U8 callback=0; callback<(5); callback++)
  2982   000878  0E00               	movlw	0
  2983   00087A  6E0F               	movwf	Callbacks_Init@callback^0,c
  2984   00087C                     l1560:
  2985                           
  2986                           ;SystemCallbacks.c: 12:     {;SystemCallbacks.c: 13:         registered_callbacks[callba
      +                          ck].callback = ((void*)0);
  2987   00087C  500F               	movf	Callbacks_Init@callback^0,w,c
  2988   00087E  0D08               	mullw	8
  2989   000880  0E62               	movlw	low (_registered_callbacks+2)
  2990   000882  24F3               	addwf	243,w,c
  2991   000884  6ED9               	movwf	fsr2l,c
  2992   000886  0E00               	movlw	high (_registered_callbacks+2)
  2993   000888  20F4               	addwfc	prodh,w,c
  2994   00088A  6EDA               	movwf	fsr2h,c
  2995   00088C  0E00               	movlw	0
  2996   00088E  6EDE               	movwf	postinc2,c
  2997   000890  0E00               	movlw	0
  2998   000892  6EDD               	movwf	postdec2,c
  2999                           
  3000                           ;SystemCallbacks.c: 14:         registered_callbacks[callback].count = 0;
  3001   000894  500F               	movf	Callbacks_Init@callback^0,w,c
  3002   000896  0D08               	mullw	8
  3003   000898  0E65               	movlw	low (_registered_callbacks+5)
  3004   00089A  24F3               	addwf	243,w,c
  3005   00089C  6ED9               	movwf	fsr2l,c
  3006   00089E  0E00               	movlw	high (_registered_callbacks+5)
  3007   0008A0  20F4               	addwfc	prodh,w,c
  3008   0008A2  6EDA               	movwf	fsr2h,c
  3009   0008A4  0E00               	movlw	0
  3010   0008A6  6EDE               	movwf	postinc2,c
  3011   0008A8  0E00               	movlw	0
  3012   0008AA  6EDD               	movwf	postdec2,c
  3013   0008AC                     
  3014                           ;SystemCallbacks.c: 15:         callback_count = 0;
  3015   0008AC  0E00               	movlw	0
  3016   0008AE  6E46               	movwf	_callback_count^0,c
  3017   0008B0                     
  3018                           ;SystemCallbacks.c: 16:     }
  3019   0008B0  2A0F               	incf	Callbacks_Init@callback^0,f,c
  3020   0008B2  0E04               	movlw	4
  3021   0008B4  640F               	cpfsgt	Callbacks_Init@callback^0,c
  3022   0008B6  EF5F  F004         	goto	u461
  3023   0008BA  EF61  F004         	goto	u460
  3024   0008BE                     u461:
  3025   0008BE  EF3E  F004         	goto	l1560
  3026   0008C2                     u460:
  3027   0008C2  0012               	return		;funcret
  3028   0008C4                     __end_of_Callbacks_Init:
  3029                           	callstack 0
  3030                           
  3031 ;; *************** function _timer_overflow_isr *****************
  3032 ;; Defined at:
  3033 ;;		line 11 in file "SystemInterrupts.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;		None
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  1    wreg      void 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3047 ;;      Params:         0       0       0       0
  3048 ;;      Locals:         0       0       0       0
  3049 ;;      Temps:          8       0       0       0
  3050 ;;      Totals:         8       0       0       0
  3051 ;;Total ram usage:        8 bytes
  3052 ;; Hardware stack levels used: 1
  3053 ;; Hardware stack levels required when called: 3
  3054 ;; This function calls:
  3055 ;;		_Callbacks_Manager
  3056 ;;		i2_get_current_state
  3057 ;;		i2_set_state
  3058 ;; This function is called by:
  3059 ;;		Interrupt level 2
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	intcode
  3064   000008                     __pintcode:
  3065                           	callstack 0
  3066   000008                     _timer_overflow_isr:
  3067                           	callstack 23
  3068                           
  3069                           ;incstack = 0
  3070   000008  8248               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3071   00000A  CFFA F007          	movff	pclath,??_timer_overflow_isr
  3072   00000E  CFFB F008          	movff	pclatu,??_timer_overflow_isr+1
  3073   000012  CFE1 F009          	movff	fsr1l,??_timer_overflow_isr+2
  3074   000016  CFE2 F00A          	movff	fsr1h,??_timer_overflow_isr+3
  3075   00001A  CFD9 F00B          	movff	fsr2l,??_timer_overflow_isr+4
  3076   00001E  CFDA F00C          	movff	fsr2h,??_timer_overflow_isr+5
  3077   000022  CFF3 F00D          	movff	prodl,??_timer_overflow_isr+6
  3078   000026  CFF4 F00E          	movff	prodh,??_timer_overflow_isr+7
  3079   00002A                     
  3080                           ;SystemInterrupts.c: 14:     INTCONbits.GIEH = 0;
  3081   00002A  9EF2               	bcf	242,7,c	;volatile
  3082                           
  3083                           ;SystemInterrupts.c: 15:     INTCONbits.GIEL = 1;
  3084   00002C  8CF2               	bsf	242,6,c	;volatile
  3085   00002E                     
  3086                           ;SystemInterrupts.c: 29:     if(TMR0L < (0x7C))
  3087   00002E  0E7C               	movlw	124
  3088   000030  60D6               	cpfslt	214,c	;volatile
  3089   000032  EF1D  F000         	goto	i2u60_41
  3090   000036  EF1F  F000         	goto	i2u60_40
  3091   00003A                     i2u60_41:
  3092   00003A  EF21  F000         	goto	i2l1732
  3093   00003E                     i2u60_40:
  3094   00003E                     
  3095                           ;SystemInterrupts.c: 30:     {;SystemInterrupts.c: 31:         TMR0L = (0x7C);
  3096   00003E  0E7C               	movlw	124
  3097   000040  6ED6               	movwf	214,c	;volatile
  3098   000042                     i2l1732:
  3099                           
  3100                           ;SystemInterrupts.c: 33:     if(TMR0H < (0xE1))
  3101   000042  0EE1               	movlw	225
  3102   000044  60D7               	cpfslt	215,c	;volatile
  3103   000046  EF27  F000         	goto	i2u61_41
  3104   00004A  EF29  F000         	goto	i2u61_40
  3105   00004E                     i2u61_41:
  3106   00004E  EF2B  F000         	goto	i2l1736
  3107   000052                     i2u61_40:
  3108   000052                     
  3109                           ;SystemInterrupts.c: 34:     {;SystemInterrupts.c: 35:         TMR0H = (0xE1);
  3110   000052  0EE1               	movlw	225
  3111   000054  6ED7               	movwf	215,c	;volatile
  3112   000056                     i2l1736:
  3113                           
  3114                           ;SystemInterrupts.c: 39:     if(INTCONbits.TMR0IF)
  3115   000056  A4F2               	btfss	242,2,c	;volatile
  3116   000058  EF30  F000         	goto	i2u62_41
  3117   00005C  EF32  F000         	goto	i2u62_40
  3118   000060                     i2u62_41:
  3119   000060  EF35  F000         	goto	i2l1742
  3120   000064                     i2u62_40:
  3121   000064                     
  3122                           ;SystemInterrupts.c: 40:     {;SystemInterrupts.c: 42:         Callbacks_Manager();
  3123   000064  ECA6  F002         	call	_Callbacks_Manager	;wreg free
  3124   000068                     
  3125                           ;SystemInterrupts.c: 45:         INTCONbits.TMR0IF = 0;
  3126   000068  94F2               	bcf	242,2,c	;volatile
  3127   00006A                     i2l1742:
  3128                           
  3129                           ;SystemInterrupts.c: 49:     if(INTCONbits.INT0IF)
  3130   00006A  A2F2               	btfss	242,1,c	;volatile
  3131   00006C  EF3A  F000         	goto	i2u63_41
  3132   000070  EF3C  F000         	goto	i2u63_40
  3133   000074                     i2u63_41:
  3134   000074  EF4A  F000         	goto	i2l1750
  3135   000078                     i2u63_40:
  3136   000078                     
  3137                           ;SystemInterrupts.c: 50:     {;SystemInterrupts.c: 52:         if(get_current_state() !=
      +                           WATER_PLANTS)
  3138   000078  ECAB  F005         	call	i2_get_current_state	;wreg free
  3139   00007C  0A02               	xorlw	2
  3140   00007E  B4D8               	btfsc	status,2,c
  3141   000080  EF44  F000         	goto	i2u64_41
  3142   000084  EF46  F000         	goto	i2u64_40
  3143   000088                     i2u64_41:
  3144   000088  EF49  F000         	goto	i2l1748
  3145   00008C                     i2u64_40:
  3146   00008C                     
  3147                           ;SystemInterrupts.c: 53:         {;SystemInterrupts.c: 54:           set_state(WATER_PLA
      +                          NTS);
  3148   00008C  0E02               	movlw	2
  3149   00008E  EC99  F005         	call	i2_set_state
  3150   000092                     i2l1748:
  3151                           
  3152                           ;SystemInterrupts.c: 58:         INTCONbits.INT0IF = 0;
  3153   000092  92F2               	bcf	242,1,c	;volatile
  3154   000094                     i2l1750:
  3155                           
  3156                           ;SystemInterrupts.c: 62:     INTCONbits.GIEH = 1;
  3157   000094  8EF2               	bsf	242,7,c	;volatile
  3158   000096                     
  3159                           ;SystemInterrupts.c: 63:     INTCONbits.GIEL = 1;
  3160   000096  8CF2               	bsf	242,6,c	;volatile
  3161   000098  C00E  FFF4         	movff	??_timer_overflow_isr+7,prodh
  3162   00009C  C00D  FFF3         	movff	??_timer_overflow_isr+6,prodl
  3163   0000A0  C00C  FFDA         	movff	??_timer_overflow_isr+5,fsr2h
  3164   0000A4  C00B  FFD9         	movff	??_timer_overflow_isr+4,fsr2l
  3165   0000A8  C00A  FFE2         	movff	??_timer_overflow_isr+3,fsr1h
  3166   0000AC  C009  FFE1         	movff	??_timer_overflow_isr+2,fsr1l
  3167   0000B0  C008  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  3168   0000B4  C007  FFFA         	movff	??_timer_overflow_isr,pclath
  3169   0000B8  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3170   0000BA  0011               	retfie		f
  3171   0000BC                     __end_of_timer_overflow_isr:
  3172                           	callstack 0
  3173                           
  3174 ;; *************** function _Callbacks_Manager *****************
  3175 ;; Defined at:
  3176 ;;		line 24 in file "SystemCallbacks.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;  callbacks       1    5[COMRAM] unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3190 ;;      Params:         0       0       0       0
  3191 ;;      Locals:         1       0       0       0
  3192 ;;      Temps:          4       0       0       0
  3193 ;;      Totals:         5       0       0       0
  3194 ;;Total ram usage:        5 bytes
  3195 ;; Hardware stack levels used: 1
  3196 ;; Hardware stack levels required when called: 2
  3197 ;; This function calls:
  3198 ;;		_Check_Moisture_cb
  3199 ;;		_Watering_Done_cb
  3200 ;; This function is called by:
  3201 ;;		_timer_overflow_isr
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text35
  3206   00054C                     __ptext35:
  3207                           	callstack 0
  3208   00054C                     _Callbacks_Manager:
  3209                           	callstack 23
  3210   00054C                     
  3211                           ;SystemCallbacks.c: 26:     for (U8 callbacks = 0; callbacks < (5); callbacks++)
  3212   00054C  0E00               	movlw	0
  3213   00054E  6E06               	movwf	Callbacks_Manager@callbacks^0,c
  3214   000550                     i2l1686:
  3215                           
  3216                           ;SystemCallbacks.c: 27:     {;SystemCallbacks.c: 28:         (registered_callbacks[callb
      +                          acks].count)++;
  3217   000550  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3218   000552  0D08               	mullw	8
  3219   000554  0E65               	movlw	low (_registered_callbacks+5)
  3220   000556  24F3               	addwf	243,w,c
  3221   000558  6ED9               	movwf	fsr2l,c
  3222   00055A  0E00               	movlw	high (_registered_callbacks+5)
  3223   00055C  20F4               	addwfc	prodh,w,c
  3224   00055E  6EDA               	movwf	fsr2h,c
  3225   000560  2ADE               	incf	postinc2,f,c
  3226   000562  0E00               	movlw	0
  3227   000564  22DD               	addwfc	postdec2,f,c
  3228   000566                     
  3229                           ;SystemCallbacks.c: 29:         if(registered_callbacks[callbacks].count >=
  3230   000566  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3231   000568  0D08               	mullw	8
  3232   00056A  0E60               	movlw	low _registered_callbacks
  3233   00056C  24F3               	addwf	243,w,c
  3234   00056E  6ED9               	movwf	fsr2l,c
  3235   000570  0E00               	movlw	high _registered_callbacks
  3236   000572  20F4               	addwfc	prodh,w,c
  3237   000574  6EDA               	movwf	fsr2h,c
  3238   000576  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3239   000578  0D08               	mullw	8
  3240   00057A  0E65               	movlw	low (_registered_callbacks+5)
  3241   00057C  24F3               	addwf	243,w,c
  3242   00057E  6EE1               	movwf	fsr1l,c
  3243   000580  0E00               	movlw	high (_registered_callbacks+5)
  3244   000582  20F4               	addwfc	prodh,w,c
  3245   000584  6EE2               	movwf	fsr1h,c
  3246   000586  50DE               	movf	postinc2,w,c
  3247   000588  5CE6               	subwf	postinc1,w,c
  3248   00058A  50DE               	movf	postinc2,w,c
  3249   00058C  58E6               	subwfb	postinc1,w,c
  3250   00058E  A0D8               	btfss	status,0,c
  3251   000590  EFCC  F002         	goto	i2u56_41
  3252   000594  EFCE  F002         	goto	i2u56_40
  3253   000598                     i2u56_41:
  3254   000598  EF00  F003         	goto	i2l1696
  3255   00059C                     i2u56_40:
  3256   00059C                     
  3257                           ;SystemCallbacks.c: 31:         {;SystemCallbacks.c: 32:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  3258   00059C  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3259   00059E  0D08               	mullw	8
  3260   0005A0  0E62               	movlw	low (_registered_callbacks+2)
  3261   0005A2  24F3               	addwf	243,w,c
  3262   0005A4  6ED9               	movwf	fsr2l,c
  3263   0005A6  0E00               	movlw	high (_registered_callbacks+2)
  3264   0005A8  20F4               	addwfc	prodh,w,c
  3265   0005AA  6EDA               	movwf	fsr2h,c
  3266   0005AC  50DE               	movf	postinc2,w,c
  3267   0005AE  10DE               	iorwf	postinc2,w,c
  3268   0005B0  B4D8               	btfsc	status,2,c
  3269   0005B2  EFDD  F002         	goto	i2u57_41
  3270   0005B6  EFDF  F002         	goto	i2u57_40
  3271   0005BA                     i2u57_41:
  3272   0005BA  EF00  F003         	goto	i2l1696
  3273   0005BE                     i2u57_40:
  3274   0005BE                     
  3275                           ;SystemCallbacks.c: 33:             {;SystemCallbacks.c: 34:                 registered_
      +                          callbacks[callbacks].count = 0;
  3276   0005BE  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3277   0005C0  0D08               	mullw	8
  3278   0005C2  0E65               	movlw	low (_registered_callbacks+5)
  3279   0005C4  24F3               	addwf	243,w,c
  3280   0005C6  6ED9               	movwf	fsr2l,c
  3281   0005C8  0E00               	movlw	high (_registered_callbacks+5)
  3282   0005CA  20F4               	addwfc	prodh,w,c
  3283   0005CC  6EDA               	movwf	fsr2h,c
  3284   0005CE  0E00               	movlw	0
  3285   0005D0  6EDE               	movwf	postinc2,c
  3286   0005D2  0E00               	movlw	0
  3287   0005D4  6EDD               	movwf	postdec2,c
  3288   0005D6                     
  3289                           ;SystemCallbacks.c: 35:                 registered_callbacks[callbacks].callback();
  3290   0005D6  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3291   0005D8  0D08               	mullw	8
  3292   0005DA  0E62               	movlw	low (_registered_callbacks+2)
  3293   0005DC  24F3               	addwf	243,w,c
  3294   0005DE  6ED9               	movwf	fsr2l,c
  3295   0005E0  0E00               	movlw	high (_registered_callbacks+2)
  3296   0005E2  20F4               	addwfc	prodh,w,c
  3297   0005E4  6EDA               	movwf	fsr2h,c
  3298   0005E6  D802               	call	i2u58_48
  3299   0005E8  EF00  F003         	goto	i2u58_49
  3300   0005EC                     i2u58_48:
  3301   0005EC  0005               	push	
  3302   0005EE  6EFA               	movwf	pclath,c
  3303   0005F0  50DE               	movf	postinc2,w,c
  3304   0005F2  6EFD               	movwf	tosl,c
  3305   0005F4  50DE               	movf	postinc2,w,c
  3306   0005F6  6EFE               	movwf	tosh,c
  3307   0005F8  50F8               	movf	tblptru,w,c
  3308   0005FA  6EFF               	movwf	tosu,c
  3309   0005FC  50FA               	movf	pclath,w,c
  3310   0005FE  0012               	return		;indir
  3311   000600                     i2u58_49:
  3312   000600                     i2l1696:
  3313                           
  3314                           ;SystemCallbacks.c: 38:     }
  3315   000600  2A06               	incf	Callbacks_Manager@callbacks^0,f,c
  3316   000602  0E04               	movlw	4
  3317   000604  6406               	cpfsgt	Callbacks_Manager@callbacks^0,c
  3318   000606  EF07  F003         	goto	i2u59_41
  3319   00060A  EF09  F003         	goto	i2u59_40
  3320   00060E                     i2u59_41:
  3321   00060E  EFA8  F002         	goto	i2l1686
  3322   000612                     i2u59_40:
  3323   000612  0012               	return		;funcret
  3324   000614                     __end_of_Callbacks_Manager:
  3325                           	callstack 0
  3326                           
  3327 ;; *************** function _Check_Moisture_cb *****************
  3328 ;; Defined at:
  3329 ;;		line 17 in file "System_FSM.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3343 ;;      Params:         0       0       0       0
  3344 ;;      Locals:         0       0       0       0
  3345 ;;      Temps:          0       0       0       0
  3346 ;;      Totals:         0       0       0       0
  3347 ;;Total ram usage:        0 bytes
  3348 ;; Hardware stack levels used: 1
  3349 ;; Hardware stack levels required when called: 1
  3350 ;; This function calls:
  3351 ;;		i2_get_current_state
  3352 ;;		i2_set_state
  3353 ;; This function is called by:
  3354 ;;		_Callbacks_Manager
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text36
  3359   000A18                     __ptext36:
  3360                           	callstack 0
  3361   000A18                     _Check_Moisture_cb:
  3362                           	callstack 23
  3363   000A18                     
  3364                           ;System_FSM.c: 22:     if(get_current_state() != WATER_PLANTS)
  3365   000A18  ECAB  F005         	call	i2_get_current_state	;wreg free
  3366   000A1C  0A02               	xorlw	2
  3367   000A1E  B4D8               	btfsc	status,2,c
  3368   000A20  EF14  F005         	goto	i2u44_41
  3369   000A24  EF16  F005         	goto	i2u44_40
  3370   000A28                     i2u44_41:
  3371   000A28  EF19  F005         	goto	i2l204
  3372   000A2C                     i2u44_40:
  3373   000A2C                     
  3374                           ;System_FSM.c: 23:     {;System_FSM.c: 24:       set_state(CHECK_MOISTURE);
  3375   000A2C  0E03               	movlw	3
  3376   000A2E  EC99  F005         	call	i2_set_state
  3377   000A32                     i2l204:
  3378   000A32  0012               	return		;funcret
  3379   000A34                     __end_of_Check_Moisture_cb:
  3380                           	callstack 0
  3381                           
  3382 ;; *************** function _Watering_Done_cb *****************
  3383 ;; Defined at:
  3384 ;;		line 28 in file "System_FSM.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  1    wreg      void 
  3391 ;; Registers used:
  3392 ;;		wreg, status,2, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3398 ;;      Params:         0       0       0       0
  3399 ;;      Locals:         0       0       0       0
  3400 ;;      Temps:          0       0       0       0
  3401 ;;      Totals:         0       0       0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used: 1
  3404 ;; Hardware stack levels required when called: 1
  3405 ;; This function calls:
  3406 ;;		i2_get_current_state
  3407 ;;		i2_set_state
  3408 ;; This function is called by:
  3409 ;;		_Callbacks_Manager
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           	psect	text37
  3414   000A34                     __ptext37:
  3415                           	callstack 0
  3416   000A34                     _Watering_Done_cb:
  3417                           	callstack 23
  3418   000A34                     
  3419                           ;System_FSM.c: 31:     if(get_current_state() == WATER_PLANTS)
  3420   000A34  ECAB  F005         	call	i2_get_current_state	;wreg free
  3421   000A38  0A02               	xorlw	2
  3422   000A3A  A4D8               	btfss	status,2,c
  3423   000A3C  EF22  F005         	goto	i2u45_41
  3424   000A40  EF24  F005         	goto	i2u45_40
  3425   000A44                     i2u45_41:
  3426   000A44  EF27  F005         	goto	i2l208
  3427   000A48                     i2u45_40:
  3428   000A48                     
  3429                           ;System_FSM.c: 32:     {;System_FSM.c: 33:         set_state(IDLE_STATE);
  3430   000A48  0E01               	movlw	1
  3431   000A4A  EC99  F005         	call	i2_set_state
  3432   000A4E                     i2l208:
  3433   000A4E  0012               	return		;funcret
  3434   000A50                     __end_of_Watering_Done_cb:
  3435                           	callstack 0
  3436                           
  3437 ;; *************** function i2_set_state *****************
  3438 ;; Defined at:
  3439 ;;		line 9 in file "FSM_states.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  state_to_set    1    wreg     enum E2
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  state_to_set    1    0[COMRAM] enum E2
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		wreg
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3453 ;;      Params:         0       0       0       0
  3454 ;;      Locals:         1       0       0       0
  3455 ;;      Temps:          0       0       0       0
  3456 ;;      Totals:         1       0       0       0
  3457 ;;Total ram usage:        1 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; This function calls:
  3460 ;;		Nothing
  3461 ;; This function is called by:
  3462 ;;		_Check_Moisture_cb
  3463 ;;		_Watering_Done_cb
  3464 ;;		_timer_overflow_isr
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text38
  3469   000B32                     __ptext38:
  3470                           	callstack 0
  3471   000B32                     i2_set_state:
  3472                           	callstack 25
  3473                           
  3474                           ;incstack = 0
  3475                           ;i2set_state@state_to_set stored from wreg
  3476   000B32  6E01               	movwf	i2set_state@state_to_set^0,c
  3477   000B34                     
  3478                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  3479   000B34  C001  F047         	movff	i2set_state@state_to_set,_FSM_state
  3480   000B38  0012               	return		;funcret
  3481   000B3A                     __end_ofi2_set_state:
  3482                           	callstack 0
  3483                           
  3484 ;; *************** function i2_get_current_state *****************
  3485 ;; Defined at:
  3486 ;;		line 5 in file "FSM_states.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;		None
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      enum E2
  3493 ;; Registers used:
  3494 ;;		wreg, status,2
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3500 ;;      Params:         0       0       0       0
  3501 ;;      Locals:         0       0       0       0
  3502 ;;      Temps:          0       0       0       0
  3503 ;;      Totals:         0       0       0       0
  3504 ;;Total ram usage:        0 bytes
  3505 ;; Hardware stack levels used: 1
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_Check_Moisture_cb
  3510 ;;		_Watering_Done_cb
  3511 ;;		_timer_overflow_isr
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text39
  3516   000B56                     __ptext39:
  3517                           	callstack 0
  3518   000B56                     i2_get_current_state:
  3519                           	callstack 25
  3520   000B56                     
  3521                           ;FSM_states.c: 7:     return FSM_state;
  3522   000B56  5047               	movf	_FSM_state^0,w,c
  3523   000B58  0012               	return		;funcret
  3524   000B5A                     __end_ofi2_get_current_state:
  3525                           	callstack 0
  3526                           
  3527                           	psect	text40
  3528   000000                     __ptext40:
  3529                           	callstack 0
  3530   000000                     
  3531                           	psect	rparam
  3532   000000                     
  3533                           	psect	temp
  3534   000048                     btemp:
  3535                           	callstack 0
  3536   000048                     	ds	1
  3537   000000                     int$flags	set	btemp
  3538   000000                     wtemp8	set	btemp+1
  3539   000000                     ttemp5	set	btemp+1
  3540   000000                     ttemp6	set	btemp+4
  3541   000000                     ttemp7	set	btemp+8
  3542                           
  3543                           	psect	idloc
  3544                           
  3545                           ;Config register IDLOC0 @ 0x200000
  3546                           ;	unspecified, using default values
  3547   200000                     	org	2097152
  3548   200000  FF                 	db	255
  3549                           
  3550                           ;Config register IDLOC1 @ 0x200001
  3551                           ;	unspecified, using default values
  3552   200001                     	org	2097153
  3553   200001  FF                 	db	255
  3554                           
  3555                           ;Config register IDLOC2 @ 0x200002
  3556                           ;	unspecified, using default values
  3557   200002                     	org	2097154
  3558   200002  FF                 	db	255
  3559                           
  3560                           ;Config register IDLOC3 @ 0x200003
  3561                           ;	unspecified, using default values
  3562   200003                     	org	2097155
  3563   200003  FF                 	db	255
  3564                           
  3565                           ;Config register IDLOC4 @ 0x200004
  3566                           ;	unspecified, using default values
  3567   200004                     	org	2097156
  3568   200004  FF                 	db	255
  3569                           
  3570                           ;Config register IDLOC5 @ 0x200005
  3571                           ;	unspecified, using default values
  3572   200005                     	org	2097157
  3573   200005  FF                 	db	255
  3574                           
  3575                           ;Config register IDLOC6 @ 0x200006
  3576                           ;	unspecified, using default values
  3577   200006                     	org	2097158
  3578   200006  FF                 	db	255
  3579                           
  3580                           ;Config register IDLOC7 @ 0x200007
  3581                           ;	unspecified, using default values
  3582   200007                     	org	2097159
  3583   200007  FF                 	db	255
  3584                           
  3585                           	psect	config
  3586                           
  3587                           ; Padding undefined space
  3588   300000                     	org	3145728
  3589   300000  FF                 	db	255
  3590                           
  3591                           ;Config register CONFIG1H @ 0x300001
  3592                           ;	Oscillator Selection bits
  3593                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  3594                           ;	Fail-Safe Clock Monitor Enable bit
  3595                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3596                           ;	Internal External Oscillator Switchover bit
  3597                           ;	IESO = ON, Internal External Switchover mode enabled
  3598   300001                     	org	3145729
  3599   300001  C8                 	db	200
  3600                           
  3601                           ;Config register CONFIG2L @ 0x300002
  3602                           ;	Power-up Timer Enable bit
  3603                           ;	PWRTEN = OFF, PWRT disabled
  3604                           ;	Brown-out Reset Enable bits
  3605                           ;	BOREN = OFF, Brown-out Reset disabled
  3606                           ;	Brown Out Reset Voltage bits
  3607                           ;	BORV = 0x3, unprogrammed default
  3608   300002                     	org	3145730
  3609   300002  0D                 	db	13
  3610                           
  3611                           ;Config register CONFIG2H @ 0x300003
  3612                           ;	Watchdog Timer Enable bit
  3613                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3614                           ;	Watchdog Timer Postscale Select bits
  3615                           ;	WDPS = 32768, 1:32768
  3616                           ;	Watchdog Timer Window Enable bit
  3617                           ;	WINEN = OFF, WDT window disabled
  3618   300003                     	org	3145731
  3619   300003  3E                 	db	62
  3620                           
  3621                           ;Config register CONFIG3L @ 0x300004
  3622                           ;	PWM output pins Reset state control
  3623                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  3624                           ;	Low-Side Transistors Polarity
  3625                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  3626                           ;	High-Side Transistors Polarity
  3627                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  3628                           ;	Timer1 Oscillator MUX
  3629                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  3630   300004                     	org	3145732
  3631   300004  3C                 	db	60
  3632                           
  3633                           ;Config register CONFIG3H @ 0x300005
  3634                           ;	FLTA MUX bit
  3635                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  3636                           ;	SSP I/O MUX bit
  3637                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  3638                           ;	PWM4 MUX bit
  3639                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  3640                           ;	TMR0/T5CKI External clock MUX bit
  3641                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  3642                           ;	MCLR Pin Enable bit
  3643                           ;	MCLRE = ON, Enabled
  3644   300005                     	org	3145733
  3645   300005  9D                 	db	157
  3646                           
  3647                           ;Config register CONFIG4L @ 0x300006
  3648                           ;	Stack Full/Underflow Reset Enable bit
  3649                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3650                           ;	Low-Voltage ICSP Enable bit
  3651                           ;	LVP = OFF, Low-voltage ICSP disabled
  3652                           ;	Background Debugger Enable bit
  3653                           ;	DEBUG = 0x1, unprogrammed default
  3654   300006                     	org	3145734
  3655   300006  81                 	db	129
  3656                           
  3657                           ; Padding undefined space
  3658   300007                     	org	3145735
  3659   300007  FF                 	db	255
  3660                           
  3661                           ;Config register CONFIG5L @ 0x300008
  3662                           ;	Code Protection bit
  3663                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  3664                           ;	Code Protection bit
  3665                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  3666   300008                     	org	3145736
  3667   300008  0F                 	db	15
  3668                           
  3669                           ;Config register CONFIG5H @ 0x300009
  3670                           ;	Boot Block Code Protection bit
  3671                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3672                           ;	Data EEPROM Code Protection bit
  3673                           ;	CPD = OFF, Data EEPROM not code-protected
  3674   300009                     	org	3145737
  3675   300009  C0                 	db	192
  3676                           
  3677                           ;Config register CONFIG6L @ 0x30000A
  3678                           ;	Write Protection bit
  3679                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  3680                           ;	Write Protection bit
  3681                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  3682   30000A                     	org	3145738
  3683   30000A  0F                 	db	15
  3684                           
  3685                           ;Config register CONFIG6H @ 0x30000B
  3686                           ;	Configuration Register Write Protection bit
  3687                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3688                           ;	Boot Block Write Protection bit
  3689                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3690                           ;	Data EEPROM Write Protection bit
  3691                           ;	WRTD = OFF, Data EEPROM not write-protected
  3692   30000B                     	org	3145739
  3693   30000B  E0                 	db	224
  3694                           
  3695                           ;Config register CONFIG7L @ 0x30000C
  3696                           ;	Table Read Protection bit
  3697                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  3698                           ;	Table Read Protection bit
  3699                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  3700   30000C                     	org	3145740
  3701   30000C  0F                 	db	15
  3702                           
  3703                           ;Config register CONFIG7H @ 0x30000D
  3704                           ;	Boot Block Table Read Protection bit
  3705                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3706   30000D                     	org	3145741
  3707   30000D  40                 	db	64
  3708                           tosu	equ	0xFFF
  3709                           tosh	equ	0xFFE
  3710                           tosl	equ	0xFFD
  3711                           stkptr	equ	0xFFC
  3712                           pclatu	equ	0xFFB
  3713                           pclath	equ	0xFFA
  3714                           pcl	equ	0xFF9
  3715                           tblptru	equ	0xFF8
  3716                           tblptrh	equ	0xFF7
  3717                           tblptrl	equ	0xFF6
  3718                           tablat	equ	0xFF5
  3719                           prodh	equ	0xFF4
  3720                           prodl	equ	0xFF3
  3721                           indf0	equ	0xFEF
  3722                           postinc0	equ	0xFEE
  3723                           postdec0	equ	0xFED
  3724                           preinc0	equ	0xFEC
  3725                           plusw0	equ	0xFEB
  3726                           fsr0h	equ	0xFEA
  3727                           fsr0l	equ	0xFE9
  3728                           wreg	equ	0xFE8
  3729                           indf1	equ	0xFE7
  3730                           postinc1	equ	0xFE6
  3731                           postdec1	equ	0xFE5
  3732                           preinc1	equ	0xFE4
  3733                           plusw1	equ	0xFE3
  3734                           fsr1h	equ	0xFE2
  3735                           fsr1l	equ	0xFE1
  3736                           bsr	equ	0xFE0
  3737                           indf2	equ	0xFDF
  3738                           postinc2	equ	0xFDE
  3739                           postdec2	equ	0xFDD
  3740                           preinc2	equ	0xFDC
  3741                           plusw2	equ	0xFDB
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8

Data Sizes:
    Strings     87
    Constant    0
    Data        16
    BSS         50
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      71
    BANK0           160      0      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Register_Callback@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    Reset_Counter@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Reset_Counter@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    WateringDoneCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2893.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    MoistureCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    S817$callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2890.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[19]), STR_4(CODE[20]), STR_3(CODE[15]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_LCD_Write_String
    _SMS_Set_State->_set_state
    _SMS_Read_Moisture_Value->_ADC_Read
    _Register_Callback->_Reset_Counter
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager
    _Watering_Done_cb->i2_set_state
    _Check_Moisture_cb->i2_set_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2302
                          _FSM_begin
                        _Timer0_init
                        _Timer0_stop
                         _UART2_init
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _UART2_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                           20    20      0    2287
                                             24 COMRAM    20    20      0
                     _Callbacks_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                  _Register_Callback
            _SMS_Read_Moisture_Value
                      _SMS_Set_State
                           _SMS_init
                       _Timer0_start
                         _UART2_send
                     _WaterPump_Init
                      _WaterPump_OFF
                       _WaterPump_ON
       _checking_moisture_status_led
                  _get_current_state
                    _idle_status_led
                          _init_leds
                          _set_state
                _watering_status_led
 ---------------------------------------------------------------------------------
 (2) _watering_status_led                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_leds                                            2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _idle_status_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checking_moisture_status_led                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_ON                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_OFF                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART2_send                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_Set_State                                        2     0      2     157
                                             15 COMRAM     2     0      2
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_Read_Moisture_Value                              4     2      2      23
                                             16 COMRAM     4     2      2
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             14 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Register_Callback                                    4     2      2     338
                                             16 COMRAM     4     2      2
                      _Reset_Counter
 ---------------------------------------------------------------------------------
 (3) _Reset_Counter                                        2     0      2      98
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2     590
                                             18 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1     725
                                             16 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                             16 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              1     1      0      75
                                             15 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_DATA                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Callbacks_Init                                       1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   8     8      0     244
                                              6 COMRAM     8     8      0
                  _Callbacks_Manager
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     222
                                              1 COMRAM     5     5      0
                  _Check_Moisture_cb *
                   _Watering_Done_cb *
 ---------------------------------------------------------------------------------
 (7) _Watering_Done_cb                                     0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (7) _Check_Moisture_cb                                    0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) i2_set_state                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_get_current_state                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _Callbacks_Init
     _LCD_Clear
       _LCD_CMD
         _LCD_DATA
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _LCD_Set_Cursor
       _LCD_CMD
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_DATA
     _Register_Callback
       _Reset_Counter
     _SMS_Read_Moisture_Value
       _ADC_Read
         _ADC_in_progress
         _ADC_start
     _SMS_Set_State
       _set_state
     _SMS_init
       _ADC_init
         _ADC_stop
     _Timer0_start
     _UART2_send
     _WaterPump_Init
     _WaterPump_OFF
     _WaterPump_ON
     _checking_moisture_status_led
     _get_current_state
     _idle_status_led
     _init_leds
     _set_state
     _watering_status_led
   _Timer0_init
   _Timer0_stop
   _UART2_init
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager
     _Check_Moisture_cb *
       i2_get_current_state
       i2_set_state
     _Watering_Done_cb *
       i2_get_current_state
       i2_set_state
   i2_get_current_state
   i2_set_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      47       1       75.5%
BITBIGSFRllll       21      0       0      21        0.0%
BITBIGSFRhhhl       19      0       0      10        0.0%
BITBIGSFRhhhh        D      0       0       9        0.0%
BITBIGSFRlhllh       C      0       0      16        0.0%
BITBIGSFRhhlll       B      0       0      13        0.0%
BITBIGSFRlllhl       9      0       0      20        0.0%
BITBIGSFRlhlhh       7      0       0      15        0.0%
BITBIGSFRlhh         7      0       0      14        0.0%
BITBIGSFRlllhh       6      0       0      19        0.0%
BITBIGSFRlhlll       4      0       0      17        0.0%
BITBIGSFRllh         3      0       0      18        0.0%
BITBIGSFRhhllh       2      0       0      12        0.0%
BITBIGSFRhhlh        1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6F      22        0.0%
DATA                 0      0      6F      24        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Mar 31 10:50:58 2023

                                  l22 0B54                                    l33 09CE  
                                  l25 0A16                                    l34 09DE  
                                  l19 0B44                                    l51 0B48  
                                  l28 0AD2                                    l45 0A7C  
                                  l48 0B50                                    l81 07DC  
                                  l66 0704                                    l83 07F2  
                                  l92 0736                                    l85 0808  
                                  l69 0AF0                                    l78 0A66  
                                  l94 0766                                    l87 081E  
                                  l89 0820                                    l97 090A  
                                  u10 0AD0                                    u11 0ACA  
                                  u20 07D6                                    u21 07D2  
                                  u30 07EC                                    u31 07E8  
                                  u40 0802                                    u16 0AD2  
                                  u41 07FE                                    u50 0818  
                                  u51 0814                   __end_ofi2_set_state 0B3A  
                         _pump_status 0045                                   l103 0876  
                                 l140 0B3E                                   l150 07C4  
                                 l143 0AA8                                   l320 0B28  
                                 l314 0B18                                   l251 0ABE  
                                 l155 0B4C                                   l317 0B20  
                                 l229 054A                                   l238 08C2  
                                 l158 0B30                                   l351 0A80  
                                 _ADC 0041                                   l256 068C  
                                 l272 09B4                                   l281 0B0E  
                                 l354 0A92                                   l275 0B04  
                                 l348 09FA                                   l278 0AFA  
                                 u200 0A8E                                   u201 0A8A  
                                 u400 0876                                   u401 0872  
                                 u410 077E                                   u411 077A  
                                 u420 079E                                   u501 0676  
                                 u421 079A                                   u430 07B4  
                                 u431 07B0                                   u511 037C  
                                 u521 038E                                   u370 09CE  
                                 u530 043E                                   u371 09CA  
                                 u531 043A                                   u460 08C2  
                                 u380 0718                                   u540 0482  
                                 u461 08BE                                   u381 0714  
                                 u541 047E                                   u390 0748  
                                 u470 0624                                   u550 04E6  
                                 u391 0744                                   u471 0620  
                                 u551 04E2                                   u480 0642  
                                 u481 063E                                   u490 065C  
                                 u707 08FA                                   u491 0658  
                                 u717 0904                                   u727 06A2  
                                 u737 06AE                                   u657 03E8  
                                 u747 06C0                                   u667 04B8  
                                 u757 06D0                                   u677 09A0  
                                 u767 0A5E                                   u687 08E0  
                                 u697 08EA                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                     __end_of_LCD_CMD 0A68                        _LCD_Set_Cursor 0706  
                                l1100 08D2                                  l1110 08E8  
                                l1102 08D4                                  l1120 0902  
                                l1112 08F0                                  l1104 08DC  
                                l1050 07C8                                  l1114 08F6  
                                l1106 08DE                                  l1042 0B40  
                                l1122 0B2C                                  l1060 0802  
                                l1052 07D6                                  l1140 0696  
                                l1116 08F8                                  l1108 08E6  
                                l1044 0B52                                  l1132 0B4E  
                                l1062 080A                                  l1054 07DE  
                                l1150 06CE                                  l1142 069C  
                                l1134 068E                                  l1118 0900  
                                l1046 0AC0                                  l1070 0A04  
                                l1222 0B10                                  l1230 09AC  
                                l1064 0818                                  l1056 07EC  
                                l1152 0AE4                                  l1144 06AC  
                                l1136 0692                                  l1080 0A10  
                                l1072 0A06                                  l1224 0B14  
                                l1232 09AE                                  l1058 07F4  
                                l1090 0A54                                  l1146 06B4  
                                l1138 0694                                  l1082 0A14  
                                l1074 0A08                                  l1066 09FC  
                                l1234 09B0                                  l1226 0986  
                                l1092 0A5A                                  l1148 06C8  
                                l1076 0A0A                                  l1068 0A00  
                                l1252 0A80                                  l1260 0AFC  
                                l1236 09B2                                  l1228 0996  
                                l1094 0A5C                                  l1510 072A  
                                l1078 0A0E                                  l1254 0A8E  
                                l1262 0B1A                                  l1270 0A68  
                                l1096 0A64                                  l1088 0A52  
                                l1512 0730                                  l1520 0822  
                                l1176 0B3A                                  l1256 0B22  
                                l1264 0B1C                                  l1600 03A2  
                                l1272 0A74                                  l1280 09EE  
                                l1514 0748                                  l1506 0708  
                                l1098 08C6                                  l1522 082E  
                                l1530 0AA0                                  l1258 0B24  
                                l1266 0AF2                                  l1610 03D2  
                                l1602 03AE                                  l1274 0B46  
                                l1290 09F8                                  l1282 09F0  
                                l1516 075A                                  l1508 0718  
                                l1524 084A                                  l1540 079E  
                                l1268 0B06                                  l1196 0B4A  
                                l1620 0408                                  l1612 03DE  
                                l1604 03B2                                  l1284 09F2  
                                l1276 09E0                                  l1700 0952  
                                l1518 0760                                  l1526 084E  
                                l1542 07B4                                  l1534 0768  
                                l1630 042A                                  l1622 040C  
                                l1614 03F4                                  l1606 03BC  
                                l1286 09F4                                  l1278 09E6  
                                l1710 0964                                  l1702 095A  
                                l1560 087C                                  l1528 0A94  
                                l1544 07BE                                  l1536 077E  
                                l1640 045A                                  l1632 0442  
                                l1624 0416                                  l1616 03F8  
                                l1608 03C8                                  l1288 09F6  
                                l1720 0972                                  l1712 0966  
                                l1704 095E                                  l1562 08AC  
                                l1554 0878                                  l1570 0624  
                                l1538 0788                                  l1650 0490  
                                l1642 046A                                  l1634 0448  
                                l1626 0422                                  l1618 0402  
                                l1722 0974                                  l1714 096A  
                                l1706 0960                                  l1564 08B0  
                                l1572 0642                                  l1660 04C4  
                                l1652 049A                                  l1644 046E  
                                l1636 044C                                  l1628 0426  
                                l1724 097A                                  l1716 096C  
                                l1708 0962                                  l1566 08B2  
                                l1574 065C                                  l1494 09B6  
                                l1670 0504                                  l1662 04D0  
                                l1654 04A6                                  l1646 0486  
                                l1638 0450                                  l1590 036A  
                                l1582 035A                                  l1718 0970  
                                l1576 067E                                  l1568 0614  
                                l1496 09BA                                  l1664 04E6  
                                l1656 04AA                                  l1648 048C  
                                l1592 036E                                  l1584 035E  
                                l1498 0AAA                                  l1578 068A  
                                l1666 04EE                                  l1658 04AE  
                                l1594 0372                                  l1586 0362  
                                l1674 050E                                  l1668 04F4  
                                l1596 0384                                  l1588 0366  
                 LCD_Write_String@str 0013                                  l1758 0524  
                                l1598 0396                                  STR_1 0328  
                                STR_2 0339                                  STR_3 0349  
                                STR_4 0301                                  STR_5 0315  
                                _LATC 000F8B                                  _LATD 000F8C  
               __end_of_Reset_Counter 0AC0                     ?_LCD_Write_String 0013  
                                _main 0952                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0048  
                    __end_of_ADC_Read 09E0                                  prodh 000FF4  
                                prodl 000FF3                                  start 00BC  
                  ??_LCD_Write_String 0015                      __end_of_ADC_init 0A18  
                    __end_of_ADC_stop 0B56                          ___param_bank 000000  
                   FSM_begin@moisture 002B            Callbacks_Manager@callbacks 0006  
                    __end_of_LCD_DATA 0822                           ?_UART2_init 0001  
                         ?_UART2_send 0001                      __end_of_LCD_Init 0706  
            ?_SMS_Read_Moisture_Value 0011                                 ?_main 0001  
                       _SMS_Set_State 0768                                 i2l204 0A32  
                               i2l208 0A4E                                 i2l305 0098  
                               i2l155 0B58                                 i2l158 0B38  
                               i2l248 0612                                 _RCREG 000FAE  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _SPBRG 000FAF                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
                               _TXREG 000FAD                __end_of_LCD_Set_Cursor 0768  
                               pclath 000FFA                                 pclatu 000FFB  
                               tablat 000FF5                      __end_of_SMS_init 0B40  
                               plusw1 000FE3                                 plusw2 000FDB  
                               ttemp5 0049                                 ttemp6 004C  
                               ttemp7 0050                                 status 000FD8  
                               wtemp8 0049                     __end_of_ADC_start 0B46  
                      _LCD_Write_Char 08C4                       __initialization 090C  
                        __end_of_main 0986                           i2_set_state 0B32  
                 _watering_status_led 0AF2                        ?_SMS_Set_State 0010  
                              ??_main 002D               i2set_state@state_to_set 0001  
                   _Check_Moisture_cb 0A18                     __end_of_LCD_Clear 0AF2  
                       __activetblptr 000002                             ??_LCD_CMD 0010  
                  ?_Check_Moisture_cb 0001                       ?_LCD_Set_Cursor 0011  
                ?_watering_status_led 0001                                _ADRESH 000FC4  
                              _ADRESL 000FC3                   ??_Check_Moisture_cb 0002  
                              i2l1500 0B56                                i2l1504 0B34  
                              i2l1550 0A34                                i2l1552 0A48  
                              i2l1546 0A18                                i2l1730 003E  
                              i2l1548 0A2C                                i2l1740 0068  
                              i2l1732 0042                                i2l1750 0094  
                              i2l1742 006A                                i2l1734 0052  
                              i2l1726 002A                                i2l1680 054C  
                              i2l1752 0096                                i2l1744 0078  
                              i2l1736 0056                                i2l1728 002E  
                              i2l1690 059C                                i2l1746 008C  
                              i2l1738 0064                                i2l1692 05BE  
                              i2l1748 0092                                i2l1694 05D6  
                              i2l1686 0550                                i2l1696 0600  
                              i2l1688 0566                                i2l1698 0602  
                   __end_of_FSM_begin 054C                                _SPBRGH 000FB0  
              __end_of_LCD_Write_Char 090C                         ??_Timer0_init 000F  
     __end_of_SMS_Read_Moisture_Value 0AAA                         ??_Timer0_stop 000F  
           __end_of_Check_Moisture_cb 0A34                                clear_0 0932  
                              clear_1 093E                                isa$std 000001  
                   _Callbacks_Manager 054C                  _registered_callbacks 0060  
                        __pdataCOMRAM 002D                             ?_ADC_Read 000F  
                  ?_Callbacks_Manager 0001                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                             ?_ADC_init 0001  
                           ?_ADC_stop 0001                 ??_watering_status_led 000F  
      FSM_begin@WateringDoneCB_Config 0023                       LCD_Set_Cursor@c 0011  
                     LCD_Set_Cursor@r 0012                   ??_Callbacks_Manager 0002  
                           ?_LCD_DATA 0001                            __accesstop 0060  
             __end_of__initialization 0944                             ?_LCD_Init 0001  
                    _Watering_Done_cb 0A34                         ___rparam_used 000001  
                     ?_LCD_Write_Char 0001                        __pcstackCOMRAM 0001  
               __end_of_WaterPump_OFF 0B2A                       ??_SMS_Set_State 0012  
           __end_of_Callbacks_Manager 0614                   __end_of_Timer0_init 0A7E  
                 __end_of_Timer0_stop 0B4A     _tmr0Counter@SystemInterrupts$F994 003D  
          __end_of_timer_overflow_isr 00BC                             ?_SMS_init 0001  
                          ??_ADC_Read 0011                            ??_ADC_init 000F  
                          ??_ADC_stop 000F  __end_of_checking_moisture_status_led 0B10  
        _checking_moisture_status_led 0B06                            __pbssBANK0 0060  
                          ??_LCD_DATA 000F            FSM_begin@MoistureCB_Config 001B  
                          ??_LCD_Init 0011                            __pnvCOMRAM 0047  
                       ?_Timer0_start 0001                          ??_UART2_init 000F  
                        ??_UART2_send 000F                            ??_SMS_init 000F  
                             _LCD_CMD 0A50                     ??_ADC_in_progress 000F  
                             i2u44_40 0A2C                               i2u60_40 003E  
                             i2u44_41 0A28                               i2u60_41 003A  
                             i2u45_40 0A48                               i2u61_40 0052  
                             i2u45_41 0A44                               i2u61_41 004E  
                             i2u62_40 0064                               i2u62_41 0060  
                             i2u63_40 0078                               i2u63_41 0074  
                             i2u56_40 059C                               i2u64_40 008C  
                             i2u56_41 0598                               i2u64_41 0088  
                             i2u57_40 05BE                               i2u57_41 05BA  
                             i2u59_40 0612                               i2u58_48 05EC  
                             i2u59_41 060E                               i2u58_49 0600  
       ?_checking_moisture_status_led 0001                             _ADCHSbits 000F99  
                  __end_of_UART2_init 09FC                    __end_of_UART2_send 0A94  
                             __Hparam 0000                               __Lparam 0000  
                      ??_Timer0_start 000F                           _Timer0_init 0A68  
                         _Timer0_stop 0B46                          ?i2_set_state 0001  
                           _ADC_start 0B40                         ?_WaterPump_ON 0001  
                        __psmallconst 0300                               __pcinit 090C  
                             __ramtop 0300                      ??_LCD_Set_Cursor 0012  
                             __ptext0 0952                               __ptext1 09E0  
                             __ptext2 0B46                               __ptext3 0A68  
                             __ptext4 035A                               __ptext5 0AF2  
                             __ptext6 0986                               __ptext7 0AFC  
                             __ptext8 0B4A                               __ptext9 0B06  
                           _T0CONbits 000FD5                     __end_of_init_leds 09B6  
             Register_Callback@config 0011                             _LCD_Clear 0AE4  
                             _rx_data 0043                               _rx_flag 0044  
                end_of_initialization 0944                     ??_idle_status_led 000F  
                       __Lmediumconst 0000                     __end_of_set_state 0B32  
                           _FSM_begin 035A                        ??_WaterPump_ON 000F  
                           _FSM_state 0047                   fp__Watering_Done_cb 0000  
                           _RCSTAbits 000FAB                            ?_ADC_start 0001  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                             _PORTBbits 000F81  
            __end_of_Watering_Done_cb 0A50                            LCD_CMD@CMD 0010  
                      _WaterPump_Init 0B10                             _TRISBbits 000F93  
                           _TRISCbits 000F94                            ?_LCD_Clear 0001  
                   LCD_Write_String@i 0017                      ??_LCD_Write_Char 0010  
              Callbacks_Init@callback 000F                         _Reset_Counter 0AAA  
                           _TXSTAbits 000FAC                            ?_FSM_begin 0001  
                      _Callbacks_Init 0878                      _LCD_Write_String 0822  
                       __pidataCOMRAM 0AD4                __end_of_WaterPump_Init 0B1A  
         __end_of_watering_status_led 0AFC                   start_initialization 090C  
             _SMS_Read_Moisture_Value 0A94                   i2_get_current_state 0B56  
                __end_of_Timer0_start 0B52                  fp__Check_Moisture_cb 0000  
                  _timer_overflow_isr 0008                        ?_Reset_Counter 000F  
              __end_of_Callbacks_Init 08C4                   ?_timer_overflow_isr 0001  
                ?i2_get_current_state 0001                           ??_ADC_start 000F  
                     _ADC_in_progress 0AC0                       ?_WaterPump_Init 0001  
               __end_of_SMS_Set_State 07C6                              ?_LCD_CMD 0001  
                         __pbssCOMRAM 003D                  ??_timer_overflow_isr 0007  
                         ??_LCD_Clear 0011                  __end_of_WaterPump_ON 0B22  
                   _Register_Callback 0614                       ?_Callbacks_Init 0001  
                  ?_Register_Callback 0011                           ??_FSM_begin 0019  
               ??i2_get_current_state 0001                          ?_Timer0_init 0001  
                        ?_Timer0_stop 0001                             __pintcode 0008  
                 ??_Register_Callback 0013                           __smallconst 0300  
                     _idle_status_led 0AFC             ??_SMS_Read_Moisture_Value 0013  
                            _ADC_Read 09B6                              _ADC_init 09FC  
                            _ADC_stop 0B52       SMS_Read_Moisture_Value@moisture 0013  
           __end_of_Register_Callback 068E                             _init_leds 0986  
                     ??_Reset_Counter 0011                              _LCD_DATA 07C6  
                            _LCD_Init 068E               __end_of_ADC_in_progress 0AD4  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                           _set_state 0B2A                         _WaterPump_OFF 0B22  
                          _ADCON0bits 000FC2                            _ADCON1bits 000FC1  
                          _ADCON2bits 000FC0                              _SMS_init 0B3A  
                   ?_Watering_Done_cb 0001                   Reset_Counter@config 000F  
                  ??_Watering_Done_cb 0002                            ?_init_leds 0001  
                         _INTCON2bits 000FF1                             copy_data0 0920  
            __end_of_LCD_Write_String 0878                        UART2_send@data 000F  
                            __Hrparam 0000                              __Lrparam 0000  
                 LCD_Write_Char@High4 0011                            ?_set_state 0001  
                        _Timer0_start 0B4E                        ?_WaterPump_OFF 0001  
             __end_of_idle_status_led 0B06                            _ANSEL0bits 000FB8  
                            __ptext10 0B1A                              __ptext11 0B22  
                            __ptext20 0A94                              __ptext12 0B10  
                            __ptext21 09B6                              __ptext13 0A7E  
                            __ptext30 0AE4                              __ptext22 0B40  
                            __ptext14 0B4E                              __ptext31 0A50  
                            __ptext23 0AC0                              __ptext15 0B3A  
                            __ptext40 0000                              __ptext32 07C6  
                            __ptext24 0614                              __ptext16 09FC  
                            __ptext33 0878                              __ptext25 0AAA  
                            __ptext17 0B52                              __ptext26 0822  
                            __ptext18 0768                              __ptext35 054C  
                            __ptext27 08C4                              __ptext19 0B2A  
                            __ptext36 0A18                              __ptext28 0706  
                            __ptext37 0A34                              __ptext29 068E  
                            __ptext38 0B32                              __ptext39 0B56  
                      _callback_count 0046                      ?_ADC_in_progress 0001  
                    ??_WaterPump_Init 000F                              isa$xinst 000000  
                   _get_current_state 0B4A                          _WaterPump_ON 0B1A  
                            int$flags 0048                           _tmr0Counter 003F  
                 LCD_Set_Cursor@High4 0014                    ?_get_current_state 0001  
                 ??_get_current_state 000F                            _INTCONbits 000FF2  
                  LCD_Write_Char@Data 0012                    LCD_Write_Char@Low4 0010  
                         ??_init_leds 000F                      ??_Callbacks_Init 000F  
               SMS_Set_State@moisture 0010                              intlevel2 0000  
           __end_of_get_current_state 0B4E                            _OSCCONbits 000FD3  
                     ??_WaterPump_OFF 000F                         ??i2_set_state 0001  
                         ??_set_state 000F        ??_checking_moisture_status_led 000F  
                  LCD_Set_Cursor@Low4 0013                    LCD_Set_Cursor@Temp 0015  
                    ?_idle_status_led 0001                            _UART2_init 09E0  
                          _UART2_send 0A7E                          LCD_DATA@Data 000F  
               set_state@state_to_set 000F                        FSM_begin@F2890 0035  
         __end_ofi2_get_current_state 0B5A                        FSM_begin@F2893 002D  
