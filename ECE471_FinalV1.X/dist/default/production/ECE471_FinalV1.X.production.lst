

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Apr 10 22:10:01 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    59                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    60   000000                     
    61                           ; Version 2.40
    62                           ; Generated 17/11/2021 GMT
    63                           ; 
    64                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4331 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000000                     
    97                           	psect	idataCOMRAM
    98   000AF6                     __pidataCOMRAM:
    99                           	callstack 0
   100                           
   101                           ;initializer for _WateringDoneCB_Config
   102   000AF6  0002               	dw	2
   103   000AF8  FC                 	db	low _Watering_Done_cb
   104   000AF9  09                 	db	high _Watering_Done_cb
   105   000AFA  00                 	db	0
   106   000AFB  00                 	db	0
   107   000AFC  00                 	db	0
   108   000AFD  00                 	db	0
   109                           
   110                           ;initializer for _MoistureCB_Config
   111   000AFE  0004               	dw	4
   112   000B00  D4                 	db	low _Check_Moisture_cb
   113   000B01  09                 	db	high _Check_Moisture_cb
   114   000B02  00                 	db	0
   115   000B03  00                 	db	0
   116   000B04  00                 	db	0
   117   000B05  00                 	db	0
   118   000000                     _RCREG	set	4014
   119   000000                     _TXREG	set	4013
   120   000000                     _TXSTAbits	set	4012
   121   000000                     _SPBRG	set	4015
   122   000000                     _SPBRGH	set	4016
   123   000000                     _ADRESL	set	4035
   124   000000                     _ADRESH	set	4036
   125                           
   126                           	psect	nvCOMRAM
   127   000038                     __pnvCOMRAM:
   128                           	callstack 0
   129   000038                     _FSM_state:
   130                           	callstack 0
   131   000038                     	ds	1
   132   000000                     _TRISC	set	3988
   133   000000                     _TRISBbits	set	3987
   134   000000                     _PORTBbits	set	3969
   135   000000                     _TRISB	set	3987
   136   000000                     _ADCHSbits	set	3993
   137   000000                     _ADCON1bits	set	4033
   138   000000                     _ADCON0bits	set	4034
   139   000000                     _PIR1bits	set	3998
   140   000000                     _RCSTAbits	set	4011
   141   000000                     _ANSEL0bits	set	4024
   142   000000                     _ADCON2bits	set	4032
   143   000000                     _RCONbits	set	4048
   144   000000                     _OSCCONbits	set	4051
   145   000000                     _T0CONbits	set	4053
   146   000000                     _INTCON2bits	set	4081
   147   000000                     _INTCONbits	set	4082
   148   000000                     _TMR0H	set	4055
   149   000000                     _TMR0L	set	4054
   150   000000                     _TRISD	set	3989
   151   000000                     _TRISCbits	set	3988
   152   000000                     _LATC	set	3979
   153   000000                     _LATD	set	3980
   154                           
   155                           	psect	smallconst
   156   000300                     __psmallconst:
   157                           	callstack 0
   158   000300  00                 	db	0
   159   000301                     STR_4:
   160   000301  20                 	db	32
   161   000302  3E                 	db	62	;'>'
   162   000303  57                 	db	87	;'W'
   163   000304  41                 	db	65	;'A'
   164   000305  54                 	db	84	;'T'
   165   000306  45                 	db	69	;'E'
   166   000307  52                 	db	82	;'R'
   167   000308  49                 	db	73	;'I'
   168   000309  4E                 	db	78	;'N'
   169   00030A  47                 	db	71	;'G'
   170   00030B  20                 	db	32
   171   00030C  50                 	db	80	;'P'
   172   00030D  4C                 	db	76	;'L'
   173   00030E  41                 	db	65	;'A'
   174   00030F  4E                 	db	78	;'N'
   175   000310  54                 	db	84	;'T'
   176   000311  53                 	db	83	;'S'
   177   000312  3C                 	db	60	;'<'
   178   000313  00                 	db	0
   179   000314  00                 	db	0
   180   000315                     STR_5:
   181   000315  20                 	db	32
   182   000316  3E                 	db	62	;'>'
   183   000317  43                 	db	67	;'C'
   184   000318  48                 	db	72	;'H'
   185   000319  45                 	db	69	;'E'
   186   00031A  43                 	db	67	;'C'
   187   00031B  4B                 	db	75	;'K'
   188   00031C  49                 	db	73	;'I'
   189   00031D  4E                 	db	78	;'N'
   190   00031E  47                 	db	71	;'G'
   191   00031F  20                 	db	32
   192   000320  4D                 	db	77	;'M'
   193   000321  4F                 	db	79	;'O'
   194   000322  49                 	db	73	;'I'
   195   000323  53                 	db	83	;'S'
   196   000324  54                 	db	84	;'T'
   197   000325  3C                 	db	60	;'<'
   198   000326  00                 	db	0
   199   000327  00                 	db	0
   200   000328                     STR_1:
   201   000328  20                 	db	32
   202   000329  50                 	db	80	;'P'
   203   00032A  6C                 	db	108	;'l'
   204   00032B  61                 	db	97	;'a'
   205   00032C  6E                 	db	110	;'n'
   206   00032D  74                 	db	116	;'t'
   207   00032E  20                 	db	32
   208   00032F  57                 	db	87	;'W'
   209   000330  61                 	db	97	;'a'
   210   000331  74                 	db	116	;'t'
   211   000332  65                 	db	101	;'e'
   212   000333  72                 	db	114	;'r'
   213   000334  69                 	db	105	;'i'
   214   000335  6E                 	db	110	;'n'
   215   000336  67                 	db	103	;'g'
   216   000337  00                 	db	0
   217   000338  00                 	db	0
   218   000339                     STR_2:
   219   000339  53                 	db	83	;'S'
   220   00033A  79                 	db	121	;'y'
   221   00033B  73                 	db	115	;'s'
   222   00033C  74                 	db	116	;'t'
   223   00033D  65                 	db	101	;'e'
   224   00033E  6D                 	db	109	;'m'
   225   00033F  20                 	db	32
   226   000340  49                 	db	73	;'I'
   227   000341  6E                 	db	110	;'n'
   228   000342  69                 	db	105	;'i'
   229   000343  74                 	db	116	;'t'
   230   000344  2E                 	db	46
   231   000345  2E                 	db	46
   232   000346  2E                 	db	46
   233   000347  00                 	db	0
   234   000348  00                 	db	0
   235   000349                     STR_3:
   236   000349  20                 	db	32
   237   00034A  3E                 	db	62	;'>'
   238   00034B  49                 	db	73	;'I'
   239   00034C  44                 	db	68	;'D'
   240   00034D  4C                 	db	76	;'L'
   241   00034E  45                 	db	69	;'E'
   242   00034F  20                 	db	32
   243   000350  53                 	db	83	;'S'
   244   000351  54                 	db	84	;'T'
   245   000352  41                 	db	65	;'A'
   246   000353  54                 	db	84	;'T'
   247   000354  45                 	db	69	;'E'
   248   000355  3C                 	db	60	;'<'
   249   000356  00                 	db	0
   250   000357  00                 	db	0
   251   000358  00                 	db	0	; dummy byte at the end
   252   000000                     
   253                           ; #config settings
   254                           
   255                           	psect	cinit
   256   000900                     __pcinit:
   257                           	callstack 0
   258   000900                     start_initialization:
   259                           	callstack 0
   260   000900                     __initialization:
   261                           	callstack 0
   262                           
   263                           ; Initialize objects allocated to COMRAM (16 bytes)
   264                           ; load TBLPTR registers with __pidataCOMRAM
   265   000900  0EF6               	movlw	low __pidataCOMRAM
   266   000902  6EF6               	movwf	tblptrl,c
   267   000904  0E0A               	movlw	high __pidataCOMRAM
   268   000906  6EF7               	movwf	tblptrh,c
   269   000908  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   270   00090A  6EF8               	movwf	tblptru,c
   271   00090C  EE00  F01E         	lfsr	0,__pdataCOMRAM
   272   000910  EE10 F010          	lfsr	1,16
   273   000914                     copy_data0:
   274   000914  0009               	tblrd		*+
   275   000916  CFF5 FFEE          	movff	tablat,postinc0
   276   00091A  50E5               	movf	postdec1,w,c
   277   00091C  50E1               	movf	fsr1l,w,c
   278   00091E  E1FA               	bnz	copy_data0
   279                           
   280                           ; Clear objects allocated to BANK0 (40 bytes)
   281   000920  EE00  F060         	lfsr	0,__pbssBANK0
   282   000924  0E28               	movlw	40
   283   000926                     clear_0:
   284   000926  6AEE               	clrf	postinc0,c
   285   000928  06E8               	decf	wreg,f,c
   286   00092A  E1FD               	bnz	clear_0
   287                           
   288                           ; Clear objects allocated to COMRAM (10 bytes)
   289   00092C  EE00  F02E         	lfsr	0,__pbssCOMRAM
   290   000930  0E0A               	movlw	10
   291   000932                     clear_1:
   292   000932  6AEE               	clrf	postinc0,c
   293   000934  06E8               	decf	wreg,f,c
   294   000936  E1FD               	bnz	clear_1
   295   000938                     end_of_initialization:
   296                           	callstack 0
   297   000938                     __end_of__initialization:
   298                           	callstack 0
   299   000938  9039               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   300   00093A  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   301   00093C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   302   00093E  6EF8               	movwf	tblptru,c
   303   000940  0100               	movlb	0
   304   000942  EFA3  F004         	goto	_main	;jump to C main() function
   305                           
   306                           	psect	bssCOMRAM
   307   00002E                     __pbssCOMRAM:
   308                           	callstack 0
   309   00002E                     _tmr0Counter@SystemInterrupts$F994:
   310                           	callstack 0
   311   00002E                     	ds	2
   312   000030                     _tmr0Counter:
   313                           	callstack 0
   314   000030                     	ds	2
   315   000032                     _ADC:
   316                           	callstack 0
   317   000032                     	ds	2
   318   000034                     _rx_data:
   319                           	callstack 0
   320   000034                     	ds	1
   321   000035                     _rx_flag:
   322                           	callstack 0
   323   000035                     	ds	1
   324   000036                     _pump_status:
   325                           	callstack 0
   326   000036                     	ds	1
   327   000037                     _callback_count:
   328                           	callstack 0
   329   000037                     	ds	1
   330                           
   331                           	psect	dataCOMRAM
   332   00001E                     __pdataCOMRAM:
   333                           	callstack 0
   334   00001E                     _WateringDoneCB_Config:
   335                           	callstack 0
   336   00001E                     	ds	8
   337   000026                     _MoistureCB_Config:
   338                           	callstack 0
   339   000026                     	ds	8
   340                           
   341                           	psect	bssBANK0
   342   000060                     __pbssBANK0:
   343                           	callstack 0
   344   000060                     _registered_callbacks:
   345                           	callstack 0
   346   000060                     	ds	40
   347                           
   348                           	psect	cstackCOMRAM
   349   000001                     __pcstackCOMRAM:
   350                           	callstack 0
   351   000001                     i2set_state@state_to_set:
   352                           	callstack 0
   353   000001                     i2Reset_Counter@config:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x0
   357   000001                     	ds	2
   358   000003                     
   359                           ; 1 bytes @ 0x2
   360   000003                     	ds	4
   361   000007                     Callbacks_Manager@callbacks:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0x6
   365   000007                     	ds	1
   366   000008                     ??_timer_overflow_isr:
   367                           
   368                           ; 1 bytes @ 0x7
   369   000008                     	ds	8
   370   000010                     ??_init_leds:
   371   000010                     ?_ADC_Read:
   372                           	callstack 0
   373   000010                     LCD_DATA@Data:
   374                           	callstack 0
   375   000010                     set_state@state_to_set:
   376                           	callstack 0
   377   000010                     Callbacks_Init@callback:
   378                           	callstack 0
   379   000010                     UART2_send@data:
   380                           	callstack 0
   381   000010                     Reset_Counter@config:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0xF
   385   000010                     	ds	1
   386   000011                     LCD_CMD@CMD:
   387                           	callstack 0
   388   000011                     LCD_Write_Char@Low4:
   389                           	callstack 0
   390   000011                     SMS_Set_State@moisture:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x10
   394   000011                     	ds	1
   395   000012                     ??_LCD_Init:
   396   000012                     ?_SMS_Read_Moisture_Value:
   397                           	callstack 0
   398   000012                     LCD_Set_Cursor@c:
   399                           	callstack 0
   400   000012                     LCD_Write_Char@High4:
   401                           	callstack 0
   402   000012                     Register_Callback@config:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x11
   406   000012                     	ds	1
   407   000013                     LCD_Set_Cursor@r:
   408                           	callstack 0
   409   000013                     LCD_Write_Char@Data:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x12
   413   000013                     	ds	1
   414   000014                     LCD_Set_Cursor@Low4:
   415                           	callstack 0
   416   000014                     LCD_Write_String@str:
   417                           	callstack 0
   418   000014                     SMS_Read_Moisture_Value@moisture:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x13
   422   000014                     	ds	1
   423   000015                     LCD_Set_Cursor@High4:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0x14
   427   000015                     	ds	1
   428   000016                     ??_LCD_Write_String:
   429   000016                     LCD_Set_Cursor@Temp:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0x15
   433   000016                     	ds	2
   434   000018                     LCD_Write_String@i:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x17
   438   000018                     	ds	2
   439   00001A                     ??_FSM_begin:
   440                           
   441                           ; 1 bytes @ 0x19
   442   00001A                     	ds	2
   443   00001C                     FSM_begin@moisture:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x1B
   447   00001C                     	ds	2
   448   00001E                     
   449                           ; 1 bytes @ 0x1D
   450 ;;
   451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   452 ;;
   453 ;; *************** function _main *****************
   454 ;; Defined at:
   455 ;;		line 17 in file "main.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   469 ;;      Params:         0       0       0       0
   470 ;;      Locals:         0       0       0       0
   471 ;;      Temps:          0       0       0       0
   472 ;;      Totals:         0       0       0       0
   473 ;;Total ram usage:        0 bytes
   474 ;; Hardware stack levels required when called: 8
   475 ;; This function calls:
   476 ;;		_FSM_begin
   477 ;;		_Timer0_init
   478 ;;		_Timer0_stop
   479 ;;		_UART2_init
   480 ;;		_set_state
   481 ;; This function is called by:
   482 ;;		Startup code after reset
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text0
   487   000946                     __ptext0:
   488                           	callstack 0
   489   000946                     _main:
   490                           	callstack 23
   491   000946                     
   492                           ;main.c: 20:     OSCCONbits.IRCF0 = 1;
   493   000946  88D3               	bsf	211,4,c	;volatile
   494                           
   495                           ;main.c: 21:     OSCCONbits.IRCF1 = 1;
   496   000948  8AD3               	bsf	211,5,c	;volatile
   497                           
   498                           ;main.c: 22:     OSCCONbits.IRCF2 = 1;
   499   00094A  8CD3               	bsf	211,6,c	;volatile
   500                           
   501                           ;main.c: 25:     TRISCbits.RC3 = 1;
   502   00094C  8694               	bsf	148,3,c	;volatile
   503   00094E                     
   504                           ;main.c: 28:     Timer0_stop();
   505   00094E  ECB4  F005         	call	_Timer0_stop	;wreg free
   506   000952                     
   507                           ;main.c: 31:     RCONbits.IPEN = 1;
   508   000952  8ED0               	bsf	208,7,c	;volatile
   509   000954                     
   510                           ;main.c: 34:     INTCONbits.TMR0IE = 1;
   511   000954  8AF2               	bsf	242,5,c	;volatile
   512   000956                     
   513                           ;main.c: 37:     INTCONbits.INT0IE = 1;
   514   000956  88F2               	bsf	242,4,c	;volatile
   515   000958                     
   516                           ;main.c: 40:     INTCON2bits.TMR0IP = 1;
   517   000958  84F1               	bsf	241,2,c	;volatile
   518   00095A                     
   519                           ;main.c: 43:     Timer0_init();
   520   00095A  EC3A  F005         	call	_Timer0_init	;wreg free
   521   00095E                     
   522                           ;main.c: 46:     INTCON2bits.INTEDG0 = 1;
   523   00095E  8CF1               	bsf	241,6,c	;volatile
   524   000960                     
   525                           ;main.c: 49:     UART2_init();
   526   000960  EC12  F005         	call	_UART2_init	;wreg free
   527   000964                     
   528                           ;main.c: 52:     INTCONbits.GIEH = 1;
   529   000964  8EF2               	bsf	242,7,c	;volatile
   530   000966                     
   531                           ;main.c: 53:     INTCONbits.GIEL = 1;
   532   000966  8CF2               	bsf	242,6,c	;volatile
   533   000968                     
   534                           ;main.c: 56:     set_state(INIT_STATE);
   535   000968  0E00               	movlw	0
   536   00096A  ECA6  F005         	call	_set_state
   537   00096E                     l1738:
   538                           
   539                           ;main.c: 59:     {;main.c: 61:      FSM_begin();
   540   00096E  ECAD  F001         	call	_FSM_begin	;wreg free
   541   000972  EFB7  F004         	goto	l1738
   542   000976  EF5E  F000         	goto	start
   543   00097A                     __end_of_main:
   544                           	callstack 0
   545                           
   546 ;; *************** function _UART2_init *****************
   547 ;; Defined at:
   548 ;;		line 12 in file "PIC18F4331_UART2.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   562 ;;      Params:         0       0       0       0
   563 ;;      Locals:         0       0       0       0
   564 ;;      Temps:          0       0       0       0
   565 ;;      Totals:         0       0       0       0
   566 ;;Total ram usage:        0 bytes
   567 ;; Hardware stack levels used: 1
   568 ;; Hardware stack levels required when called: 4
   569 ;; This function calls:
   570 ;;		Nothing
   571 ;; This function is called by:
   572 ;;		_main
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           	psect	text1
   577   000A24                     __ptext1:
   578                           	callstack 0
   579   000A24                     _UART2_init:
   580                           	callstack 26
   581   000A24                     
   582                           ;PIC18F4331_UART2.c: 14:     TRISCbits.RC6 = 0;
   583   000A24  9C94               	bcf	148,6,c	;volatile
   584                           
   585                           ;PIC18F4331_UART2.c: 15:     TRISCbits.RC7 = 1;
   586   000A26  8E94               	bsf	148,7,c	;volatile
   587                           
   588                           ;PIC18F4331_UART2.c: 18:     RCSTAbits.SPEN = 1;
   589   000A28  8EAB               	bsf	171,7,c	;volatile
   590   000A2A                     
   591                           ;PIC18F4331_UART2.c: 21:     SPBRGH = 0;
   592   000A2A  0E00               	movlw	0
   593   000A2C  6EB0               	movwf	176,c	;volatile
   594                           
   595                           ;PIC18F4331_UART2.c: 22:     SPBRG = 51;
   596   000A2E  0E33               	movlw	51
   597   000A30  6EAF               	movwf	175,c	;volatile
   598   000A32                     
   599                           ;PIC18F4331_UART2.c: 25:     TXSTAbits.TX9 = 0;
   600   000A32  9CAC               	bcf	172,6,c	;volatile
   601   000A34                     
   602                           ;PIC18F4331_UART2.c: 26:     TXSTAbits.TXEN = 1;
   603   000A34  8AAC               	bsf	172,5,c	;volatile
   604   000A36                     
   605                           ;PIC18F4331_UART2.c: 27:     TXSTAbits.SYNC = 0;
   606   000A36  98AC               	bcf	172,4,c	;volatile
   607   000A38                     
   608                           ;PIC18F4331_UART2.c: 28:     TXSTAbits.BRGH = 1;
   609   000A38  84AC               	bsf	172,2,c	;volatile
   610   000A3A                     
   611                           ;PIC18F4331_UART2.c: 29:     RCSTAbits.RX9 = 0;
   612   000A3A  9CAB               	bcf	171,6,c	;volatile
   613   000A3C                     
   614                           ;PIC18F4331_UART2.c: 30:     RCSTAbits.CREN = 1;
   615   000A3C  88AB               	bsf	171,4,c	;volatile
   616   000A3E  0012               	return		;funcret
   617   000A40                     __end_of_UART2_init:
   618                           	callstack 0
   619                           
   620 ;; *************** function _Timer0_stop *****************
   621 ;; Defined at:
   622 ;;		line 92 in file "PIC18F4331_Timer.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;		None
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		None
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   636 ;;      Params:         0       0       0       0
   637 ;;      Locals:         0       0       0       0
   638 ;;      Temps:          0       0       0       0
   639 ;;      Totals:         0       0       0       0
   640 ;;Total ram usage:        0 bytes
   641 ;; Hardware stack levels used: 1
   642 ;; Hardware stack levels required when called: 4
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text2
   651   000B68                     __ptext2:
   652                           	callstack 0
   653   000B68                     _Timer0_stop:
   654                           	callstack 26
   655   000B68                     
   656                           ;PIC18F4331_Timer.c: 94:     T0CONbits.TMR0ON = 0;
   657   000B68  9ED5               	bcf	213,7,c	;volatile
   658   000B6A  0012               	return		;funcret
   659   000B6C                     __end_of_Timer0_stop:
   660                           	callstack 0
   661                           
   662 ;; *************** function _Timer0_init *****************
   663 ;; Defined at:
   664 ;;		line 56 in file "PIC18F4331_Timer.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, status,2
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   678 ;;      Params:         0       0       0       0
   679 ;;      Locals:         0       0       0       0
   680 ;;      Temps:          0       0       0       0
   681 ;;      Totals:         0       0       0       0
   682 ;;Total ram usage:        0 bytes
   683 ;; Hardware stack levels used: 1
   684 ;; Hardware stack levels required when called: 4
   685 ;; This function calls:
   686 ;;		Nothing
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text3
   693   000A74                     __ptext3:
   694                           	callstack 0
   695   000A74                     _Timer0_init:
   696                           	callstack 26
   697   000A74                     
   698                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   699   000A74  80D5               	bsf	213,0,c	;volatile
   700                           
   701                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 0;
   702   000A76  92D5               	bcf	213,1,c	;volatile
   703                           
   704                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   705   000A78  84D5               	bsf	213,2,c	;volatile
   706                           
   707                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   708   000A7A  96D5               	bcf	213,3,c	;volatile
   709                           
   710                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   711   000A7C  9AD5               	bcf	213,5,c	;volatile
   712                           
   713                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   714   000A7E  9CD5               	bcf	213,6,c	;volatile
   715   000A80                     
   716                           ;PIC18F4331_Timer.c: 80:     TMR0L = (0x7C);
   717   000A80  0E7C               	movlw	124
   718   000A82  6ED6               	movwf	214,c	;volatile
   719                           
   720                           ;PIC18F4331_Timer.c: 81:     TMR0H = (0xE1);
   721   000A84  0EE1               	movlw	225
   722   000A86  6ED7               	movwf	215,c	;volatile
   723   000A88  0012               	return		;funcret
   724   000A8A                     __end_of_Timer0_init:
   725                           	callstack 0
   726                           
   727 ;; *************** function _FSM_begin *****************
   728 ;; Defined at:
   729 ;;		line 35 in file "System_FSM.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;  moisture        2   27[COMRAM] unsigned short 
   734 ;; Return value:  Size  Location     Type
   735 ;;                  1    wreg      void 
   736 ;; Registers used:
   737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   743 ;;      Params:         0       0       0       0
   744 ;;      Locals:         2       0       0       0
   745 ;;      Temps:          2       0       0       0
   746 ;;      Totals:         4       0       0       0
   747 ;;Total ram usage:        4 bytes
   748 ;; Hardware stack levels used: 1
   749 ;; Hardware stack levels required when called: 7
   750 ;; This function calls:
   751 ;;		_Callbacks_Init
   752 ;;		_LCD_Clear
   753 ;;		_LCD_Init
   754 ;;		_LCD_Set_Cursor
   755 ;;		_LCD_Write_String
   756 ;;		_Register_Callback
   757 ;;		_Reset_Counter
   758 ;;		_SMS_Read_Moisture_Value
   759 ;;		_SMS_Set_State
   760 ;;		_SMS_init
   761 ;;		_Timer0_start
   762 ;;		_UART2_send
   763 ;;		_WaterPump_Init
   764 ;;		_WaterPump_OFF
   765 ;;		_WaterPump_ON
   766 ;;		_checking_moisture_status_led
   767 ;;		_get_current_state
   768 ;;		_idle_status_led
   769 ;;		_init_leds
   770 ;;		_set_state
   771 ;;		_watering_status_led
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text4
   778   00035A                     __ptext4:
   779                           	callstack 0
   780   00035A                     _FSM_begin:
   781                           	callstack 23
   782   00035A                     
   783                           ;System_FSM.c: 37:     switch(get_current_state())
   784   00035A  EF81  F002         	goto	l1688
   785   00035E                     l1600:
   786                           
   787                           ;System_FSM.c: 40:         {;System_FSM.c: 41:             SMS_init();
   788   00035E  ECAE  F005         	call	_SMS_init	;wreg free
   789   000362                     
   790                           ;System_FSM.c: 42:             Callbacks_Init();
   791   000362  EC36  F004         	call	_Callbacks_Init	;wreg free
   792   000366                     
   793                           ;System_FSM.c: 43:             WaterPump_Init();
   794   000366  EC99  F005         	call	_WaterPump_Init	;wreg free
   795   00036A                     
   796                           ;System_FSM.c: 44:             init_leds();
   797   00036A  ECBD  F004         	call	_init_leds	;wreg free
   798   00036E                     
   799                           ;System_FSM.c: 45:             LCD_Init();
   800   00036E  EC41  F003         	call	_LCD_Init	;wreg free
   801   000372                     
   802                           ;System_FSM.c: 47:             Register_Callback(&MoistureCB_Config);
   803   000372  0E26               	movlw	low _MoistureCB_Config
   804   000374  6E12               	movwf	Register_Callback@config^0,c
   805   000376  0E00               	movlw	high _MoistureCB_Config
   806   000378  6E13               	movwf	(Register_Callback@config+1)^0,c
   807   00037A  EC04  F003         	call	_Register_Callback	;wreg free
   808   00037E                     
   809                           ;System_FSM.c: 48:             Register_Callback(&WateringDoneCB_Config);
   810   00037E  0E1E               	movlw	low _WateringDoneCB_Config
   811   000380  6E12               	movwf	Register_Callback@config^0,c
   812   000382  0E00               	movlw	high _WateringDoneCB_Config
   813   000384  6E13               	movwf	(Register_Callback@config+1)^0,c
   814   000386  EC04  F003         	call	_Register_Callback	;wreg free
   815   00038A                     
   816                           ;System_FSM.c: 51:             LCD_Clear();
   817   00038A  EC83  F005         	call	_LCD_Clear	;wreg free
   818   00038E                     
   819                           ;System_FSM.c: 52:             LCD_Set_Cursor(1,1);
   820   00038E  0E01               	movlw	1
   821   000390  6E12               	movwf	LCD_Set_Cursor@c^0,c
   822   000392  0E01               	movlw	1
   823   000394  EC7D  F003         	call	_LCD_Set_Cursor
   824   000398                     
   825                           ;System_FSM.c: 53:             LCD_Write_String(" Plant Watering\0");
   826   000398  0E28               	movlw	low STR_1
   827   00039A  6E14               	movwf	LCD_Write_String@str^0,c
   828   00039C  0E03               	movlw	high STR_1
   829   00039E  6E15               	movwf	(LCD_Write_String@str+1)^0,c
   830   0003A0  EC0B  F004         	call	_LCD_Write_String	;wreg free
   831   0003A4                     
   832                           ;System_FSM.c: 54:             LCD_Set_Cursor(2,1);
   833   0003A4  0E01               	movlw	1
   834   0003A6  6E12               	movwf	LCD_Set_Cursor@c^0,c
   835   0003A8  0E02               	movlw	2
   836   0003AA  EC7D  F003         	call	_LCD_Set_Cursor
   837   0003AE                     
   838                           ;System_FSM.c: 55:             LCD_Write_String("System Init...\0");
   839   0003AE  0E39               	movlw	low STR_2
   840   0003B0  6E14               	movwf	LCD_Write_String@str^0,c
   841   0003B2  0E03               	movlw	high STR_2
   842   0003B4  6E15               	movwf	(LCD_Write_String@str+1)^0,c
   843   0003B6  EC0B  F004         	call	_LCD_Write_String	;wreg free
   844   0003BA                     
   845                           ;System_FSM.c: 57:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   846   0003BA  0E0B               	movlw	11
   847   0003BC  6E1B               	movwf	(??_FSM_begin+1)^0,c
   848   0003BE  0E26               	movlw	38
   849   0003C0  6E1A               	movwf	??_FSM_begin^0,c
   850   0003C2  0E5E               	movlw	94
   851   0003C4                     u617:
   852   0003C4  2EE8               	decfsz	wreg,f,c
   853   0003C6  D7FE               	bra	u617
   854   0003C8  2E1A               	decfsz	??_FSM_begin^0,f,c
   855   0003CA  D7FC               	bra	u617
   856   0003CC  2E1B               	decfsz	(??_FSM_begin+1)^0,f,c
   857   0003CE  D7FA               	bra	u617
   858   0003D0                     
   859                           ;System_FSM.c: 59:             Timer0_start();
   860   0003D0  ECB8  F005         	call	_Timer0_start	;wreg free
   861   0003D4                     
   862                           ;System_FSM.c: 62:             set_state(IDLE_STATE);
   863   0003D4  0E01               	movlw	1
   864   0003D6  ECA6  F005         	call	_set_state
   865                           
   866                           ;System_FSM.c: 64:             break;
   867   0003DA  EF9F  F002         	goto	l227
   868   0003DE                     l1630:
   869                           
   870                           ;System_FSM.c: 68:         {;System_FSM.c: 70:             UART2_send('S');
   871   0003DE  0E53               	movlw	83
   872   0003E0  EC45  F005         	call	_UART2_send
   873   0003E4                     
   874                           ;System_FSM.c: 72:             LCD_Clear();
   875   0003E4  EC83  F005         	call	_LCD_Clear	;wreg free
   876   0003E8                     
   877                           ;System_FSM.c: 73:             LCD_Set_Cursor(1,1);
   878   0003E8  0E01               	movlw	1
   879   0003EA  6E12               	movwf	LCD_Set_Cursor@c^0,c
   880   0003EC  0E01               	movlw	1
   881   0003EE  EC7D  F003         	call	_LCD_Set_Cursor
   882   0003F2                     
   883                           ;System_FSM.c: 74:             LCD_Write_String(" >IDLE STATE<\0");
   884   0003F2  0E49               	movlw	low STR_3
   885   0003F4  6E14               	movwf	LCD_Write_String@str^0,c
   886   0003F6  0E03               	movlw	high STR_3
   887   0003F8  6E15               	movwf	(LCD_Write_String@str+1)^0,c
   888   0003FA  EC0B  F004         	call	_LCD_Write_String	;wreg free
   889   0003FE                     
   890                           ;System_FSM.c: 76:             WaterPump_OFF();
   891   0003FE  ECA2  F005         	call	_WaterPump_OFF	;wreg free
   892   000402                     
   893                           ;System_FSM.c: 77:             idle_status_led();
   894   000402  EC8F  F005         	call	_idle_status_led	;wreg free
   895   000406                     l1642:
   896                           
   897                           ;System_FSM.c: 80:             while(get_current_state() == IDLE_STATE)
   898   000406  ECB6  F005         	call	_get_current_state	;wreg free
   899   00040A  06E8               	decf	wreg,f,c
   900   00040C  B4D8               	btfsc	status,2,c
   901   00040E  EF0B  F002         	goto	u491
   902   000412  EF0D  F002         	goto	u490
   903   000416                     u491:
   904   000416  EF03  F002         	goto	l1642
   905   00041A                     u490:
   906   00041A  EF9F  F002         	goto	l227
   907   00041E                     l1644:
   908                           
   909                           ;System_FSM.c: 89:         {;System_FSM.c: 90:             Reset_Counter(&WateringDoneCB
      +                          _Config);
   910   00041E  0E1E               	movlw	low _WateringDoneCB_Config
   911   000420  6E10               	movwf	Reset_Counter@config^0,c
   912   000422  0E00               	movlw	high _WateringDoneCB_Config
   913   000424  6E11               	movwf	(Reset_Counter@config+1)^0,c
   914   000426  EC5B  F005         	call	_Reset_Counter	;wreg free
   915                           
   916                           ;System_FSM.c: 91:             Reset_Counter(&MoistureCB_Config);
   917   00042A  0E26               	movlw	low _MoistureCB_Config
   918   00042C  6E10               	movwf	Reset_Counter@config^0,c
   919   00042E  0E00               	movlw	high _MoistureCB_Config
   920   000430  6E11               	movwf	(Reset_Counter@config+1)^0,c
   921   000432  EC5B  F005         	call	_Reset_Counter	;wreg free
   922   000436                     
   923                           ;System_FSM.c: 94:             UART2_send('W');
   924   000436  0E57               	movlw	87
   925   000438  EC45  F005         	call	_UART2_send
   926   00043C                     
   927                           ;System_FSM.c: 96:             WaterPump_ON();
   928   00043C  EC9E  F005         	call	_WaterPump_ON	;wreg free
   929   000440                     
   930                           ;System_FSM.c: 97:             LCD_Clear();
   931   000440  EC83  F005         	call	_LCD_Clear	;wreg free
   932   000444                     
   933                           ;System_FSM.c: 98:             LCD_Set_Cursor(1,1);
   934   000444  0E01               	movlw	1
   935   000446  6E12               	movwf	LCD_Set_Cursor@c^0,c
   936   000448  0E01               	movlw	1
   937   00044A  EC7D  F003         	call	_LCD_Set_Cursor
   938   00044E                     
   939                           ;System_FSM.c: 99:             LCD_Write_String(" >WATERING PLANTS<\0");
   940   00044E  0E01               	movlw	low STR_4
   941   000450  6E14               	movwf	LCD_Write_String@str^0,c
   942   000452  0E03               	movlw	high STR_4
   943   000454  6E15               	movwf	(LCD_Write_String@str+1)^0,c
   944   000456  EC0B  F004         	call	_LCD_Write_String	;wreg free
   945                           
   946                           ;System_FSM.c: 101:             while(get_current_state() == WATER_PLANTS)
   947   00045A  EF31  F002         	goto	l1658
   948   00045E                     l1656:
   949                           
   950                           ;System_FSM.c: 102:             {;System_FSM.c: 103:               watering_status_led()
      +                          ;
   951   00045E  EC8A  F005         	call	_watering_status_led	;wreg free
   952   000462                     l1658:
   953                           
   954                           ;System_FSM.c: 101:             while(get_current_state() == WATER_PLANTS)
   955   000462  ECB6  F005         	call	_get_current_state	;wreg free
   956   000466  0A02               	xorlw	2
   957   000468  B4D8               	btfsc	status,2,c
   958   00046A  EF39  F002         	goto	u501
   959   00046E  EF3B  F002         	goto	u500
   960   000472                     u501:
   961   000472  EF2F  F002         	goto	l1656
   962   000476                     u500:
   963   000476  EF9F  F002         	goto	l227
   964   00047A                     l1660:
   965                           
   966                           ;System_FSM.c: 110:         {;System_FSM.c: 113:             UART2_send('M');
   967   00047A  0E4D               	movlw	77
   968   00047C  EC45  F005         	call	_UART2_send
   969   000480                     
   970                           ;System_FSM.c: 115:             LCD_Clear();
   971   000480  EC83  F005         	call	_LCD_Clear	;wreg free
   972   000484                     
   973                           ;System_FSM.c: 116:             LCD_Set_Cursor(1,1);
   974   000484  0E01               	movlw	1
   975   000486  6E12               	movwf	LCD_Set_Cursor@c^0,c
   976   000488  0E01               	movlw	1
   977   00048A  EC7D  F003         	call	_LCD_Set_Cursor
   978   00048E                     
   979                           ;System_FSM.c: 117:             LCD_Write_String(" >CHECKING MOIST<\0");
   980   00048E  0E15               	movlw	low STR_5
   981   000490  6E14               	movwf	LCD_Write_String@str^0,c
   982   000492  0E03               	movlw	high STR_5
   983   000494  6E15               	movwf	(LCD_Write_String@str+1)^0,c
   984   000496  EC0B  F004         	call	_LCD_Write_String	;wreg free
   985   00049A                     
   986                           ;System_FSM.c: 118:             WaterPump_OFF();
   987   00049A  ECA2  F005         	call	_WaterPump_OFF	;wreg free
   988   00049E                     
   989                           ;System_FSM.c: 120:             checking_moisture_status_led();
   990   00049E  EC94  F005         	call	_checking_moisture_status_led	;wreg free
   991   0004A2                     
   992                           ;System_FSM.c: 121:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   993   0004A2  0E0B               	movlw	11
   994   0004A4  6E1B               	movwf	(??_FSM_begin+1)^0,c
   995   0004A6  0E26               	movlw	38
   996   0004A8  6E1A               	movwf	??_FSM_begin^0,c
   997   0004AA  0E5E               	movlw	94
   998   0004AC                     u627:
   999   0004AC  2EE8               	decfsz	wreg,f,c
  1000   0004AE  D7FE               	bra	u627
  1001   0004B0  2E1A               	decfsz	??_FSM_begin^0,f,c
  1002   0004B2  D7FC               	bra	u627
  1003   0004B4  2E1B               	decfsz	(??_FSM_begin+1)^0,f,c
  1004   0004B6  D7FA               	bra	u627
  1005   0004B8                     
  1006                           ;System_FSM.c: 123:             U16 moisture = SMS_Read_Moisture_Value();
  1007   0004B8  EC50  F005         	call	_SMS_Read_Moisture_Value	;wreg free
  1008   0004BC  C012  F01C         	movff	?_SMS_Read_Moisture_Value,FSM_begin@moisture
  1009   0004C0  C013  F01D         	movff	?_SMS_Read_Moisture_Value+1,FSM_begin@moisture+1
  1010   0004C4                     
  1011                           ;System_FSM.c: 126:             if(moisture > 65000)
  1012   0004C4  0EE9               	movlw	233
  1013   0004C6  5C1C               	subwf	FSM_begin@moisture^0,w,c
  1014   0004C8  0EFD               	movlw	253
  1015   0004CA  581D               	subwfb	(FSM_begin@moisture+1)^0,w,c
  1016   0004CC  A0D8               	btfss	status,0,c
  1017   0004CE  EF6B  F002         	goto	u511
  1018   0004D2  EF6D  F002         	goto	u510
  1019   0004D6                     u511:
  1020   0004D6  EF71  F002         	goto	l1680
  1021   0004DA                     u510:
  1022   0004DA                     
  1023                           ;System_FSM.c: 127:                 moisture = 1000;
  1024   0004DA  0E03               	movlw	3
  1025   0004DC  6E1D               	movwf	(FSM_begin@moisture+1)^0,c
  1026   0004DE  0EE8               	movlw	232
  1027   0004E0  6E1C               	movwf	FSM_begin@moisture^0,c
  1028   0004E2                     l1680:
  1029                           
  1030                           ;System_FSM.c: 129:             UART2_send((U8)moisture);
  1031   0004E2  501C               	movf	FSM_begin@moisture^0,w,c
  1032   0004E4  EC45  F005         	call	_UART2_send
  1033   0004E8                     
  1034                           ;System_FSM.c: 132:             SMS_Set_State(moisture);
  1035   0004E8  C01C  F011         	movff	FSM_begin@moisture,SMS_Set_State@moisture
  1036   0004EC  C01D  F012         	movff	FSM_begin@moisture+1,SMS_Set_State@moisture+1
  1037   0004F0  ECAE  F003         	call	_SMS_Set_State	;wreg free
  1038                           
  1039                           ;System_FSM.c: 134:             break;
  1040   0004F4  EF9F  F002         	goto	l227
  1041   0004F8                     l1684:
  1042                           
  1043                           ;System_FSM.c: 138:         {;System_FSM.c: 139:             set_state(INIT_STATE);
  1044   0004F8  0E00               	movlw	0
  1045   0004FA  ECA6  F005         	call	_set_state
  1046                           
  1047                           ;System_FSM.c: 140:             break;
  1048   0004FE  EF9F  F002         	goto	l227
  1049   000502                     l1688:
  1050   000502  ECB6  F005         	call	_get_current_state	;wreg free
  1051   000506  6E1A               	movwf	??_FSM_begin^0,c
  1052   000508  6A1B               	clrf	(??_FSM_begin+1)^0,c
  1053                           
  1054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1055                           ; Switch size 1, requested type "simple"
  1056                           ; Number of cases is 1, Range of values is 0 to 0
  1057                           ; switch strategies available:
  1058                           ; Name         Instructions Cycles
  1059                           ; simple_byte            4     3 (average)
  1060                           ;	Chosen strategy is simple_byte
  1061   00050A  501B               	movf	(??_FSM_begin+1)^0,w,c
  1062   00050C  0A00               	xorlw	0	; case 0
  1063   00050E  B4D8               	btfsc	status,2,c
  1064   000510  EF8C  F002         	goto	l1772
  1065   000514  EF7C  F002         	goto	l1684
  1066   000518                     l1772:
  1067                           
  1068                           ; Switch size 1, requested type "simple"
  1069                           ; Number of cases is 4, Range of values is 0 to 3
  1070                           ; switch strategies available:
  1071                           ; Name         Instructions Cycles
  1072                           ; simple_byte           13     7 (average)
  1073                           ;	Chosen strategy is simple_byte
  1074   000518  501A               	movf	??_FSM_begin^0,w,c
  1075   00051A  0A00               	xorlw	0	; case 0
  1076   00051C  B4D8               	btfsc	status,2,c
  1077   00051E  EFAF  F001         	goto	l1600
  1078   000522  0A01               	xorlw	1	; case 1
  1079   000524  B4D8               	btfsc	status,2,c
  1080   000526  EFEF  F001         	goto	l1630
  1081   00052A  0A03               	xorlw	3	; case 2
  1082   00052C  B4D8               	btfsc	status,2,c
  1083   00052E  EF0F  F002         	goto	l1644
  1084   000532  0A01               	xorlw	1	; case 3
  1085   000534  B4D8               	btfsc	status,2,c
  1086   000536  EF3D  F002         	goto	l1660
  1087   00053A  EF7C  F002         	goto	l1684
  1088   00053E                     l227:
  1089   00053E  0012               	return		;funcret
  1090   000540                     __end_of_FSM_begin:
  1091                           	callstack 0
  1092                           
  1093 ;; *************** function _watering_status_led *****************
  1094 ;; Defined at:
  1095 ;;		line 40 in file "LedDriver.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;		None
  1100 ;; Return value:  Size  Location     Type
  1101 ;;                  1    wreg      void 
  1102 ;; Registers used:
  1103 ;;		status,2, status,0
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1109 ;;      Params:         0       0       0       0
  1110 ;;      Locals:         0       0       0       0
  1111 ;;      Temps:          0       0       0       0
  1112 ;;      Totals:         0       0       0       0
  1113 ;;Total ram usage:        0 bytes
  1114 ;; Hardware stack levels used: 1
  1115 ;; Hardware stack levels required when called: 4
  1116 ;; This function calls:
  1117 ;;		Nothing
  1118 ;; This function is called by:
  1119 ;;		_FSM_begin
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text5
  1124   000B14                     __ptext5:
  1125                           	callstack 0
  1126   000B14                     _watering_status_led:
  1127                           	callstack 25
  1128   000B14                     
  1129                           ;LedDriver.c: 42:     (((LATD))|=((0x01)));
  1130   000B14  808C               	bsf	140,0,c	;volatile
  1131                           
  1132                           ;LedDriver.c: 44:     (((LATC))&=(~((0x02))));
  1133   000B16  928B               	bcf	139,1,c	;volatile
  1134                           
  1135                           ;LedDriver.c: 45:     (((LATC))&=(~((0x04))));
  1136   000B18  948B               	bcf	139,2,c	;volatile
  1137                           
  1138                           ;LedDriver.c: 46:     (((LATD))&=(~((0x02))));
  1139   000B1A  928C               	bcf	140,1,c	;volatile
  1140   000B1C  0012               	return		;funcret
  1141   000B1E                     __end_of_watering_status_led:
  1142                           	callstack 0
  1143                           
  1144 ;; *************** function _init_leds *****************
  1145 ;; Defined at:
  1146 ;;		line 12 in file "LedDriver.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1160 ;;      Params:         0       0       0       0
  1161 ;;      Locals:         0       0       0       0
  1162 ;;      Temps:          2       0       0       0
  1163 ;;      Totals:         2       0       0       0
  1164 ;;Total ram usage:        2 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; Hardware stack levels required when called: 4
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_FSM_begin
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text6
  1175   00097A                     __ptext6:
  1176                           	callstack 0
  1177   00097A                     _init_leds:
  1178                           	callstack 25
  1179   00097A                     
  1180                           ;LedDriver.c: 14:     (((TRISC))&=(~((0x02))));
  1181   00097A  9294               	bcf	148,1,c	;volatile
  1182                           
  1183                           ;LedDriver.c: 15:     (((TRISC))&=(~((0x04))));
  1184   00097C  9494               	bcf	148,2,c	;volatile
  1185                           
  1186                           ;LedDriver.c: 16:     (((TRISD))&=(~((0x02))));
  1187   00097E  9295               	bcf	149,1,c	;volatile
  1188                           
  1189                           ;LedDriver.c: 17:     (((TRISD))&=(~((0x01))));
  1190   000980  9095               	bcf	149,0,c	;volatile
  1191                           
  1192                           ;LedDriver.c: 19:     (((LATC))|=((0x02)));
  1193   000982  828B               	bsf	139,1,c	;volatile
  1194                           
  1195                           ;LedDriver.c: 20:     (((LATC))|=((0x04)));
  1196   000984  848B               	bsf	139,2,c	;volatile
  1197                           
  1198                           ;LedDriver.c: 21:     (((LATD))|=((0x02)));
  1199   000986  828C               	bsf	140,1,c	;volatile
  1200                           
  1201                           ;LedDriver.c: 22:     (((LATD))|=((0x01)));
  1202   000988  808C               	bsf	140,0,c	;volatile
  1203   00098A                     
  1204                           ;LedDriver.c: 24:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1205   00098A  0E0B               	movlw	11
  1206   00098C  6E11               	movwf	(??_init_leds+1)^0,c
  1207   00098E  0E26               	movlw	38
  1208   000990  6E10               	movwf	??_init_leds^0,c
  1209   000992  0E5E               	movlw	94
  1210   000994                     u637:
  1211   000994  2EE8               	decfsz	wreg,f,c
  1212   000996  D7FE               	bra	u637
  1213   000998  2E10               	decfsz	??_init_leds^0,f,c
  1214   00099A  D7FC               	bra	u637
  1215   00099C  2E11               	decfsz	(??_init_leds+1)^0,f,c
  1216   00099E  D7FA               	bra	u637
  1217   0009A0                     
  1218                           ;LedDriver.c: 26:     (((LATC))&=(~((0x02))));
  1219   0009A0  928B               	bcf	139,1,c	;volatile
  1220   0009A2                     
  1221                           ;LedDriver.c: 27:     (((LATC))&=(~((0x04))));
  1222   0009A2  948B               	bcf	139,2,c	;volatile
  1223   0009A4                     
  1224                           ;LedDriver.c: 28:     (((LATD))&=(~((0x02))));
  1225   0009A4  928C               	bcf	140,1,c	;volatile
  1226   0009A6                     
  1227                           ;LedDriver.c: 29:     (((LATD))&=(~((0x01))));
  1228   0009A6  908C               	bcf	140,0,c	;volatile
  1229   0009A8  0012               	return		;funcret
  1230   0009AA                     __end_of_init_leds:
  1231                           	callstack 0
  1232                           
  1233 ;; *************** function _idle_status_led *****************
  1234 ;; Defined at:
  1235 ;;		line 32 in file "LedDriver.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;		None
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		status,2, status,0
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1249 ;;      Params:         0       0       0       0
  1250 ;;      Locals:         0       0       0       0
  1251 ;;      Temps:          0       0       0       0
  1252 ;;      Totals:         0       0       0       0
  1253 ;;Total ram usage:        0 bytes
  1254 ;; Hardware stack levels used: 1
  1255 ;; Hardware stack levels required when called: 4
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_FSM_begin
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text7
  1264   000B1E                     __ptext7:
  1265                           	callstack 0
  1266   000B1E                     _idle_status_led:
  1267                           	callstack 25
  1268   000B1E                     
  1269                           ;LedDriver.c: 34:     (((LATC))|=((0x04)));
  1270   000B1E  848B               	bsf	139,2,c	;volatile
  1271                           
  1272                           ;LedDriver.c: 36:     (((LATC))&=(~((0x02))));
  1273   000B20  928B               	bcf	139,1,c	;volatile
  1274                           
  1275                           ;LedDriver.c: 37:     (((LATD))&=(~((0x01))));
  1276   000B22  908C               	bcf	140,0,c	;volatile
  1277                           
  1278                           ;LedDriver.c: 38:     (((LATD))&=(~((0x02))));
  1279   000B24  928C               	bcf	140,1,c	;volatile
  1280   000B26  0012               	return		;funcret
  1281   000B28                     __end_of_idle_status_led:
  1282                           	callstack 0
  1283                           
  1284 ;; *************** function _get_current_state *****************
  1285 ;; Defined at:
  1286 ;;		line 5 in file "FSM_states.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      enum E2
  1293 ;; Registers used:
  1294 ;;		wreg, status,2
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1300 ;;      Params:         0       0       0       0
  1301 ;;      Locals:         0       0       0       0
  1302 ;;      Temps:          0       0       0       0
  1303 ;;      Totals:         0       0       0       0
  1304 ;;Total ram usage:        0 bytes
  1305 ;; Hardware stack levels used: 1
  1306 ;; Hardware stack levels required when called: 4
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_FSM_begin
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           	psect	text8
  1315   000B6C                     __ptext8:
  1316                           	callstack 0
  1317   000B6C                     _get_current_state:
  1318                           	callstack 25
  1319   000B6C                     
  1320                           ;FSM_states.c: 7:     return FSM_state;
  1321   000B6C  5038               	movf	_FSM_state^0,w,c
  1322   000B6E  0012               	return		;funcret
  1323   000B70                     __end_of_get_current_state:
  1324                           	callstack 0
  1325                           
  1326 ;; *************** function _checking_moisture_status_led *****************
  1327 ;; Defined at:
  1328 ;;		line 49 in file "LedDriver.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		status,2, status,0
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1342 ;;      Params:         0       0       0       0
  1343 ;;      Locals:         0       0       0       0
  1344 ;;      Temps:          0       0       0       0
  1345 ;;      Totals:         0       0       0       0
  1346 ;;Total ram usage:        0 bytes
  1347 ;; Hardware stack levels used: 1
  1348 ;; Hardware stack levels required when called: 4
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_FSM_begin
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           
  1356                           	psect	text9
  1357   000B28                     __ptext9:
  1358                           	callstack 0
  1359   000B28                     _checking_moisture_status_led:
  1360                           	callstack 25
  1361   000B28                     
  1362                           ;LedDriver.c: 51:     (((LATD))|=((0x02)));
  1363   000B28  828C               	bsf	140,1,c	;volatile
  1364                           
  1365                           ;LedDriver.c: 53:     (((LATC))&=(~((0x02))));
  1366   000B2A  928B               	bcf	139,1,c	;volatile
  1367                           
  1368                           ;LedDriver.c: 54:     (((LATC))&=(~((0x04))));
  1369   000B2C  948B               	bcf	139,2,c	;volatile
  1370                           
  1371                           ;LedDriver.c: 55:     (((LATD))&=(~((0x01))));
  1372   000B2E  908C               	bcf	140,0,c	;volatile
  1373   000B30  0012               	return		;funcret
  1374   000B32                     __end_of_checking_moisture_status_led:
  1375                           	callstack 0
  1376                           
  1377 ;; *************** function _WaterPump_ON *****************
  1378 ;; Defined at:
  1379 ;;		line 25 in file "WaterPump_Driver.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;		None
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1393 ;;      Params:         0       0       0       0
  1394 ;;      Locals:         0       0       0       0
  1395 ;;      Temps:          0       0       0       0
  1396 ;;      Totals:         0       0       0       0
  1397 ;;Total ram usage:        0 bytes
  1398 ;; Hardware stack levels used: 1
  1399 ;; Hardware stack levels required when called: 4
  1400 ;; This function calls:
  1401 ;;		Nothing
  1402 ;; This function is called by:
  1403 ;;		_FSM_begin
  1404 ;;		_WaterPump_Toggle
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text10
  1409   000B3C                     __ptext10:
  1410                           	callstack 0
  1411   000B3C                     _WaterPump_ON:
  1412                           	callstack 25
  1413   000B3C                     
  1414                           ;WaterPump_Driver.c: 27:     (((LATD))&=(~((0x04))));
  1415   000B3C  948C               	bcf	140,2,c	;volatile
  1416   000B3E                     
  1417                           ;WaterPump_Driver.c: 28:     pump_status = PUMP_ON;
  1418   000B3E  0E00               	movlw	0
  1419   000B40  6E36               	movwf	_pump_status^0,c
  1420   000B42  0012               	return		;funcret
  1421   000B44                     __end_of_WaterPump_ON:
  1422                           	callstack 0
  1423                           
  1424 ;; *************** function _WaterPump_OFF *****************
  1425 ;; Defined at:
  1426 ;;		line 31 in file "WaterPump_Driver.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1440 ;;      Params:         0       0       0       0
  1441 ;;      Locals:         0       0       0       0
  1442 ;;      Temps:          0       0       0       0
  1443 ;;      Totals:         0       0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used: 1
  1446 ;; Hardware stack levels required when called: 4
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_FSM_begin
  1451 ;;		_WaterPump_Toggle
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text11
  1456   000B44                     __ptext11:
  1457                           	callstack 0
  1458   000B44                     _WaterPump_OFF:
  1459                           	callstack 25
  1460   000B44                     
  1461                           ;WaterPump_Driver.c: 33:     (((LATD))|=((0x04)));
  1462   000B44  848C               	bsf	140,2,c	;volatile
  1463   000B46                     
  1464                           ;WaterPump_Driver.c: 34:     pump_status = PUMP_OFF;
  1465   000B46  0E01               	movlw	1
  1466   000B48  6E36               	movwf	_pump_status^0,c
  1467   000B4A  0012               	return		;funcret
  1468   000B4C                     __end_of_WaterPump_OFF:
  1469                           	callstack 0
  1470                           
  1471 ;; *************** function _WaterPump_Init *****************
  1472 ;; Defined at:
  1473 ;;		line 17 in file "WaterPump_Driver.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;		None
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, status,2, status,0
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1487 ;;      Params:         0       0       0       0
  1488 ;;      Locals:         0       0       0       0
  1489 ;;      Temps:          0       0       0       0
  1490 ;;      Totals:         0       0       0       0
  1491 ;;Total ram usage:        0 bytes
  1492 ;; Hardware stack levels used: 1
  1493 ;; Hardware stack levels required when called: 4
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_FSM_begin
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text12
  1502   000B32                     __ptext12:
  1503                           	callstack 0
  1504   000B32                     _WaterPump_Init:
  1505                           	callstack 25
  1506   000B32                     
  1507                           ;WaterPump_Driver.c: 19:     (((TRISD))&=(~((0x04))));
  1508   000B32  9495               	bcf	149,2,c	;volatile
  1509                           
  1510                           ;WaterPump_Driver.c: 20:     (((LATD))|=((0x04)));
  1511   000B34  848C               	bsf	140,2,c	;volatile
  1512   000B36                     
  1513                           ;WaterPump_Driver.c: 21:     pump_status = PUMP_OFF;
  1514   000B36  0E01               	movlw	1
  1515   000B38  6E36               	movwf	_pump_status^0,c
  1516   000B3A  0012               	return		;funcret
  1517   000B3C                     __end_of_WaterPump_Init:
  1518                           	callstack 0
  1519                           
  1520 ;; *************** function _UART2_send *****************
  1521 ;; Defined at:
  1522 ;;		line 33 in file "PIC18F4331_UART2.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  data            1    wreg     unsigned char 
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  data            1   15[COMRAM] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1536 ;;      Params:         0       0       0       0
  1537 ;;      Locals:         1       0       0       0
  1538 ;;      Temps:          0       0       0       0
  1539 ;;      Totals:         1       0       0       0
  1540 ;;Total ram usage:        1 bytes
  1541 ;; Hardware stack levels used: 1
  1542 ;; Hardware stack levels required when called: 4
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_FSM_begin
  1547 ;;		_putch
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text13
  1552   000A8A                     __ptext13:
  1553                           	callstack 0
  1554   000A8A                     _UART2_send:
  1555                           	callstack 25
  1556                           
  1557                           ;incstack = 0
  1558                           ;UART2_send@data stored from wreg
  1559   000A8A  6E10               	movwf	UART2_send@data^0,c
  1560   000A8C                     l357:
  1561                           
  1562                           ;PIC18F4331_UART2.c: 35:     while(0 == PIR1bits.TXIF)
  1563   000A8C  A89E               	btfss	158,4,c	;volatile
  1564   000A8E  EF4B  F005         	goto	u181
  1565   000A92  EF4D  F005         	goto	u180
  1566   000A96                     u181:
  1567   000A96  EF46  F005         	goto	l357
  1568   000A9A                     u180:
  1569   000A9A                     
  1570                           ;PIC18F4331_UART2.c: 40:     TXREG = data;
  1571   000A9A  C010  FFAD         	movff	UART2_send@data,4013	;volatile
  1572   000A9E  0012               	return		;funcret
  1573   000AA0                     __end_of_UART2_send:
  1574                           	callstack 0
  1575                           
  1576 ;; *************** function _Timer0_start *****************
  1577 ;; Defined at:
  1578 ;;		line 86 in file "PIC18F4331_Timer.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;		None
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;		None
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		None
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1592 ;;      Params:         0       0       0       0
  1593 ;;      Locals:         0       0       0       0
  1594 ;;      Temps:          0       0       0       0
  1595 ;;      Totals:         0       0       0       0
  1596 ;;Total ram usage:        0 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; Hardware stack levels required when called: 4
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_FSM_begin
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text14
  1607   000B70                     __ptext14:
  1608                           	callstack 0
  1609   000B70                     _Timer0_start:
  1610                           	callstack 25
  1611   000B70                     
  1612                           ;PIC18F4331_Timer.c: 88:     T0CONbits.TMR0ON = 1;
  1613   000B70  8ED5               	bsf	213,7,c	;volatile
  1614   000B72  0012               	return		;funcret
  1615   000B74                     __end_of_Timer0_start:
  1616                           	callstack 0
  1617                           
  1618 ;; *************** function _SMS_init *****************
  1619 ;; Defined at:
  1620 ;;		line 8 in file "SoilMoistureSensor.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1634 ;;      Params:         0       0       0       0
  1635 ;;      Locals:         0       0       0       0
  1636 ;;      Temps:          0       0       0       0
  1637 ;;      Totals:         0       0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels used: 1
  1640 ;; Hardware stack levels required when called: 6
  1641 ;; This function calls:
  1642 ;;		_ADC_init
  1643 ;; This function is called by:
  1644 ;;		_FSM_begin
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           	psect	text15
  1649   000B5C                     __ptext15:
  1650                           	callstack 0
  1651   000B5C                     _SMS_init:
  1652                           	callstack 23
  1653   000B5C                     
  1654                           ;SoilMoistureSensor.c: 10:     ADC_init();
  1655   000B5C  EC20  F005         	call	_ADC_init	;wreg free
  1656   000B60  0012               	return		;funcret
  1657   000B62                     __end_of_SMS_init:
  1658                           	callstack 0
  1659                           
  1660 ;; *************** function _ADC_init *****************
  1661 ;; Defined at:
  1662 ;;		line 24 in file "PIC18F4331_ADC.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;		None
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;		None
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, status,2, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1676 ;;      Params:         0       0       0       0
  1677 ;;      Locals:         0       0       0       0
  1678 ;;      Temps:          0       0       0       0
  1679 ;;      Totals:         0       0       0       0
  1680 ;;Total ram usage:        0 bytes
  1681 ;; Hardware stack levels used: 1
  1682 ;; Hardware stack levels required when called: 5
  1683 ;; This function calls:
  1684 ;;		_ADC_stop
  1685 ;; This function is called by:
  1686 ;;		_SMS_init
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           	psect	text16
  1691   000A40                     __ptext16:
  1692                           	callstack 0
  1693   000A40                     _ADC_init:
  1694                           	callstack 23
  1695   000A40                     
  1696                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
  1697   000A40  ECBA  F005         	call	_ADC_stop	;wreg free
  1698   000A44                     
  1699                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
  1700   000A44  0E3F               	movlw	-193
  1701   000A46  16C1               	andwf	193,f,c	;volatile
  1702   000A48                     
  1703                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
  1704   000A48  9099               	bcf	153,0,c	;volatile
  1705   000A4A                     
  1706                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
  1707   000A4A  9299               	bcf	153,1,c	;volatile
  1708   000A4C                     
  1709                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
  1710   000A4C  9AC2               	bcf	194,5,c	;volatile
  1711   000A4E                     
  1712                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
  1713   000A4E  0EF8               	movlw	-8
  1714   000A50  16C0               	andwf	192,f,c	;volatile
  1715   000A52                     
  1716                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
  1717   000A52  8EC0               	bsf	192,7,c	;volatile
  1718   000A54                     
  1719                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
  1720   000A54  0E87               	movlw	-121
  1721   000A56  16C0               	andwf	192,f,c	;volatile
  1722   000A58                     
  1723                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
  1724   000A58  80B8               	bsf	184,0,c	;volatile
  1725   000A5A  0012               	return		;funcret
  1726   000A5C                     __end_of_ADC_init:
  1727                           	callstack 0
  1728                           
  1729 ;; *************** function _ADC_stop *****************
  1730 ;; Defined at:
  1731 ;;		line 19 in file "PIC18F4331_ADC.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		None
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1745 ;;      Params:         0       0       0       0
  1746 ;;      Locals:         0       0       0       0
  1747 ;;      Temps:          0       0       0       0
  1748 ;;      Totals:         0       0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used: 1
  1751 ;; Hardware stack levels required when called: 4
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_ADC_init
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text17
  1760   000B74                     __ptext17:
  1761                           	callstack 0
  1762   000B74                     _ADC_stop:
  1763                           	callstack 23
  1764   000B74                     
  1765                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1766   000B74  90C2               	bcf	194,0,c	;volatile
  1767   000B76  0012               	return		;funcret
  1768   000B78                     __end_of_ADC_stop:
  1769                           	callstack 0
  1770                           
  1771 ;; *************** function _SMS_Set_State *****************
  1772 ;; Defined at:
  1773 ;;		line 19 in file "SoilMoistureSensor.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  moisture        2   16[COMRAM] unsigned short 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1787 ;;      Params:         2       0       0       0
  1788 ;;      Locals:         0       0       0       0
  1789 ;;      Temps:          0       0       0       0
  1790 ;;      Totals:         2       0       0       0
  1791 ;;Total ram usage:        2 bytes
  1792 ;; Hardware stack levels used: 1
  1793 ;; Hardware stack levels required when called: 5
  1794 ;; This function calls:
  1795 ;;		_set_state
  1796 ;; This function is called by:
  1797 ;;		_FSM_begin
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text18
  1802   00075C                     __ptext18:
  1803                           	callstack 0
  1804   00075C                     _SMS_Set_State:
  1805                           	callstack 24
  1806   00075C                     
  1807                           ;SoilMoistureSensor.c: 19: void SMS_Set_State(U16 moisture);SoilMoistureSensor.c: 20: {;
      +                          SoilMoistureSensor.c: 21:     if(moisture >= (595))
  1808   00075C  0E53               	movlw	83
  1809   00075E  5C11               	subwf	SMS_Set_State@moisture^0,w,c
  1810   000760  0E02               	movlw	2
  1811   000762  5812               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1812   000764  A0D8               	btfss	status,0,c
  1813   000766  EFB7  F003         	goto	u391
  1814   00076A  EFB9  F003         	goto	u390
  1815   00076E                     u391:
  1816   00076E  EFBE  F003         	goto	l1550
  1817   000772                     u390:
  1818   000772                     
  1819                           ;SoilMoistureSensor.c: 22:     {;SoilMoistureSensor.c: 23:         set_state(WATER_PLANT
      +                          S);
  1820   000772  0E02               	movlw	2
  1821   000774  ECA6  F005         	call	_set_state
  1822                           
  1823                           ;SoilMoistureSensor.c: 24:     }
  1824   000778  EFDC  F003         	goto	l150
  1825   00077C                     l1550:
  1826   00077C  5012               	movf	(SMS_Set_State@moisture+1)^0,w,c
  1827   00077E  E109               	bnz	u400
  1828   000780  0EEF               	movlw	239
  1829   000782  5C11               	subwf	SMS_Set_State@moisture^0,w,c
  1830   000784  A0D8               	btfss	status,0,c
  1831   000786  EFC7  F003         	goto	u401
  1832   00078A  EFC9  F003         	goto	u400
  1833   00078E                     u401:
  1834   00078E  EFD9  F003         	goto	l1556
  1835   000792                     u400:
  1836   000792  0E53               	movlw	83
  1837   000794  5C11               	subwf	SMS_Set_State@moisture^0,w,c
  1838   000796  0E02               	movlw	2
  1839   000798  5812               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1840   00079A  B0D8               	btfsc	status,0,c
  1841   00079C  EFD2  F003         	goto	u411
  1842   0007A0  EFD4  F003         	goto	u410
  1843   0007A4                     u411:
  1844   0007A4  EFD9  F003         	goto	l1556
  1845   0007A8                     u410:
  1846   0007A8                     
  1847                           ;SoilMoistureSensor.c: 26:     {;SoilMoistureSensor.c: 28:         set_state(IDLE_STATE)
      +                          ;
  1848   0007A8  0E01               	movlw	1
  1849   0007AA  ECA6  F005         	call	_set_state
  1850                           
  1851                           ;SoilMoistureSensor.c: 29:     }
  1852   0007AE  EFDC  F003         	goto	l150
  1853   0007B2                     l1556:
  1854                           
  1855                           ;SoilMoistureSensor.c: 31:     {;SoilMoistureSensor.c: 32:         set_state(IDLE_STATE)
      +                          ;
  1856   0007B2  0E01               	movlw	1
  1857   0007B4  ECA6  F005         	call	_set_state
  1858   0007B8                     l150:
  1859   0007B8  0012               	return		;funcret
  1860   0007BA                     __end_of_SMS_Set_State:
  1861                           	callstack 0
  1862                           
  1863 ;; *************** function _set_state *****************
  1864 ;; Defined at:
  1865 ;;		line 9 in file "FSM_states.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  state_to_set    1    wreg     enum E2
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  state_to_set    1   15[COMRAM] enum E2
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1879 ;;      Params:         0       0       0       0
  1880 ;;      Locals:         1       0       0       0
  1881 ;;      Temps:          0       0       0       0
  1882 ;;      Totals:         1       0       0       0
  1883 ;;Total ram usage:        1 bytes
  1884 ;; Hardware stack levels used: 1
  1885 ;; Hardware stack levels required when called: 4
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_main
  1890 ;;		_SMS_Set_State
  1891 ;;		_FSM_begin
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text19
  1896   000B4C                     __ptext19:
  1897                           	callstack 0
  1898   000B4C                     _set_state:
  1899                           	callstack 26
  1900                           
  1901                           ;incstack = 0
  1902                           ;set_state@state_to_set stored from wreg
  1903   000B4C  6E10               	movwf	set_state@state_to_set^0,c
  1904   000B4E                     
  1905                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  1906   000B4E  C010  F038         	movff	set_state@state_to_set,_FSM_state
  1907   000B52  0012               	return		;funcret
  1908   000B54                     __end_of_set_state:
  1909                           	callstack 0
  1910                           
  1911 ;; *************** function _SMS_Read_Moisture_Value *****************
  1912 ;; Defined at:
  1913 ;;		line 13 in file "SoilMoistureSensor.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  moisture        2   19[COMRAM] unsigned short 
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  2   17[COMRAM] unsigned short 
  1920 ;; Registers used:
  1921 ;;		wreg, status,2, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1927 ;;      Params:         2       0       0       0
  1928 ;;      Locals:         2       0       0       0
  1929 ;;      Temps:          0       0       0       0
  1930 ;;      Totals:         4       0       0       0
  1931 ;;Total ram usage:        4 bytes
  1932 ;; Hardware stack levels used: 1
  1933 ;; Hardware stack levels required when called: 6
  1934 ;; This function calls:
  1935 ;;		_ADC_Read
  1936 ;; This function is called by:
  1937 ;;		_FSM_begin
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text20
  1942   000AA0                     __ptext20:
  1943                           	callstack 0
  1944   000AA0                     _SMS_Read_Moisture_Value:
  1945                           	callstack 23
  1946   000AA0                     
  1947                           ;SoilMoistureSensor.c: 15:     U16 moisture = ADC_Read();
  1948   000AA0  ECD5  F004         	call	_ADC_Read	;wreg free
  1949   000AA4  C010  F014         	movff	?_ADC_Read,SMS_Read_Moisture_Value@moisture
  1950   000AA8  C011  F015         	movff	?_ADC_Read+1,SMS_Read_Moisture_Value@moisture+1
  1951   000AAC                     
  1952                           ;SoilMoistureSensor.c: 16:     return moisture;
  1953   000AAC  C014  F012         	movff	SMS_Read_Moisture_Value@moisture,?_SMS_Read_Moisture_Value
  1954   000AB0  C015  F013         	movff	SMS_Read_Moisture_Value@moisture+1,?_SMS_Read_Moisture_Value+1
  1955   000AB4  0012               	return		;funcret
  1956   000AB6                     __end_of_SMS_Read_Moisture_Value:
  1957                           	callstack 0
  1958                           
  1959 ;; *************** function _ADC_Read *****************
  1960 ;; Defined at:
  1961 ;;		line 60 in file "PIC18F4331_ADC.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  2   15[COMRAM] unsigned short 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1975 ;;      Params:         2       0       0       0
  1976 ;;      Locals:         0       0       0       0
  1977 ;;      Temps:          0       0       0       0
  1978 ;;      Totals:         2       0       0       0
  1979 ;;Total ram usage:        2 bytes
  1980 ;; Hardware stack levels used: 1
  1981 ;; Hardware stack levels required when called: 5
  1982 ;; This function calls:
  1983 ;;		_ADC_in_progress
  1984 ;;		_ADC_start
  1985 ;; This function is called by:
  1986 ;;		_SMS_Read_Moisture_Value
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text21
  1991   0009AA                     __ptext21:
  1992                           	callstack 0
  1993   0009AA                     _ADC_Read:
  1994                           	callstack 23
  1995   0009AA                     
  1996                           ;PIC18F4331_ADC.c: 62:     ADC_start();
  1997   0009AA  ECB1  F005         	call	_ADC_start	;wreg free
  1998   0009AE                     l1506:
  1999   0009AE  EC71  F005         	call	_ADC_in_progress	;wreg free
  2000   0009B2  0900               	iorlw	0
  2001   0009B4  A4D8               	btfss	status,2,c
  2002   0009B6  EFDF  F004         	goto	u351
  2003   0009BA  EFE1  F004         	goto	u350
  2004   0009BE                     u351:
  2005   0009BE  EFD7  F004         	goto	l1506
  2006   0009C2                     u350:
  2007   0009C2                     
  2008                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
  2009   0009C2  CFC4 F033          	movff	4036,_ADC+1	;volatile
  2010                           
  2011                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
  2012   0009C6  CFC3 F032          	movff	4035,_ADC	;volatile
  2013                           
  2014                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
  2015   0009CA  C032  F010         	movff	_ADC,?_ADC_Read
  2016   0009CE  C033  F011         	movff	_ADC+1,?_ADC_Read+1
  2017   0009D2  0012               	return		;funcret
  2018   0009D4                     __end_of_ADC_Read:
  2019                           	callstack 0
  2020                           
  2021 ;; *************** function _ADC_start *****************
  2022 ;; Defined at:
  2023 ;;		line 13 in file "PIC18F4331_ADC.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		None
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2037 ;;      Params:         0       0       0       0
  2038 ;;      Locals:         0       0       0       0
  2039 ;;      Temps:          0       0       0       0
  2040 ;;      Totals:         0       0       0       0
  2041 ;;Total ram usage:        0 bytes
  2042 ;; Hardware stack levels used: 1
  2043 ;; Hardware stack levels required when called: 4
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_ADC_Read
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text22
  2052   000B62                     __ptext22:
  2053                           	callstack 0
  2054   000B62                     _ADC_start:
  2055                           	callstack 23
  2056   000B62                     
  2057                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
  2058   000B62  80C2               	bsf	194,0,c	;volatile
  2059                           
  2060                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
  2061   000B64  82C2               	bsf	194,1,c	;volatile
  2062   000B66  0012               	return		;funcret
  2063   000B68                     __end_of_ADC_start:
  2064                           	callstack 0
  2065                           
  2066 ;; *************** function _ADC_in_progress *****************
  2067 ;; Defined at:
  2068 ;;		line 53 in file "PIC18F4331_ADC.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;		None
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;		None
  2073 ;; Return value:  Size  Location     Type
  2074 ;;                  1    wreg      unsigned char 
  2075 ;; Registers used:
  2076 ;;		wreg
  2077 ;; Tracked objects:
  2078 ;;		On entry : 0/0
  2079 ;;		On exit  : 0/0
  2080 ;;		Unchanged: 0/0
  2081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2082 ;;      Params:         0       0       0       0
  2083 ;;      Locals:         0       0       0       0
  2084 ;;      Temps:          0       0       0       0
  2085 ;;      Totals:         0       0       0       0
  2086 ;;Total ram usage:        0 bytes
  2087 ;; Hardware stack levels used: 1
  2088 ;; Hardware stack levels required when called: 4
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_ADC_Read
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text23
  2097   000AE2                     __ptext23:
  2098                           	callstack 0
  2099   000AE2                     _ADC_in_progress:
  2100                           	callstack 23
  2101   000AE2                     
  2102                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
  2103   000AE2  B2C2               	btfsc	194,1,c	;volatile
  2104   000AE4  EF76  F005         	goto	u11
  2105   000AE8  EF79  F005         	goto	u10
  2106   000AEC                     u11:
  2107   000AEC  0E01               	movlw	1
  2108   000AEE  EF7A  F005         	goto	u16
  2109   000AF2                     u10:
  2110   000AF2  0E00               	movlw	0
  2111   000AF4                     u16:
  2112   000AF4  0012               	return		;funcret
  2113   000AF6                     __end_of_ADC_in_progress:
  2114                           	callstack 0
  2115                           
  2116 ;; *************** function _Register_Callback *****************
  2117 ;; Defined at:
  2118 ;;		line 47 in file "SystemCallbacks.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  config          2   17[COMRAM] PTR struct .
  2121 ;;		 -> WateringDoneCB_Config(8), MoistureCB_Config(8), 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;		None
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      unsigned char 
  2126 ;; Registers used:
  2127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2133 ;;      Params:         2       0       0       0
  2134 ;;      Locals:         0       0       0       0
  2135 ;;      Temps:          2       0       0       0
  2136 ;;      Totals:         4       0       0       0
  2137 ;;Total ram usage:        4 bytes
  2138 ;; Hardware stack levels used: 1
  2139 ;; Hardware stack levels required when called: 5
  2140 ;; This function calls:
  2141 ;;		_Reset_Counter
  2142 ;; This function is called by:
  2143 ;;		_FSM_begin
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text24
  2148   000608                     __ptext24:
  2149                           	callstack 0
  2150   000608                     _Register_Callback:
  2151                           	callstack 24
  2152   000608                     
  2153                           ;SystemCallbacks.c: 47: U8 Register_Callback(Callback_Config_t *config);SystemCallbacks.
      +                          c: 48: {;SystemCallbacks.c: 49:     if(callback_count < (5))
  2154   000608  0E05               	movlw	5
  2155   00060A  6037               	cpfslt	_callback_count^0,c
  2156   00060C  EF0A  F003         	goto	u431
  2157   000610  EF0C  F003         	goto	u430
  2158   000614                     u431:
  2159   000614  EF40  F003         	goto	l262
  2160   000618                     u430:
  2161   000618                     
  2162                           ;SystemCallbacks.c: 50:     {;SystemCallbacks.c: 51:         if(config->callback != ((vo
      +                          id*)0) && config->expiry_time > 0)
  2163   000618  EE20 F002          	lfsr	2,2
  2164   00061C  5012               	movf	Register_Callback@config^0,w,c
  2165   00061E  26D9               	addwf	fsr2l,f,c
  2166   000620  5013               	movf	(Register_Callback@config+1)^0,w,c
  2167   000622  22DA               	addwfc	fsr2h,f,c
  2168   000624  50DE               	movf	postinc2,w,c
  2169   000626  10DE               	iorwf	postinc2,w,c
  2170   000628  B4D8               	btfsc	status,2,c
  2171   00062A  EF19  F003         	goto	u441
  2172   00062E  EF1B  F003         	goto	u440
  2173   000632                     u441:
  2174   000632  EF40  F003         	goto	l262
  2175   000636                     u440:
  2176   000636  C012  FFD9         	movff	Register_Callback@config,fsr2l
  2177   00063A  C013  FFDA         	movff	Register_Callback@config+1,fsr2h
  2178   00063E  50DE               	movf	postinc2,w,c
  2179   000640  10DE               	iorwf	postinc2,w,c
  2180   000642  B4D8               	btfsc	status,2,c
  2181   000644  EF26  F003         	goto	u451
  2182   000648  EF28  F003         	goto	u450
  2183   00064C                     u451:
  2184   00064C  EF40  F003         	goto	l262
  2185   000650                     u450:
  2186   000650                     
  2187                           ;SystemCallbacks.c: 52:         {;SystemCallbacks.c: 54:             registered_callback
      +                          s[callback_count] = (*config);
  2188   000650  C012  FFD9         	movff	Register_Callback@config,fsr2l
  2189   000654  C013  FFDA         	movff	Register_Callback@config+1,fsr2h
  2190   000658  5037               	movf	_callback_count^0,w,c
  2191   00065A  0D08               	mullw	8
  2192   00065C  0E60               	movlw	low _registered_callbacks
  2193   00065E  24F3               	addwf	243,w,c
  2194   000660  6EE1               	movwf	fsr1l,c
  2195   000662  0E00               	movlw	high _registered_callbacks
  2196   000664  20F4               	addwfc	prodh,w,c
  2197   000666  6EE2               	movwf	fsr1h,c
  2198   000668  0E07               	movlw	7
  2199   00066A                     u461:
  2200   00066A  CFDB FFE3          	movff	plusw2,plusw1
  2201   00066E  06E8               	decf	wreg,f,c
  2202   000670  E2FC               	bc	u461
  2203   000672                     
  2204                           ;SystemCallbacks.c: 55:             Reset_Counter(config);
  2205   000672  C012  F010         	movff	Register_Callback@config,Reset_Counter@config
  2206   000676  C013  F011         	movff	Register_Callback@config+1,Reset_Counter@config+1
  2207   00067A  EC5B  F005         	call	_Reset_Counter	;wreg free
  2208   00067E                     
  2209                           ;SystemCallbacks.c: 57:             callback_count++;
  2210   00067E  2A37               	incf	_callback_count^0,f,c
  2211   000680                     l262:
  2212   000680  0012               	return		;funcret
  2213   000682                     __end_of_Register_Callback:
  2214                           	callstack 0
  2215                           
  2216 ;; *************** function _Reset_Counter *****************
  2217 ;; Defined at:
  2218 ;;		line 42 in file "SystemCallbacks.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  config          2   15[COMRAM] PTR struct .
  2221 ;;		 -> WateringDoneCB_Config(8), MoistureCB_Config(8), 
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;		None
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2233 ;;      Params:         2       0       0       0
  2234 ;;      Locals:         0       0       0       0
  2235 ;;      Temps:          0       0       0       0
  2236 ;;      Totals:         2       0       0       0
  2237 ;;Total ram usage:        2 bytes
  2238 ;; Hardware stack levels used: 1
  2239 ;; Hardware stack levels required when called: 4
  2240 ;; This function calls:
  2241 ;;		Nothing
  2242 ;; This function is called by:
  2243 ;;		_FSM_begin
  2244 ;;		_Register_Callback
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text25
  2249   000AB6                     __ptext25:
  2250                           	callstack 0
  2251   000AB6                     _Reset_Counter:
  2252                           	callstack 25
  2253   000AB6                     
  2254                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  2255   000AB6  EE20 F005          	lfsr	2,5
  2256   000ABA  5010               	movf	Reset_Counter@config^0,w,c
  2257   000ABC  26D9               	addwf	fsr2l,f,c
  2258   000ABE  5011               	movf	(Reset_Counter@config+1)^0,w,c
  2259   000AC0  22DA               	addwfc	fsr2h,f,c
  2260   000AC2  0E00               	movlw	0
  2261   000AC4  6EDE               	movwf	postinc2,c
  2262   000AC6  0E00               	movlw	0
  2263   000AC8  6EDD               	movwf	postdec2,c
  2264   000ACA  0012               	return		;funcret
  2265   000ACC                     __end_of_Reset_Counter:
  2266                           	callstack 0
  2267                           
  2268 ;; *************** function _LCD_Write_String *****************
  2269 ;; Defined at:
  2270 ;;		line 120 in file "LCD.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  str             2   19[COMRAM] PTR unsigned char 
  2273 ;;		 -> STR_5(19), STR_4(20), STR_3(15), STR_2(16), 
  2274 ;;		 -> STR_1(17), 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  i               2   23[COMRAM] int 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2286 ;;      Params:         2       0       0       0
  2287 ;;      Locals:         2       0       0       0
  2288 ;;      Temps:          2       0       0       0
  2289 ;;      Totals:         6       0       0       0
  2290 ;;Total ram usage:        6 bytes
  2291 ;; Hardware stack levels used: 1
  2292 ;; Hardware stack levels required when called: 6
  2293 ;; This function calls:
  2294 ;;		_LCD_Write_Char
  2295 ;; This function is called by:
  2296 ;;		_FSM_begin
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text26
  2301   000816                     __ptext26:
  2302                           	callstack 0
  2303   000816                     _LCD_Write_String:
  2304                           	callstack 23
  2305   000816                     
  2306                           ;LCD.c: 120: void LCD_Write_String(char *str);LCD.c: 121: {;LCD.c: 122:   int i;;LCD.c: 
      +                          123:   for(i=0;str[i]!='\0';i++)
  2307   000816  0E00               	movlw	0
  2308   000818  6E19               	movwf	(LCD_Write_String@i+1)^0,c
  2309   00081A  0E00               	movlw	0
  2310   00081C  6E18               	movwf	LCD_Write_String@i^0,c
  2311   00081E  EF21  F004         	goto	l1538
  2312   000822                     l1534:
  2313                           
  2314                           ;LCD.c: 124:     LCD_Write_Char(str[i]);
  2315   000822  5018               	movf	LCD_Write_String@i^0,w,c
  2316   000824  2414               	addwf	LCD_Write_String@str^0,w,c
  2317   000826  6E16               	movwf	??_LCD_Write_String^0,c
  2318   000828  5019               	movf	(LCD_Write_String@i+1)^0,w,c
  2319   00082A  2015               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2320   00082C  6E17               	movwf	(??_LCD_Write_String+1)^0,c
  2321   00082E  C016  FFF6         	movff	??_LCD_Write_String,tblptrl
  2322   000832  C017  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2323   000836                     	if	0	;tblptru may be non-zero
  2324   000836                     	endif
  2325   000836                     	if	0	;tblptru may be non-zero
  2326   000836                     	endif
  2327   000836  0008               	tblrd		*
  2328   000838  50F5               	movf	tablat,w,c
  2329   00083A  EC5C  F004         	call	_LCD_Write_Char
  2330   00083E  4A18               	infsnz	LCD_Write_String@i^0,f,c
  2331   000840  2A19               	incf	(LCD_Write_String@i+1)^0,f,c
  2332   000842                     l1538:
  2333   000842  5018               	movf	LCD_Write_String@i^0,w,c
  2334   000844  2414               	addwf	LCD_Write_String@str^0,w,c
  2335   000846  6E16               	movwf	??_LCD_Write_String^0,c
  2336   000848  5019               	movf	(LCD_Write_String@i+1)^0,w,c
  2337   00084A  2015               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2338   00084C  6E17               	movwf	(??_LCD_Write_String+1)^0,c
  2339   00084E  C016  FFF6         	movff	??_LCD_Write_String,tblptrl
  2340   000852  C017  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2341   000856                     	if	0	;tblptru may be non-zero
  2342   000856                     	endif
  2343   000856                     	if	0	;tblptru may be non-zero
  2344   000856                     	endif
  2345   000856  0008               	tblrd		*
  2346   000858  50F5               	movf	tablat,w,c
  2347   00085A  0900               	iorlw	0
  2348   00085C  A4D8               	btfss	status,2,c
  2349   00085E  EF33  F004         	goto	u381
  2350   000862  EF35  F004         	goto	u380
  2351   000866                     u381:
  2352   000866  EF11  F004         	goto	l1534
  2353   00086A                     u380:
  2354   00086A  0012               	return		;funcret
  2355   00086C                     __end_of_LCD_Write_String:
  2356                           	callstack 0
  2357                           
  2358 ;; *************** function _LCD_Write_Char *****************
  2359 ;; Defined at:
  2360 ;;		line 102 in file "LCD.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  Data            1    wreg     unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  Data            1   18[COMRAM] unsigned char 
  2365 ;;  High4           1   17[COMRAM] unsigned char 
  2366 ;;  Low4            1   16[COMRAM] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2376 ;;      Params:         0       0       0       0
  2377 ;;      Locals:         3       0       0       0
  2378 ;;      Temps:          0       0       0       0
  2379 ;;      Totals:         3       0       0       0
  2380 ;;Total ram usage:        3 bytes
  2381 ;; Hardware stack levels used: 1
  2382 ;; Hardware stack levels required when called: 5
  2383 ;; This function calls:
  2384 ;;		_LCD_DATA
  2385 ;; This function is called by:
  2386 ;;		_LCD_Write_String
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text27
  2391   0008B8                     __ptext27:
  2392                           	callstack 0
  2393   0008B8                     _LCD_Write_Char:
  2394                           	callstack 23
  2395                           
  2396                           ;incstack = 0
  2397                           ;LCD_Write_Char@Data stored from wreg
  2398   0008B8  6E13               	movwf	LCD_Write_Char@Data^0,c
  2399   0008BA                     
  2400                           ;LCD.c: 102: void LCD_Write_Char(char Data);LCD.c: 103: {;LCD.c: 104:   char Low4,High4;
      +                          ;LCD.c: 105:   Low4 = Data & 0x0F;
  2401   0008BA  5013               	movf	LCD_Write_Char@Data^0,w,c
  2402   0008BC  0B0F               	andlw	15
  2403   0008BE  6E11               	movwf	LCD_Write_Char@Low4^0,c
  2404                           
  2405                           ;LCD.c: 106:   High4 = Data & 0xF0;
  2406   0008C0  5013               	movf	LCD_Write_Char@Data^0,w,c
  2407   0008C2  0BF0               	andlw	240
  2408   0008C4  6E12               	movwf	LCD_Write_Char@High4^0,c
  2409   0008C6                     
  2410                           ;LCD.c: 107:   PORTBbits.RB5 = 1;
  2411   0008C6  8A81               	bsf	129,5,c	;volatile
  2412   0008C8                     
  2413                           ;LCD.c: 108:   LCD_DATA(High4>>4);
  2414   0008C8  3812               	swapf	LCD_Write_Char@High4^0,w,c
  2415   0008CA  0B0F               	andlw	15
  2416   0008CC  ECDD  F003         	call	_LCD_DATA
  2417   0008D0                     
  2418                           ;LCD.c: 109:   PORTBbits.RB4 = 1;
  2419   0008D0  8881               	bsf	129,4,c	;volatile
  2420   0008D2                     
  2421                           ;LCD.c: 110:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2422   0008D2  0EA6               	movlw	166
  2423   0008D4                     u647:
  2424   0008D4  2EE8               	decfsz	wreg,f,c
  2425   0008D6  D7FE               	bra	u647
  2426   0008D8  D000               	nop2	
  2427   0008DA                     
  2428                           ;LCD.c: 111:   PORTBbits.RB4 = 0;
  2429   0008DA  9881               	bcf	129,4,c	;volatile
  2430   0008DC                     
  2431                           ;LCD.c: 112:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2432   0008DC  0EA6               	movlw	166
  2433   0008DE                     u657:
  2434   0008DE  2EE8               	decfsz	wreg,f,c
  2435   0008E0  D7FE               	bra	u657
  2436   0008E2  D000               	nop2	
  2437   0008E4                     
  2438                           ;LCD.c: 113:   LCD_DATA(Low4);
  2439   0008E4  5011               	movf	LCD_Write_Char@Low4^0,w,c
  2440   0008E6  ECDD  F003         	call	_LCD_DATA
  2441   0008EA                     
  2442                           ;LCD.c: 114:   PORTBbits.RB4 = 1;
  2443   0008EA  8881               	bsf	129,4,c	;volatile
  2444   0008EC                     
  2445                           ;LCD.c: 115:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2446   0008EC  0EA6               	movlw	166
  2447   0008EE                     u667:
  2448   0008EE  2EE8               	decfsz	wreg,f,c
  2449   0008F0  D7FE               	bra	u667
  2450   0008F2  D000               	nop2	
  2451   0008F4                     
  2452                           ;LCD.c: 116:   PORTBbits.RB4 = 0;
  2453   0008F4  9881               	bcf	129,4,c	;volatile
  2454   0008F6                     
  2455                           ;LCD.c: 117:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2456   0008F6  0EA6               	movlw	166
  2457   0008F8                     u677:
  2458   0008F8  2EE8               	decfsz	wreg,f,c
  2459   0008FA  D7FE               	bra	u677
  2460   0008FC  D000               	nop2	
  2461   0008FE  0012               	return		;funcret
  2462   000900                     __end_of_LCD_Write_Char:
  2463                           	callstack 0
  2464                           
  2465 ;; *************** function _LCD_Set_Cursor *****************
  2466 ;; Defined at:
  2467 ;;		line 81 in file "LCD.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;  r               1    wreg     unsigned char 
  2470 ;;  c               1   17[COMRAM] unsigned char 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  r               1   18[COMRAM] unsigned char 
  2473 ;;  Temp            1   21[COMRAM] unsigned char 
  2474 ;;  High4           1   20[COMRAM] unsigned char 
  2475 ;;  Low4            1   19[COMRAM] unsigned char 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  1    wreg      void 
  2478 ;; Registers used:
  2479 ;;		wreg, status,2, status,0, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2485 ;;      Params:         1       0       0       0
  2486 ;;      Locals:         4       0       0       0
  2487 ;;      Temps:          0       0       0       0
  2488 ;;      Totals:         5       0       0       0
  2489 ;;Total ram usage:        5 bytes
  2490 ;; Hardware stack levels used: 1
  2491 ;; Hardware stack levels required when called: 6
  2492 ;; This function calls:
  2493 ;;		_LCD_CMD
  2494 ;; This function is called by:
  2495 ;;		_FSM_begin
  2496 ;; This function uses a non-reentrant model
  2497 ;;
  2498                           
  2499                           	psect	text28
  2500   0006FA                     __ptext28:
  2501                           	callstack 0
  2502   0006FA                     _LCD_Set_Cursor:
  2503                           	callstack 23
  2504                           
  2505                           ;incstack = 0
  2506                           ;LCD_Set_Cursor@r stored from wreg
  2507   0006FA  6E13               	movwf	LCD_Set_Cursor@r^0,c
  2508   0006FC                     
  2509                           ;LCD.c: 81: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 82: {;LCD.c: 83
      +                          :   unsigned char Temp,Low4,High4;;LCD.c: 84:   if(r == 1)
  2510   0006FC  0413               	decf	LCD_Set_Cursor@r^0,w,c
  2511   0006FE  A4D8               	btfss	status,2,c
  2512   000700  EF84  F003         	goto	u361
  2513   000704  EF86  F003         	goto	u360
  2514   000708                     u361:
  2515   000708  EF95  F003         	goto	l92
  2516   00070C                     u360:
  2517   00070C                     
  2518                           ;LCD.c: 85:   {;LCD.c: 86:     Temp = 0x80 + c - 1;
  2519   00070C  5012               	movf	LCD_Set_Cursor@c^0,w,c
  2520   00070E  0F7F               	addlw	127
  2521   000710  6E16               	movwf	LCD_Set_Cursor@Temp^0,c
  2522                           
  2523                           ;LCD.c: 87:     High4 = Temp >> 4;
  2524   000712  3816               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2525   000714  0B0F               	andlw	15
  2526   000716  6E15               	movwf	LCD_Set_Cursor@High4^0,c
  2527                           
  2528                           ;LCD.c: 88:     Low4 = Temp & 0x0F;
  2529   000718  5016               	movf	LCD_Set_Cursor@Temp^0,w,c
  2530   00071A  0B0F               	andlw	15
  2531   00071C  6E14               	movwf	LCD_Set_Cursor@Low4^0,c
  2532   00071E                     
  2533                           ;LCD.c: 89:     LCD_CMD(High4);
  2534   00071E  5015               	movf	LCD_Set_Cursor@High4^0,w,c
  2535   000720  EC2E  F005         	call	_LCD_CMD
  2536   000724                     
  2537                           ;LCD.c: 90:     LCD_CMD(Low4);
  2538   000724  5014               	movf	LCD_Set_Cursor@Low4^0,w,c
  2539   000726  EC2E  F005         	call	_LCD_CMD
  2540   00072A                     l92:
  2541                           
  2542                           ;LCD.c: 92:   if(r == 2)
  2543   00072A  0E02               	movlw	2
  2544   00072C  1813               	xorwf	LCD_Set_Cursor@r^0,w,c
  2545   00072E  A4D8               	btfss	status,2,c
  2546   000730  EF9C  F003         	goto	u371
  2547   000734  EF9E  F003         	goto	u370
  2548   000738                     u371:
  2549   000738  EFAD  F003         	goto	l94
  2550   00073C                     u370:
  2551   00073C                     
  2552                           ;LCD.c: 93:   {;LCD.c: 94:     Temp = 0xC0 + c - 1;
  2553   00073C  5012               	movf	LCD_Set_Cursor@c^0,w,c
  2554   00073E  0FBF               	addlw	191
  2555   000740  6E16               	movwf	LCD_Set_Cursor@Temp^0,c
  2556                           
  2557                           ;LCD.c: 95:     High4 = Temp >> 4;
  2558   000742  3816               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2559   000744  0B0F               	andlw	15
  2560   000746  6E15               	movwf	LCD_Set_Cursor@High4^0,c
  2561                           
  2562                           ;LCD.c: 96:     Low4 = Temp & 0x0F;
  2563   000748  5016               	movf	LCD_Set_Cursor@Temp^0,w,c
  2564   00074A  0B0F               	andlw	15
  2565   00074C  6E14               	movwf	LCD_Set_Cursor@Low4^0,c
  2566   00074E                     
  2567                           ;LCD.c: 97:     LCD_CMD(High4);
  2568   00074E  5015               	movf	LCD_Set_Cursor@High4^0,w,c
  2569   000750  EC2E  F005         	call	_LCD_CMD
  2570   000754                     
  2571                           ;LCD.c: 98:     LCD_CMD(Low4);
  2572   000754  5014               	movf	LCD_Set_Cursor@Low4^0,w,c
  2573   000756  EC2E  F005         	call	_LCD_CMD
  2574   00075A                     l94:
  2575   00075A  0012               	return		;funcret
  2576   00075C                     __end_of_LCD_Set_Cursor:
  2577                           	callstack 0
  2578                           
  2579 ;; *************** function _LCD_Init *****************
  2580 ;; Defined at:
  2581 ;;		line 5 in file "LCD.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2595 ;;      Params:         0       0       0       0
  2596 ;;      Locals:         0       0       0       0
  2597 ;;      Temps:          1       0       0       0
  2598 ;;      Totals:         1       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used: 1
  2601 ;; Hardware stack levels required when called: 6
  2602 ;; This function calls:
  2603 ;;		_LCD_CMD
  2604 ;;		_LCD_DATA
  2605 ;; This function is called by:
  2606 ;;		_FSM_begin
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text29
  2611   000682                     __ptext29:
  2612                           	callstack 0
  2613   000682                     _LCD_Init:
  2614                           	callstack 23
  2615   000682                     
  2616                           ;LCD.c: 8:   TRISB = 0x00;
  2617   000682  0E00               	movlw	0
  2618   000684  6E93               	movwf	147,c	;volatile
  2619   000686                     
  2620                           ;LCD.c: 9:   TRISBbits.RB5 = 0;
  2621   000686  9A93               	bcf	147,5,c	;volatile
  2622   000688                     
  2623                           ;LCD.c: 10:   TRISBbits.RB4 = 0;
  2624   000688  9893               	bcf	147,4,c	;volatile
  2625   00068A                     
  2626                           ;LCD.c: 13:   LCD_DATA(0x00);
  2627   00068A  0E00               	movlw	0
  2628   00068C  ECDD  F003         	call	_LCD_DATA
  2629   000690                     
  2630                           ;LCD.c: 14:   _delay((unsigned long)((30)*(8000000/4000.0)));
  2631   000690  0E4E               	movlw	78
  2632   000692  6E12               	movwf	??_LCD_Init^0,c
  2633   000694  0EEB               	movlw	235
  2634   000696                     u687:
  2635   000696  2EE8               	decfsz	wreg,f,c
  2636   000698  D7FE               	bra	u687
  2637   00069A  2E12               	decfsz	??_LCD_Init^0,f,c
  2638   00069C  D7FC               	bra	u687
  2639   00069E  F000               	nop	
  2640   0006A0                     
  2641                           ;LCD.c: 15:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2642   0006A0  0EA6               	movlw	166
  2643   0006A2                     u697:
  2644   0006A2  2EE8               	decfsz	wreg,f,c
  2645   0006A4  D7FE               	bra	u697
  2646   0006A6  D000               	nop2	
  2647   0006A8                     
  2648                           ;LCD.c: 16:   LCD_CMD(0x03);
  2649   0006A8  0E03               	movlw	3
  2650   0006AA  EC2E  F005         	call	_LCD_CMD
  2651                           
  2652                           ;LCD.c: 17:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2653   0006AE  0E0D               	movlw	13
  2654   0006B0  6E12               	movwf	??_LCD_Init^0,c
  2655   0006B2  0EFC               	movlw	252
  2656   0006B4                     u707:
  2657   0006B4  2EE8               	decfsz	wreg,f,c
  2658   0006B6  D7FE               	bra	u707
  2659   0006B8  2E12               	decfsz	??_LCD_Init^0,f,c
  2660   0006BA  D7FC               	bra	u707
  2661   0006BC                     
  2662                           ;LCD.c: 18:   LCD_CMD(0x03);
  2663   0006BC  0E03               	movlw	3
  2664   0006BE  EC2E  F005         	call	_LCD_CMD
  2665   0006C2                     
  2666                           ;LCD.c: 19:   _delay((unsigned long)((150)*(8000000/4000000.0)));
  2667   0006C2  0E64               	movlw	100
  2668   0006C4                     u717:
  2669   0006C4  2EE8               	decfsz	wreg,f,c
  2670   0006C6  D7FE               	bra	u717
  2671                           
  2672                           ;LCD.c: 20:   LCD_CMD(0x03);
  2673   0006C8  0E03               	movlw	3
  2674   0006CA  EC2E  F005         	call	_LCD_CMD
  2675                           
  2676                           ;LCD.c: 21:   LCD_CMD(0x02);
  2677   0006CE  0E02               	movlw	2
  2678   0006D0  EC2E  F005         	call	_LCD_CMD
  2679                           
  2680                           ;LCD.c: 22:   LCD_CMD(0x02);
  2681   0006D4  0E02               	movlw	2
  2682   0006D6  EC2E  F005         	call	_LCD_CMD
  2683                           
  2684                           ;LCD.c: 23:   LCD_CMD(0x08);
  2685   0006DA  0E08               	movlw	8
  2686   0006DC  EC2E  F005         	call	_LCD_CMD
  2687                           
  2688                           ;LCD.c: 24:   LCD_CMD(0x00);
  2689   0006E0  0E00               	movlw	0
  2690   0006E2  EC2E  F005         	call	_LCD_CMD
  2691                           
  2692                           ;LCD.c: 25:   LCD_CMD(0x0C);
  2693   0006E6  0E0C               	movlw	12
  2694   0006E8  EC2E  F005         	call	_LCD_CMD
  2695                           
  2696                           ;LCD.c: 26:   LCD_CMD(0x00);
  2697   0006EC  0E00               	movlw	0
  2698   0006EE  EC2E  F005         	call	_LCD_CMD
  2699                           
  2700                           ;LCD.c: 27:   LCD_CMD(0x06);
  2701   0006F2  0E06               	movlw	6
  2702   0006F4  EC2E  F005         	call	_LCD_CMD
  2703   0006F8  0012               	return		;funcret
  2704   0006FA                     __end_of_LCD_Init:
  2705                           	callstack 0
  2706                           
  2707 ;; *************** function _LCD_Clear *****************
  2708 ;; Defined at:
  2709 ;;		line 30 in file "LCD.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;		None
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       0       0       0
  2724 ;;      Locals:         0       0       0       0
  2725 ;;      Temps:          0       0       0       0
  2726 ;;      Totals:         0       0       0       0
  2727 ;;Total ram usage:        0 bytes
  2728 ;; Hardware stack levels used: 1
  2729 ;; Hardware stack levels required when called: 6
  2730 ;; This function calls:
  2731 ;;		_LCD_CMD
  2732 ;; This function is called by:
  2733 ;;		_FSM_begin
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text30
  2738   000B06                     __ptext30:
  2739                           	callstack 0
  2740   000B06                     _LCD_Clear:
  2741                           	callstack 23
  2742   000B06                     
  2743                           ;LCD.c: 32:   LCD_CMD(0);
  2744   000B06  0E00               	movlw	0
  2745   000B08  EC2E  F005         	call	_LCD_CMD
  2746                           
  2747                           ;LCD.c: 33:   LCD_CMD(1);
  2748   000B0C  0E01               	movlw	1
  2749   000B0E  EC2E  F005         	call	_LCD_CMD
  2750   000B12  0012               	return		;funcret
  2751   000B14                     __end_of_LCD_Clear:
  2752                           	callstack 0
  2753                           
  2754 ;; *************** function _LCD_CMD *****************
  2755 ;; Defined at:
  2756 ;;		line 49 in file "LCD.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  CMD             1    wreg     unsigned char 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  CMD             1   16[COMRAM] unsigned char 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2770 ;;      Params:         0       0       0       0
  2771 ;;      Locals:         1       0       0       0
  2772 ;;      Temps:          0       0       0       0
  2773 ;;      Totals:         1       0       0       0
  2774 ;;Total ram usage:        1 bytes
  2775 ;; Hardware stack levels used: 1
  2776 ;; Hardware stack levels required when called: 5
  2777 ;; This function calls:
  2778 ;;		_LCD_DATA
  2779 ;; This function is called by:
  2780 ;;		_LCD_Init
  2781 ;;		_LCD_Clear
  2782 ;;		_LCD_Set_Cursor
  2783 ;;		_LCD_SL
  2784 ;;		_LCD_SR
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text31
  2789   000A5C                     __ptext31:
  2790                           	callstack 0
  2791   000A5C                     _LCD_CMD:
  2792                           	callstack 23
  2793                           
  2794                           ;incstack = 0
  2795                           ;LCD_CMD@CMD stored from wreg
  2796   000A5C  6E11               	movwf	LCD_CMD@CMD^0,c
  2797   000A5E                     
  2798                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:   PORTBbits.RB5 = 0;
  2799   000A5E  9A81               	bcf	129,5,c	;volatile
  2800   000A60                     
  2801                           ;LCD.c: 54:   LCD_DATA(CMD);
  2802   000A60  5011               	movf	LCD_CMD@CMD^0,w,c
  2803   000A62  ECDD  F003         	call	_LCD_DATA
  2804   000A66                     
  2805                           ;LCD.c: 56:   PORTBbits.RB4 = 1;
  2806   000A66  8881               	bsf	129,4,c	;volatile
  2807   000A68                     
  2808                           ;LCD.c: 57:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2809   000A68  0EA6               	movlw	166
  2810   000A6A                     u727:
  2811   000A6A  2EE8               	decfsz	wreg,f,c
  2812   000A6C  D7FE               	bra	u727
  2813   000A6E  D000               	nop2	
  2814   000A70                     
  2815                           ;LCD.c: 58:   PORTBbits.RB4 = 0;
  2816   000A70  9881               	bcf	129,4,c	;volatile
  2817   000A72  0012               	return		;funcret
  2818   000A74                     __end_of_LCD_CMD:
  2819                           	callstack 0
  2820                           
  2821 ;; *************** function _LCD_DATA *****************
  2822 ;; Defined at:
  2823 ;;		line 61 in file "LCD.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;  Data            1    wreg     unsigned char 
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;  Data            1   15[COMRAM] unsigned char 
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      void 
  2830 ;; Registers used:
  2831 ;;		wreg
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2837 ;;      Params:         0       0       0       0
  2838 ;;      Locals:         1       0       0       0
  2839 ;;      Temps:          0       0       0       0
  2840 ;;      Totals:         1       0       0       0
  2841 ;;Total ram usage:        1 bytes
  2842 ;; Hardware stack levels used: 1
  2843 ;; Hardware stack levels required when called: 4
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_LCD_Init
  2848 ;;		_LCD_CMD
  2849 ;;		_LCD_Write_Char
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text32
  2854   0007BA                     __ptext32:
  2855                           	callstack 0
  2856   0007BA                     _LCD_DATA:
  2857                           	callstack 23
  2858                           
  2859                           ;incstack = 0
  2860                           ;LCD_DATA@Data stored from wreg
  2861   0007BA  6E10               	movwf	LCD_DATA@Data^0,c
  2862   0007BC                     
  2863                           ;LCD.c: 61: void LCD_DATA(unsigned char Data);LCD.c: 62: {;LCD.c: 63:   if(Data & 1)
  2864   0007BC  A010               	btfss	LCD_DATA@Data^0,0,c
  2865   0007BE  EFE3  F003         	goto	u21
  2866   0007C2  EFE5  F003         	goto	u20
  2867   0007C6                     u21:
  2868   0007C6  EFE8  F003         	goto	l81
  2869   0007CA                     u20:
  2870   0007CA                     
  2871                           ;LCD.c: 64:     PORTBbits.RB0 = 1;
  2872   0007CA  8081               	bsf	129,0,c	;volatile
  2873   0007CC  EFE9  F003         	goto	l1060
  2874   0007D0                     l81:
  2875                           
  2876                           ;LCD.c: 66:     PORTBbits.RB0 = 0;
  2877   0007D0  9081               	bcf	129,0,c	;volatile
  2878   0007D2                     l1060:
  2879                           
  2880                           ;LCD.c: 67:   if(Data & 2)
  2881   0007D2  A210               	btfss	LCD_DATA@Data^0,1,c
  2882   0007D4  EFEE  F003         	goto	u31
  2883   0007D8  EFF0  F003         	goto	u30
  2884   0007DC                     u31:
  2885   0007DC  EFF3  F003         	goto	l83
  2886   0007E0                     u30:
  2887   0007E0                     
  2888                           ;LCD.c: 68:     PORTBbits.RB1 = 1;
  2889   0007E0  8281               	bsf	129,1,c	;volatile
  2890   0007E2  EFF4  F003         	goto	l1064
  2891   0007E6                     l83:
  2892                           
  2893                           ;LCD.c: 70:     PORTBbits.RB1 = 0;
  2894   0007E6  9281               	bcf	129,1,c	;volatile
  2895   0007E8                     l1064:
  2896                           
  2897                           ;LCD.c: 71:   if(Data & 4)
  2898   0007E8  A410               	btfss	LCD_DATA@Data^0,2,c
  2899   0007EA  EFF9  F003         	goto	u41
  2900   0007EE  EFFB  F003         	goto	u40
  2901   0007F2                     u41:
  2902   0007F2  EFFE  F003         	goto	l85
  2903   0007F6                     u40:
  2904   0007F6                     
  2905                           ;LCD.c: 72:     PORTBbits.RB2 = 1;
  2906   0007F6  8481               	bsf	129,2,c	;volatile
  2907   0007F8  EFFF  F003         	goto	l1068
  2908   0007FC                     l85:
  2909                           
  2910                           ;LCD.c: 74:     PORTBbits.RB2 = 0;
  2911   0007FC  9481               	bcf	129,2,c	;volatile
  2912   0007FE                     l1068:
  2913                           
  2914                           ;LCD.c: 75:   if(Data & 8)
  2915   0007FE  A610               	btfss	LCD_DATA@Data^0,3,c
  2916   000800  EF04  F004         	goto	u51
  2917   000804  EF06  F004         	goto	u50
  2918   000808                     u51:
  2919   000808  EF09  F004         	goto	l87
  2920   00080C                     u50:
  2921   00080C                     
  2922                           ;LCD.c: 76:     PORTBbits.RB3 = 1;
  2923   00080C  8681               	bsf	129,3,c	;volatile
  2924   00080E  EF0A  F004         	goto	l89
  2925   000812                     l87:
  2926                           
  2927                           ;LCD.c: 78:     PORTBbits.RB3 = 0;
  2928   000812  9681               	bcf	129,3,c	;volatile
  2929   000814                     l89:
  2930   000814  0012               	return		;funcret
  2931   000816                     __end_of_LCD_DATA:
  2932                           	callstack 0
  2933                           
  2934 ;; *************** function _Callbacks_Init *****************
  2935 ;; Defined at:
  2936 ;;		line 9 in file "SystemCallbacks.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;  callback        1   15[COMRAM] unsigned char 
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2950 ;;      Params:         0       0       0       0
  2951 ;;      Locals:         1       0       0       0
  2952 ;;      Temps:          0       0       0       0
  2953 ;;      Totals:         1       0       0       0
  2954 ;;Total ram usage:        1 bytes
  2955 ;; Hardware stack levels used: 1
  2956 ;; Hardware stack levels required when called: 4
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_FSM_begin
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text33
  2965   00086C                     __ptext33:
  2966                           	callstack 0
  2967   00086C                     _Callbacks_Init:
  2968                           	callstack 25
  2969   00086C                     
  2970                           ;SystemCallbacks.c: 11:     for(U8 callback=0; callback<(5); callback++)
  2971   00086C  0E00               	movlw	0
  2972   00086E  6E10               	movwf	Callbacks_Init@callback^0,c
  2973   000870                     l1564:
  2974                           
  2975                           ;SystemCallbacks.c: 12:     {;SystemCallbacks.c: 13:         registered_callbacks[callba
      +                          ck].callback = ((void*)0);
  2976   000870  5010               	movf	Callbacks_Init@callback^0,w,c
  2977   000872  0D08               	mullw	8
  2978   000874  0E62               	movlw	low (_registered_callbacks+2)
  2979   000876  24F3               	addwf	243,w,c
  2980   000878  6ED9               	movwf	fsr2l,c
  2981   00087A  0E00               	movlw	high (_registered_callbacks+2)
  2982   00087C  20F4               	addwfc	prodh,w,c
  2983   00087E  6EDA               	movwf	fsr2h,c
  2984   000880  0E00               	movlw	0
  2985   000882  6EDE               	movwf	postinc2,c
  2986   000884  0E00               	movlw	0
  2987   000886  6EDD               	movwf	postdec2,c
  2988                           
  2989                           ;SystemCallbacks.c: 14:         registered_callbacks[callback].count = 0;
  2990   000888  5010               	movf	Callbacks_Init@callback^0,w,c
  2991   00088A  0D08               	mullw	8
  2992   00088C  0E65               	movlw	low (_registered_callbacks+5)
  2993   00088E  24F3               	addwf	243,w,c
  2994   000890  6ED9               	movwf	fsr2l,c
  2995   000892  0E00               	movlw	high (_registered_callbacks+5)
  2996   000894  20F4               	addwfc	prodh,w,c
  2997   000896  6EDA               	movwf	fsr2h,c
  2998   000898  0E00               	movlw	0
  2999   00089A  6EDE               	movwf	postinc2,c
  3000   00089C  0E00               	movlw	0
  3001   00089E  6EDD               	movwf	postdec2,c
  3002   0008A0                     
  3003                           ;SystemCallbacks.c: 15:         callback_count = 0;
  3004   0008A0  0E00               	movlw	0
  3005   0008A2  6E37               	movwf	_callback_count^0,c
  3006   0008A4                     
  3007                           ;SystemCallbacks.c: 16:     }
  3008   0008A4  2A10               	incf	Callbacks_Init@callback^0,f,c
  3009   0008A6  0E04               	movlw	4
  3010   0008A8  6410               	cpfsgt	Callbacks_Init@callback^0,c
  3011   0008AA  EF59  F004         	goto	u421
  3012   0008AE  EF5B  F004         	goto	u420
  3013   0008B2                     u421:
  3014   0008B2  EF38  F004         	goto	l1564
  3015   0008B6                     u420:
  3016   0008B6  0012               	return		;funcret
  3017   0008B8                     __end_of_Callbacks_Init:
  3018                           	callstack 0
  3019                           
  3020 ;; *************** function _timer_overflow_isr *****************
  3021 ;; Defined at:
  3022 ;;		line 11 in file "SystemInterrupts.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3036 ;;      Params:         0       0       0       0
  3037 ;;      Locals:         0       0       0       0
  3038 ;;      Temps:          8       0       0       0
  3039 ;;      Totals:         8       0       0       0
  3040 ;;Total ram usage:        8 bytes
  3041 ;; Hardware stack levels used: 1
  3042 ;; Hardware stack levels required when called: 3
  3043 ;; This function calls:
  3044 ;;		_Callbacks_Manager
  3045 ;;		i2_get_current_state
  3046 ;;		i2_set_state
  3047 ;; This function is called by:
  3048 ;;		Interrupt level 2
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	intcode
  3053   000008                     __pintcode:
  3054                           	callstack 0
  3055   000008                     _timer_overflow_isr:
  3056                           	callstack 23
  3057                           
  3058                           ;incstack = 0
  3059   000008  8239               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3060   00000A  CFFA F008          	movff	pclath,??_timer_overflow_isr
  3061   00000E  CFFB F009          	movff	pclatu,??_timer_overflow_isr+1
  3062   000012  CFE1 F00A          	movff	fsr1l,??_timer_overflow_isr+2
  3063   000016  CFE2 F00B          	movff	fsr1h,??_timer_overflow_isr+3
  3064   00001A  CFD9 F00C          	movff	fsr2l,??_timer_overflow_isr+4
  3065   00001E  CFDA F00D          	movff	fsr2h,??_timer_overflow_isr+5
  3066   000022  CFF3 F00E          	movff	prodl,??_timer_overflow_isr+6
  3067   000026  CFF4 F00F          	movff	prodh,??_timer_overflow_isr+7
  3068   00002A                     
  3069                           ;SystemInterrupts.c: 14:     INTCONbits.GIEH = 0;
  3070   00002A  9EF2               	bcf	242,7,c	;volatile
  3071                           
  3072                           ;SystemInterrupts.c: 15:     INTCONbits.GIEL = 1;
  3073   00002C  8CF2               	bsf	242,6,c	;volatile
  3074   00002E                     
  3075                           ;SystemInterrupts.c: 29:     if(TMR0L < (0x7C))
  3076   00002E  0E7C               	movlw	124
  3077   000030  60D6               	cpfslt	214,c	;volatile
  3078   000032  EF1D  F000         	goto	i2u56_41
  3079   000036  EF1F  F000         	goto	i2u56_40
  3080   00003A                     i2u56_41:
  3081   00003A  EF21  F000         	goto	i2l1746
  3082   00003E                     i2u56_40:
  3083   00003E                     
  3084                           ;SystemInterrupts.c: 30:     {;SystemInterrupts.c: 31:         TMR0L = (0x7C);
  3085   00003E  0E7C               	movlw	124
  3086   000040  6ED6               	movwf	214,c	;volatile
  3087   000042                     i2l1746:
  3088                           
  3089                           ;SystemInterrupts.c: 33:     if(TMR0H < (0xE1))
  3090   000042  0EE1               	movlw	225
  3091   000044  60D7               	cpfslt	215,c	;volatile
  3092   000046  EF27  F000         	goto	i2u57_41
  3093   00004A  EF29  F000         	goto	i2u57_40
  3094   00004E                     i2u57_41:
  3095   00004E  EF2B  F000         	goto	i2l1750
  3096   000052                     i2u57_40:
  3097   000052                     
  3098                           ;SystemInterrupts.c: 34:     {;SystemInterrupts.c: 35:         TMR0H = (0xE1);
  3099   000052  0EE1               	movlw	225
  3100   000054  6ED7               	movwf	215,c	;volatile
  3101   000056                     i2l1750:
  3102                           
  3103                           ;SystemInterrupts.c: 39:     if(INTCONbits.TMR0IF)
  3104   000056  A4F2               	btfss	242,2,c	;volatile
  3105   000058  EF30  F000         	goto	i2u58_41
  3106   00005C  EF32  F000         	goto	i2u58_40
  3107   000060                     i2u58_41:
  3108   000060  EF35  F000         	goto	i2l1756
  3109   000064                     i2u58_40:
  3110   000064                     
  3111                           ;SystemInterrupts.c: 40:     {;SystemInterrupts.c: 42:         Callbacks_Manager();
  3112   000064  ECA0  F002         	call	_Callbacks_Manager	;wreg free
  3113   000068                     
  3114                           ;SystemInterrupts.c: 45:         INTCONbits.TMR0IF = 0;
  3115   000068  94F2               	bcf	242,2,c	;volatile
  3116   00006A                     i2l1756:
  3117                           
  3118                           ;SystemInterrupts.c: 49:     if(INTCONbits.INT0IF)
  3119   00006A  A2F2               	btfss	242,1,c	;volatile
  3120   00006C  EF3A  F000         	goto	i2u59_41
  3121   000070  EF3C  F000         	goto	i2u59_40
  3122   000074                     i2u59_41:
  3123   000074  EF4A  F000         	goto	i2l1764
  3124   000078                     i2u59_40:
  3125   000078                     
  3126                           ;SystemInterrupts.c: 50:     {;SystemInterrupts.c: 52:         if(get_current_state() !=
      +                           WATER_PLANTS)
  3127   000078  ECBC  F005         	call	i2_get_current_state	;wreg free
  3128   00007C  0A02               	xorlw	2
  3129   00007E  B4D8               	btfsc	status,2,c
  3130   000080  EF44  F000         	goto	i2u60_41
  3131   000084  EF46  F000         	goto	i2u60_40
  3132   000088                     i2u60_41:
  3133   000088  EF49  F000         	goto	i2l1762
  3134   00008C                     i2u60_40:
  3135   00008C                     
  3136                           ;SystemInterrupts.c: 53:         {;SystemInterrupts.c: 54:           set_state(WATER_PLA
      +                          NTS);
  3137   00008C  0E02               	movlw	2
  3138   00008E  ECAA  F005         	call	i2_set_state
  3139   000092                     i2l1762:
  3140                           
  3141                           ;SystemInterrupts.c: 58:         INTCONbits.INT0IF = 0;
  3142   000092  92F2               	bcf	242,1,c	;volatile
  3143   000094                     i2l1764:
  3144                           
  3145                           ;SystemInterrupts.c: 62:     INTCONbits.GIEH = 1;
  3146   000094  8EF2               	bsf	242,7,c	;volatile
  3147   000096                     
  3148                           ;SystemInterrupts.c: 63:     INTCONbits.GIEL = 1;
  3149   000096  8CF2               	bsf	242,6,c	;volatile
  3150   000098  C00F  FFF4         	movff	??_timer_overflow_isr+7,prodh
  3151   00009C  C00E  FFF3         	movff	??_timer_overflow_isr+6,prodl
  3152   0000A0  C00D  FFDA         	movff	??_timer_overflow_isr+5,fsr2h
  3153   0000A4  C00C  FFD9         	movff	??_timer_overflow_isr+4,fsr2l
  3154   0000A8  C00B  FFE2         	movff	??_timer_overflow_isr+3,fsr1h
  3155   0000AC  C00A  FFE1         	movff	??_timer_overflow_isr+2,fsr1l
  3156   0000B0  C009  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  3157   0000B4  C008  FFFA         	movff	??_timer_overflow_isr,pclath
  3158   0000B8  9239               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3159   0000BA  0011               	retfie		f
  3160   0000BC                     __end_of_timer_overflow_isr:
  3161                           	callstack 0
  3162                           
  3163 ;; *************** function _Callbacks_Manager *****************
  3164 ;; Defined at:
  3165 ;;		line 24 in file "SystemCallbacks.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;		None
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  callbacks       1    6[COMRAM] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  1    wreg      void 
  3172 ;; Registers used:
  3173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3179 ;;      Params:         0       0       0       0
  3180 ;;      Locals:         1       0       0       0
  3181 ;;      Temps:          4       0       0       0
  3182 ;;      Totals:         5       0       0       0
  3183 ;;Total ram usage:        5 bytes
  3184 ;; Hardware stack levels used: 1
  3185 ;; Hardware stack levels required when called: 2
  3186 ;; This function calls:
  3187 ;;		_Check_Moisture_cb
  3188 ;;		_Watering_Done_cb
  3189 ;; This function is called by:
  3190 ;;		_timer_overflow_isr
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text35
  3195   000540                     __ptext35:
  3196                           	callstack 0
  3197   000540                     _Callbacks_Manager:
  3198                           	callstack 23
  3199   000540                     
  3200                           ;SystemCallbacks.c: 26:     for (U8 callbacks = 0; callbacks < (5); callbacks++)
  3201   000540  0E00               	movlw	0
  3202   000542  6E07               	movwf	Callbacks_Manager@callbacks^0,c
  3203   000544                     i2l1700:
  3204                           
  3205                           ;SystemCallbacks.c: 27:     {;SystemCallbacks.c: 28:         (registered_callbacks[callb
      +                          acks].count)++;
  3206   000544  5007               	movf	Callbacks_Manager@callbacks^0,w,c
  3207   000546  0D08               	mullw	8
  3208   000548  0E65               	movlw	low (_registered_callbacks+5)
  3209   00054A  24F3               	addwf	243,w,c
  3210   00054C  6ED9               	movwf	fsr2l,c
  3211   00054E  0E00               	movlw	high (_registered_callbacks+5)
  3212   000550  20F4               	addwfc	prodh,w,c
  3213   000552  6EDA               	movwf	fsr2h,c
  3214   000554  2ADE               	incf	postinc2,f,c
  3215   000556  0E00               	movlw	0
  3216   000558  22DD               	addwfc	postdec2,f,c
  3217   00055A                     
  3218                           ;SystemCallbacks.c: 29:         if(registered_callbacks[callbacks].count >=
  3219   00055A  5007               	movf	Callbacks_Manager@callbacks^0,w,c
  3220   00055C  0D08               	mullw	8
  3221   00055E  0E60               	movlw	low _registered_callbacks
  3222   000560  24F3               	addwf	243,w,c
  3223   000562  6ED9               	movwf	fsr2l,c
  3224   000564  0E00               	movlw	high _registered_callbacks
  3225   000566  20F4               	addwfc	prodh,w,c
  3226   000568  6EDA               	movwf	fsr2h,c
  3227   00056A  5007               	movf	Callbacks_Manager@callbacks^0,w,c
  3228   00056C  0D08               	mullw	8
  3229   00056E  0E65               	movlw	low (_registered_callbacks+5)
  3230   000570  24F3               	addwf	243,w,c
  3231   000572  6EE1               	movwf	fsr1l,c
  3232   000574  0E00               	movlw	high (_registered_callbacks+5)
  3233   000576  20F4               	addwfc	prodh,w,c
  3234   000578  6EE2               	movwf	fsr1h,c
  3235   00057A  50DE               	movf	postinc2,w,c
  3236   00057C  5CE6               	subwf	postinc1,w,c
  3237   00057E  50DE               	movf	postinc2,w,c
  3238   000580  58E6               	subwfb	postinc1,w,c
  3239   000582  A0D8               	btfss	status,0,c
  3240   000584  EFC6  F002         	goto	i2u52_41
  3241   000588  EFC8  F002         	goto	i2u52_40
  3242   00058C                     i2u52_41:
  3243   00058C  EFFA  F002         	goto	i2l1710
  3244   000590                     i2u52_40:
  3245   000590                     
  3246                           ;SystemCallbacks.c: 31:         {;SystemCallbacks.c: 32:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  3247   000590  5007               	movf	Callbacks_Manager@callbacks^0,w,c
  3248   000592  0D08               	mullw	8
  3249   000594  0E62               	movlw	low (_registered_callbacks+2)
  3250   000596  24F3               	addwf	243,w,c
  3251   000598  6ED9               	movwf	fsr2l,c
  3252   00059A  0E00               	movlw	high (_registered_callbacks+2)
  3253   00059C  20F4               	addwfc	prodh,w,c
  3254   00059E  6EDA               	movwf	fsr2h,c
  3255   0005A0  50DE               	movf	postinc2,w,c
  3256   0005A2  10DE               	iorwf	postinc2,w,c
  3257   0005A4  B4D8               	btfsc	status,2,c
  3258   0005A6  EFD7  F002         	goto	i2u53_41
  3259   0005AA  EFD9  F002         	goto	i2u53_40
  3260   0005AE                     i2u53_41:
  3261   0005AE  EFFA  F002         	goto	i2l1710
  3262   0005B2                     i2u53_40:
  3263   0005B2                     
  3264                           ;SystemCallbacks.c: 33:             {;SystemCallbacks.c: 34:                 registered_
      +                          callbacks[callbacks].count = 0;
  3265   0005B2  5007               	movf	Callbacks_Manager@callbacks^0,w,c
  3266   0005B4  0D08               	mullw	8
  3267   0005B6  0E65               	movlw	low (_registered_callbacks+5)
  3268   0005B8  24F3               	addwf	243,w,c
  3269   0005BA  6ED9               	movwf	fsr2l,c
  3270   0005BC  0E00               	movlw	high (_registered_callbacks+5)
  3271   0005BE  20F4               	addwfc	prodh,w,c
  3272   0005C0  6EDA               	movwf	fsr2h,c
  3273   0005C2  0E00               	movlw	0
  3274   0005C4  6EDE               	movwf	postinc2,c
  3275   0005C6  0E00               	movlw	0
  3276   0005C8  6EDD               	movwf	postdec2,c
  3277   0005CA                     
  3278                           ;SystemCallbacks.c: 35:                 registered_callbacks[callbacks].callback();
  3279   0005CA  5007               	movf	Callbacks_Manager@callbacks^0,w,c
  3280   0005CC  0D08               	mullw	8
  3281   0005CE  0E62               	movlw	low (_registered_callbacks+2)
  3282   0005D0  24F3               	addwf	243,w,c
  3283   0005D2  6ED9               	movwf	fsr2l,c
  3284   0005D4  0E00               	movlw	high (_registered_callbacks+2)
  3285   0005D6  20F4               	addwfc	prodh,w,c
  3286   0005D8  6EDA               	movwf	fsr2h,c
  3287   0005DA  D802               	call	i2u54_48
  3288   0005DC  EFFA  F002         	goto	i2u54_49
  3289   0005E0                     i2u54_48:
  3290   0005E0  0005               	push	
  3291   0005E2  6EFA               	movwf	pclath,c
  3292   0005E4  50DE               	movf	postinc2,w,c
  3293   0005E6  6EFD               	movwf	tosl,c
  3294   0005E8  50DE               	movf	postinc2,w,c
  3295   0005EA  6EFE               	movwf	tosh,c
  3296   0005EC  50F8               	movf	tblptru,w,c
  3297   0005EE  6EFF               	movwf	tosu,c
  3298   0005F0  50FA               	movf	pclath,w,c
  3299   0005F2  0012               	return		;indir
  3300   0005F4                     i2u54_49:
  3301   0005F4                     i2l1710:
  3302                           
  3303                           ;SystemCallbacks.c: 38:     }
  3304   0005F4  2A07               	incf	Callbacks_Manager@callbacks^0,f,c
  3305   0005F6  0E04               	movlw	4
  3306   0005F8  6407               	cpfsgt	Callbacks_Manager@callbacks^0,c
  3307   0005FA  EF01  F003         	goto	i2u55_41
  3308   0005FE  EF03  F003         	goto	i2u55_40
  3309   000602                     i2u55_41:
  3310   000602  EFA2  F002         	goto	i2l1700
  3311   000606                     i2u55_40:
  3312   000606  0012               	return		;funcret
  3313   000608                     __end_of_Callbacks_Manager:
  3314                           	callstack 0
  3315                           
  3316 ;; *************** function _Check_Moisture_cb *****************
  3317 ;; Defined at:
  3318 ;;		line 148 in file "System_FSM.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3332 ;;      Params:         0       0       0       0
  3333 ;;      Locals:         0       0       0       0
  3334 ;;      Temps:          0       0       0       0
  3335 ;;      Totals:         0       0       0       0
  3336 ;;Total ram usage:        0 bytes
  3337 ;; Hardware stack levels used: 1
  3338 ;; Hardware stack levels required when called: 1
  3339 ;; This function calls:
  3340 ;;		i2_Reset_Counter
  3341 ;;		i2_get_current_state
  3342 ;;		i2_set_state
  3343 ;; This function is called by:
  3344 ;;		_Callbacks_Manager
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text36
  3349   0009D4                     __ptext36:
  3350                           	callstack 0
  3351   0009D4                     _Check_Moisture_cb:
  3352                           	callstack 23
  3353   0009D4                     
  3354                           ;System_FSM.c: 153:     if(get_current_state() != WATER_PLANTS)
  3355   0009D4  ECBC  F005         	call	i2_get_current_state	;wreg free
  3356   0009D8  0A02               	xorlw	2
  3357   0009DA  B4D8               	btfsc	status,2,c
  3358   0009DC  EFF2  F004         	goto	i2u47_41
  3359   0009E0  EFF4  F004         	goto	i2u47_40
  3360   0009E4                     i2u47_41:
  3361   0009E4  EFFD  F004         	goto	i2l231
  3362   0009E8                     i2u47_40:
  3363   0009E8                     
  3364                           ;System_FSM.c: 154:     {;System_FSM.c: 155:       Reset_Counter(&WateringDoneCB_Config)
      +                          ;
  3365   0009E8  0E1E               	movlw	low _WateringDoneCB_Config
  3366   0009EA  6E01               	movwf	i2Reset_Counter@config^0,c
  3367   0009EC  0E00               	movlw	high _WateringDoneCB_Config
  3368   0009EE  6E02               	movwf	(i2Reset_Counter@config+1)^0,c
  3369   0009F0  EC66  F005         	call	i2_Reset_Counter	;wreg free
  3370   0009F4                     
  3371                           ;System_FSM.c: 156:       set_state(CHECK_MOISTURE);
  3372   0009F4  0E03               	movlw	3
  3373   0009F6  ECAA  F005         	call	i2_set_state
  3374   0009FA                     i2l231:
  3375   0009FA  0012               	return		;funcret
  3376   0009FC                     __end_of_Check_Moisture_cb:
  3377                           	callstack 0
  3378                           
  3379 ;; *************** function _Watering_Done_cb *****************
  3380 ;; Defined at:
  3381 ;;		line 160 in file "System_FSM.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3395 ;;      Params:         0       0       0       0
  3396 ;;      Locals:         0       0       0       0
  3397 ;;      Temps:          0       0       0       0
  3398 ;;      Totals:         0       0       0       0
  3399 ;;Total ram usage:        0 bytes
  3400 ;; Hardware stack levels used: 1
  3401 ;; Hardware stack levels required when called: 1
  3402 ;; This function calls:
  3403 ;;		i2_Reset_Counter
  3404 ;;		i2_get_current_state
  3405 ;;		i2_set_state
  3406 ;; This function is called by:
  3407 ;;		_Callbacks_Manager
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text37
  3412   0009FC                     __ptext37:
  3413                           	callstack 0
  3414   0009FC                     _Watering_Done_cb:
  3415                           	callstack 23
  3416   0009FC                     
  3417                           ;System_FSM.c: 163:     if(get_current_state() == WATER_PLANTS)
  3418   0009FC  ECBC  F005         	call	i2_get_current_state	;wreg free
  3419   000A00  0A02               	xorlw	2
  3420   000A02  A4D8               	btfss	status,2,c
  3421   000A04  EF06  F005         	goto	i2u48_41
  3422   000A08  EF08  F005         	goto	i2u48_40
  3423   000A0C                     i2u48_41:
  3424   000A0C  EF11  F005         	goto	i2l235
  3425   000A10                     i2u48_40:
  3426   000A10                     
  3427                           ;System_FSM.c: 164:     {;System_FSM.c: 165:         Reset_Counter(&MoistureCB_Config);
  3428   000A10  0E26               	movlw	low _MoistureCB_Config
  3429   000A12  6E01               	movwf	i2Reset_Counter@config^0,c
  3430   000A14  0E00               	movlw	high _MoistureCB_Config
  3431   000A16  6E02               	movwf	(i2Reset_Counter@config+1)^0,c
  3432   000A18  EC66  F005         	call	i2_Reset_Counter	;wreg free
  3433   000A1C                     
  3434                           ;System_FSM.c: 166:         set_state(IDLE_STATE);
  3435   000A1C  0E01               	movlw	1
  3436   000A1E  ECAA  F005         	call	i2_set_state
  3437   000A22                     i2l235:
  3438   000A22  0012               	return		;funcret
  3439   000A24                     __end_of_Watering_Done_cb:
  3440                           	callstack 0
  3441                           
  3442 ;; *************** function i2_set_state *****************
  3443 ;; Defined at:
  3444 ;;		line 9 in file "FSM_states.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  state_to_set    1    wreg     enum E2
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  state_to_set    1    0[COMRAM] enum E2
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      void 
  3451 ;; Registers used:
  3452 ;;		wreg
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3458 ;;      Params:         0       0       0       0
  3459 ;;      Locals:         1       0       0       0
  3460 ;;      Temps:          0       0       0       0
  3461 ;;      Totals:         1       0       0       0
  3462 ;;Total ram usage:        1 bytes
  3463 ;; Hardware stack levels used: 1
  3464 ;; This function calls:
  3465 ;;		Nothing
  3466 ;; This function is called by:
  3467 ;;		_Check_Moisture_cb
  3468 ;;		_Watering_Done_cb
  3469 ;;		_timer_overflow_isr
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text38
  3474   000B54                     __ptext38:
  3475                           	callstack 0
  3476   000B54                     i2_set_state:
  3477                           	callstack 25
  3478                           
  3479                           ;incstack = 0
  3480                           ;i2set_state@state_to_set stored from wreg
  3481   000B54  6E01               	movwf	i2set_state@state_to_set^0,c
  3482   000B56                     
  3483                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  3484   000B56  C001  F038         	movff	i2set_state@state_to_set,_FSM_state
  3485   000B5A  0012               	return		;funcret
  3486   000B5C                     __end_ofi2_set_state:
  3487                           	callstack 0
  3488                           
  3489 ;; *************** function i2_get_current_state *****************
  3490 ;; Defined at:
  3491 ;;		line 5 in file "FSM_states.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      enum E2
  3498 ;; Registers used:
  3499 ;;		wreg, status,2
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3505 ;;      Params:         0       0       0       0
  3506 ;;      Locals:         0       0       0       0
  3507 ;;      Temps:          0       0       0       0
  3508 ;;      Totals:         0       0       0       0
  3509 ;;Total ram usage:        0 bytes
  3510 ;; Hardware stack levels used: 1
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_Check_Moisture_cb
  3515 ;;		_Watering_Done_cb
  3516 ;;		_timer_overflow_isr
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text39
  3521   000B78                     __ptext39:
  3522                           	callstack 0
  3523   000B78                     i2_get_current_state:
  3524                           	callstack 25
  3525   000B78                     
  3526                           ;FSM_states.c: 7:     return FSM_state;
  3527   000B78  5038               	movf	_FSM_state^0,w,c
  3528   000B7A  0012               	return		;funcret
  3529   000B7C                     __end_ofi2_get_current_state:
  3530                           	callstack 0
  3531                           
  3532 ;; *************** function i2_Reset_Counter *****************
  3533 ;; Defined at:
  3534 ;;		line 42 in file "SystemCallbacks.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  config          2    0[COMRAM] PTR struct .
  3537 ;;		 -> WateringDoneCB_Config(8), MoistureCB_Config(8), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3549 ;;      Params:         2       0       0       0
  3550 ;;      Locals:         0       0       0       0
  3551 ;;      Temps:          0       0       0       0
  3552 ;;      Totals:         2       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_Check_Moisture_cb
  3559 ;;		_Watering_Done_cb
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text40
  3564   000ACC                     __ptext40:
  3565                           	callstack 0
  3566   000ACC                     i2_Reset_Counter:
  3567                           	callstack 23
  3568   000ACC                     
  3569                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  3570   000ACC  EE20 F005          	lfsr	2,5
  3571   000AD0  5001               	movf	i2Reset_Counter@config^0,w,c
  3572   000AD2  26D9               	addwf	fsr2l,f,c
  3573   000AD4  5002               	movf	(i2Reset_Counter@config+1)^0,w,c
  3574   000AD6  22DA               	addwfc	fsr2h,f,c
  3575   000AD8  0E00               	movlw	0
  3576   000ADA  6EDE               	movwf	postinc2,c
  3577   000ADC  0E00               	movlw	0
  3578   000ADE  6EDD               	movwf	postdec2,c
  3579   000AE0  0012               	return		;funcret
  3580   000AE2                     __end_ofi2_Reset_Counter:
  3581                           	callstack 0
  3582                           
  3583                           	psect	text41
  3584   000000                     __ptext41:
  3585                           	callstack 0
  3586   000000                     
  3587                           	psect	rparam
  3588   000000                     
  3589                           	psect	temp
  3590   000039                     btemp:
  3591                           	callstack 0
  3592   000039                     	ds	1
  3593   000000                     int$flags	set	btemp
  3594   000000                     wtemp8	set	btemp+1
  3595   000000                     ttemp5	set	btemp+1
  3596   000000                     ttemp6	set	btemp+4
  3597   000000                     ttemp7	set	btemp+8
  3598                           
  3599                           	psect	idloc
  3600                           
  3601                           ;Config register IDLOC0 @ 0x200000
  3602                           ;	unspecified, using default values
  3603   200000                     	org	2097152
  3604   200000  FF                 	db	255
  3605                           
  3606                           ;Config register IDLOC1 @ 0x200001
  3607                           ;	unspecified, using default values
  3608   200001                     	org	2097153
  3609   200001  FF                 	db	255
  3610                           
  3611                           ;Config register IDLOC2 @ 0x200002
  3612                           ;	unspecified, using default values
  3613   200002                     	org	2097154
  3614   200002  FF                 	db	255
  3615                           
  3616                           ;Config register IDLOC3 @ 0x200003
  3617                           ;	unspecified, using default values
  3618   200003                     	org	2097155
  3619   200003  FF                 	db	255
  3620                           
  3621                           ;Config register IDLOC4 @ 0x200004
  3622                           ;	unspecified, using default values
  3623   200004                     	org	2097156
  3624   200004  FF                 	db	255
  3625                           
  3626                           ;Config register IDLOC5 @ 0x200005
  3627                           ;	unspecified, using default values
  3628   200005                     	org	2097157
  3629   200005  FF                 	db	255
  3630                           
  3631                           ;Config register IDLOC6 @ 0x200006
  3632                           ;	unspecified, using default values
  3633   200006                     	org	2097158
  3634   200006  FF                 	db	255
  3635                           
  3636                           ;Config register IDLOC7 @ 0x200007
  3637                           ;	unspecified, using default values
  3638   200007                     	org	2097159
  3639   200007  FF                 	db	255
  3640                           
  3641                           	psect	config
  3642                           
  3643                           ; Padding undefined space
  3644   300000                     	org	3145728
  3645   300000  FF                 	db	255
  3646                           
  3647                           ;Config register CONFIG1H @ 0x300001
  3648                           ;	Oscillator Selection bits
  3649                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  3650                           ;	Fail-Safe Clock Monitor Enable bit
  3651                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3652                           ;	Internal External Oscillator Switchover bit
  3653                           ;	IESO = ON, Internal External Switchover mode enabled
  3654   300001                     	org	3145729
  3655   300001  C8                 	db	200
  3656                           
  3657                           ;Config register CONFIG2L @ 0x300002
  3658                           ;	Power-up Timer Enable bit
  3659                           ;	PWRTEN = OFF, PWRT disabled
  3660                           ;	Brown-out Reset Enable bits
  3661                           ;	BOREN = OFF, Brown-out Reset disabled
  3662                           ;	Brown Out Reset Voltage bits
  3663                           ;	BORV = 0x3, unprogrammed default
  3664   300002                     	org	3145730
  3665   300002  0D                 	db	13
  3666                           
  3667                           ;Config register CONFIG2H @ 0x300003
  3668                           ;	Watchdog Timer Enable bit
  3669                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3670                           ;	Watchdog Timer Postscale Select bits
  3671                           ;	WDPS = 32768, 1:32768
  3672                           ;	Watchdog Timer Window Enable bit
  3673                           ;	WINEN = OFF, WDT window disabled
  3674   300003                     	org	3145731
  3675   300003  3E                 	db	62
  3676                           
  3677                           ;Config register CONFIG3L @ 0x300004
  3678                           ;	PWM output pins Reset state control
  3679                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  3680                           ;	Low-Side Transistors Polarity
  3681                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  3682                           ;	High-Side Transistors Polarity
  3683                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  3684                           ;	Timer1 Oscillator MUX
  3685                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  3686   300004                     	org	3145732
  3687   300004  3C                 	db	60
  3688                           
  3689                           ;Config register CONFIG3H @ 0x300005
  3690                           ;	FLTA MUX bit
  3691                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  3692                           ;	SSP I/O MUX bit
  3693                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  3694                           ;	PWM4 MUX bit
  3695                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  3696                           ;	TMR0/T5CKI External clock MUX bit
  3697                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  3698                           ;	MCLR Pin Enable bit
  3699                           ;	MCLRE = ON, Enabled
  3700   300005                     	org	3145733
  3701   300005  9D                 	db	157
  3702                           
  3703                           ;Config register CONFIG4L @ 0x300006
  3704                           ;	Stack Full/Underflow Reset Enable bit
  3705                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3706                           ;	Low-Voltage ICSP Enable bit
  3707                           ;	LVP = OFF, Low-voltage ICSP disabled
  3708                           ;	Background Debugger Enable bit
  3709                           ;	DEBUG = 0x1, unprogrammed default
  3710   300006                     	org	3145734
  3711   300006  81                 	db	129
  3712                           
  3713                           ; Padding undefined space
  3714   300007                     	org	3145735
  3715   300007  FF                 	db	255
  3716                           
  3717                           ;Config register CONFIG5L @ 0x300008
  3718                           ;	Code Protection bit
  3719                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  3720                           ;	Code Protection bit
  3721                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  3722   300008                     	org	3145736
  3723   300008  0F                 	db	15
  3724                           
  3725                           ;Config register CONFIG5H @ 0x300009
  3726                           ;	Boot Block Code Protection bit
  3727                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3728                           ;	Data EEPROM Code Protection bit
  3729                           ;	CPD = OFF, Data EEPROM not code-protected
  3730   300009                     	org	3145737
  3731   300009  C0                 	db	192
  3732                           
  3733                           ;Config register CONFIG6L @ 0x30000A
  3734                           ;	Write Protection bit
  3735                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  3736                           ;	Write Protection bit
  3737                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  3738   30000A                     	org	3145738
  3739   30000A  0F                 	db	15
  3740                           
  3741                           ;Config register CONFIG6H @ 0x30000B
  3742                           ;	Configuration Register Write Protection bit
  3743                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3744                           ;	Boot Block Write Protection bit
  3745                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3746                           ;	Data EEPROM Write Protection bit
  3747                           ;	WRTD = OFF, Data EEPROM not write-protected
  3748   30000B                     	org	3145739
  3749   30000B  E0                 	db	224
  3750                           
  3751                           ;Config register CONFIG7L @ 0x30000C
  3752                           ;	Table Read Protection bit
  3753                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  3754                           ;	Table Read Protection bit
  3755                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  3756   30000C                     	org	3145740
  3757   30000C  0F                 	db	15
  3758                           
  3759                           ;Config register CONFIG7H @ 0x30000D
  3760                           ;	Boot Block Table Read Protection bit
  3761                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3762   30000D                     	org	3145741
  3763   30000D  40                 	db	64
  3764                           tosu	equ	0xFFF
  3765                           tosh	equ	0xFFE
  3766                           tosl	equ	0xFFD
  3767                           stkptr	equ	0xFFC
  3768                           pclatu	equ	0xFFB
  3769                           pclath	equ	0xFFA
  3770                           pcl	equ	0xFF9
  3771                           tblptru	equ	0xFF8
  3772                           tblptrh	equ	0xFF7
  3773                           tblptrl	equ	0xFF6
  3774                           tablat	equ	0xFF5
  3775                           prodh	equ	0xFF4
  3776                           prodl	equ	0xFF3
  3777                           indf0	equ	0xFEF
  3778                           postinc0	equ	0xFEE
  3779                           postdec0	equ	0xFED
  3780                           preinc0	equ	0xFEC
  3781                           plusw0	equ	0xFEB
  3782                           fsr0h	equ	0xFEA
  3783                           fsr0l	equ	0xFE9
  3784                           wreg	equ	0xFE8
  3785                           indf1	equ	0xFE7
  3786                           postinc1	equ	0xFE6
  3787                           postdec1	equ	0xFE5
  3788                           preinc1	equ	0xFE4
  3789                           plusw1	equ	0xFE3
  3790                           fsr1h	equ	0xFE2
  3791                           fsr1l	equ	0xFE1
  3792                           bsr	equ	0xFE0
  3793                           indf2	equ	0xFDF
  3794                           postinc2	equ	0xFDE
  3795                           postdec2	equ	0xFDD
  3796                           preinc2	equ	0xFDC
  3797                           plusw2	equ	0xFDB
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8

Data Sizes:
    Strings     87
    Constant    0
    Data        16
    BSS         50
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      56
    BANK0           160      0      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Register_Callback@config	PTR struct . size(2) Largest target is 8
		 -> WateringDoneCB_Config(COMRAM[8]), MoistureCB_Config(COMRAM[8]), 

    Reset_Counter@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Reset_Counter@config	PTR struct . size(2) Largest target is 8
		 -> WateringDoneCB_Config(COMRAM[8]), MoistureCB_Config(COMRAM[8]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    WateringDoneCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    S796$callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    MoistureCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[19]), STR_4(CODE[20]), STR_3(CODE[15]), STR_2(CODE[16]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_LCD_Write_String
    _SMS_Set_State->_set_state
    _SMS_Read_Moisture_Value->_ADC_Read
    _Register_Callback->_Reset_Counter
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager
    _Watering_Done_cb->i2_Reset_Counter
    _Check_Moisture_cb->i2_Reset_Counter

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2848
                          _FSM_begin
                        _Timer0_init
                        _Timer0_stop
                         _UART2_init
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _UART2_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                            4     4      0    2833
                                             25 COMRAM     4     4      0
                     _Callbacks_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                  _Register_Callback
                      _Reset_Counter
            _SMS_Read_Moisture_Value
                      _SMS_Set_State
                           _SMS_init
                       _Timer0_start
                         _UART2_send
                     _WaterPump_Init
                      _WaterPump_OFF
                       _WaterPump_ON
       _checking_moisture_status_led
                  _get_current_state
                    _idle_status_led
                          _init_leds
                          _set_state
                _watering_status_led
 ---------------------------------------------------------------------------------
 (2) _watering_status_led                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_leds                                            2     2      0       0
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _idle_status_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checking_moisture_status_led                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_ON                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_OFF                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UART2_send                                           1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_Set_State                                        2     0      2     157
                                             16 COMRAM     2     0      2
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_Read_Moisture_Value                              4     2      2      23
                                             17 COMRAM     4     2      2
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             15 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Register_Callback                                    4     2      2     590
                                             17 COMRAM     4     2      2
                      _Reset_Counter
 ---------------------------------------------------------------------------------
 (2) _Reset_Counter                                        2     0      2     350
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2     590
                                             19 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     120
                                             16 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1     725
                                             17 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                             17 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              1     1      0      75
                                             16 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_DATA                                             1     1      0      60
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Callbacks_Init                                       1     1      0      90
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   8     8      0     392
                                              7 COMRAM     8     8      0
                  _Callbacks_Manager
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     370
                                              2 COMRAM     5     5      0
                  _Check_Moisture_cb *
                   _Watering_Done_cb *
 ---------------------------------------------------------------------------------
 (7) _Watering_Done_cb                                     0     0      0      96
                    i2_Reset_Counter
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (7) _Check_Moisture_cb                                    0     0      0      96
                    i2_Reset_Counter
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) i2_set_state                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_get_current_state                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_Reset_Counter                                      2     0      2      74
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _Callbacks_Init
     _LCD_Clear
       _LCD_CMD
         _LCD_DATA
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _LCD_Set_Cursor
       _LCD_CMD
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_DATA
     _Register_Callback
       _Reset_Counter
     _Reset_Counter
     _SMS_Read_Moisture_Value
       _ADC_Read
         _ADC_in_progress
         _ADC_start
     _SMS_Set_State
       _set_state
     _SMS_init
       _ADC_init
         _ADC_stop
     _Timer0_start
     _UART2_send
     _WaterPump_Init
     _WaterPump_OFF
     _WaterPump_ON
     _checking_moisture_status_led
     _get_current_state
     _idle_status_led
     _init_leds
     _set_state
     _watering_status_led
   _Timer0_init
   _Timer0_stop
   _UART2_init
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager
     _Check_Moisture_cb *
       i2_Reset_Counter
       i2_get_current_state
       i2_set_state
     _Watering_Done_cb *
       i2_Reset_Counter
       i2_get_current_state
       i2_set_state
   i2_get_current_state
   i2_set_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      38       1       59.6%
BITBIGSFRllll       21      0       0      21        0.0%
BITBIGSFRhhhl       19      0       0      10        0.0%
BITBIGSFRhhhh        D      0       0       9        0.0%
BITBIGSFRlhllh       C      0       0      16        0.0%
BITBIGSFRhhlll       B      0       0      13        0.0%
BITBIGSFRlllhl       9      0       0      20        0.0%
BITBIGSFRlhlhh       7      0       0      15        0.0%
BITBIGSFRlhh         7      0       0      14        0.0%
BITBIGSFRlllhh       6      0       0      19        0.0%
BITBIGSFRlhlll       4      0       0      17        0.0%
BITBIGSFRllh         3      0       0      18        0.0%
BITBIGSFRhhllh       2      0       0      12        0.0%
BITBIGSFRhhlh        1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60      22        0.0%
DATA                 0      0      60      24        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Apr 10 22:10:01 2023

                                  l22 0B76                                    l33 09C2  
                                  l25 0A5A                                    l34 09D2  
                                  l19 0B66                                    l51 0B6A  
                                  l28 0AF4                                    l45 0A88  
                                  l48 0B72                                    l81 07D0  
                                  l66 06F8                                    l83 07E6  
                                  l92 072A                                    l85 07FC  
                                  l69 0B12                                    l78 0A72  
                                  l94 075A                                    l87 0812  
                                  l89 0814                                    l97 08FE  
                                  u10 0AF2                                    u11 0AEC  
                                  u20 07CA                                    u21 07C6  
                                  u30 07E0                                    u31 07DC  
                                  u40 07F6                                    u16 0AF4  
                                  u41 07F2                                    u50 080C  
                                  u51 0808                   __end_ofi2_set_state 0B5C  
                         _pump_status 0036                                   l103 086A  
                                 l140 0B60                                   l150 07B8  
                                 l143 0AB4                                   l320 0B3A  
                                 l323 0B42                                   l155 0B6E  
                                 l227 053E                                   l244 08B6  
                                 l262 0680                                   l158 0B52  
                                 l326 0B4A                                   _ADC 0032  
                                 l360 0A9E                                   l257 0ACA  
                                 l281 0B26                                   l354 0A3E  
                                 l284 0B1C                                   l357 0A8C  
                                 l278 09A8                                   l287 0B30  
                                 u400 0792                                   u401 078E  
                                 u410 07A8                                   u411 07A4  
                                 u420 08B6                                   u180 0A9A  
                                 u500 0476                                   u421 08B2  
                                 u181 0A96                                   u501 0472  
                                 u430 0618                                   u350 09C2  
                                 u510 04DA                                   u431 0614  
                                 u351 09BE                                   u511 04D6  
                                 u360 070C                                   u440 0636  
                                 u361 0708                                   u441 0632  
                                 u370 073C                                   u450 0650  
                                 u371 0738                                   u451 064C  
                                 u380 086A                                   u381 0866  
                                 u461 066A                                   u390 0772  
                                 u391 076E                                   u617 03C4  
                                 u490 041A                                   u707 06B4  
                                 u627 04AC                                   u491 0416  
                                 u717 06C4                                   u637 0994  
                                 u727 0A6A                                   u647 08D4  
                                 u657 08DE                                   u667 08EE  
                                 u677 08F8                                   u687 0696  
                                 u697 06A2                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                     __end_of_LCD_CMD 0A74                        _LCD_Set_Cursor 06FA  
                                l1100 0A68                                  l1102 0A70  
                                l1110 08D0                                  l1120 08EA  
                                l1112 08D2                                  l1104 08BA  
                                l1122 08EC                                  l1114 08DA  
                                l1106 08C6                                  l1050 0B74  
                                l1060 07D2                                  l1124 08F4  
                                l1116 08DC                                  l1108 08C8  
                                l1052 0AE2                                  l1140 0B70  
                                l1204 0B6C                                  l1300 0A3A  
                                l1070 080C                                  l1062 07E0  
                                l1150 0690                                  l1142 0682  
                                l1126 08F6                                  l1118 08E4  
                                l1222 0B32                                  l1230 09A0  
                                l1302 0A3C                                  l1064 07E8  
                                l1056 07BC                                  l1160 0B06  
                                l1152 06A0                                  l1144 0686  
                                l1048 0B62                                  l1128 0B4E  
                                l1080 0A4C                                  l1072 0A40  
                                l1224 0B36                                  l1232 09A2  
                                l1066 07F6                                  l1058 07CA  
                                l1154 06A8                                  l1146 0688  
                                l1082 0A4E                                  l1074 0A44  
                                l1234 09A4                                  l1226 097A  
                                l1068 07FE                                  l1156 06BC  
                                l1148 068A                                  l1084 0A52  
                                l1076 0A48                                  l1252 0A8C  
                                l1260 0B1E                                  l1236 09A6  
                                l1228 098A                                  l1094 0A5E  
                                l1158 06C2                                  l1086 0A54  
                                l1078 0A4A                                  l1254 0A9A  
                                l1262 0B3C                                  l1096 0A60  
                                l1520 070C                                  l1504 09AA  
                                l1088 0A58                                  l1184 0B5C  
                                l1256 0B44                                  l1264 0B3E  
                                l1600 035E                                  l1098 0A66  
                                l1530 0754                                  l1522 071E  
                                l1506 09AE                                  l1258 0B46  
                                l1266 0B14                                  l1610 0372  
                                l1602 0362                                  l1282 0A74  
                                l1290 0A2A                                  l1524 0724  
                                l1532 0816                                  l1508 0AB6  
                                l1540 0AA0                                  l1268 0B28  
                                l1620 03A4                                  l1612 037E  
                                l1604 0366                                  l1284 0A80  
                                l1292 0A32                                  l1526 073C  
                                l1518 06FC                                  l1534 0822  
                                l1542 0AAC                                  l1550 077C  
                                l1630 03DE                                  l1622 03AE  
                                l1614 038A                                  l1606 036A  
                                l1286 0B68                                  l1294 0A34  
                                l1528 074E                                  l1536 083E  
                                l1552 0792                                  l1640 0402  
                                l1632 03E4                                  l1624 03BA  
                                l1616 038E                                  l1608 036E  
                                l1296 0A36                                  l1288 0A24  
                                l1720 0954                                  l1570 08A6  
                                l1538 0842                                  l1554 07A8  
                                l1546 075C                                  l1650 0440  
                                l1642 0406                                  l1634 03E8  
                                l1626 03D0                                  l1618 0398  
                                l1298 0A38                                  l1730 0960  
                                l1722 0956                                  l1714 0946  
                                l1564 0870                                  l1580 0672  
                                l1572 0608                                  l1556 07B2  
                                l1548 0772                                  l1660 047A  
                                l1652 0444                                  l1644 041E  
                                l1636 03F2                                  l1628 03D4  
                                l1732 0964                                  l1724 0958  
                                l1716 094E                                  l1566 08A0  
                                l1558 086C                                  l1582 067E  
                                l1574 0618                                  l1670 049E  
                                l1662 0480                                  l1654 044E  
                                l1646 0436                                  l1638 03FE  
                                l1734 0966                                  l1726 095A  
                                l1718 0952                                  l1568 08A4  
                                l1576 0636                                  l1680 04E2  
                                l1672 04A2                                  l1664 0484  
                                l1656 045E                                  l1648 043C  
                                l1736 0968                                  l1728 095E  
                                l1578 0650                                  l1682 04E8  
                                l1674 04B8                                  l1666 048E  
                                l1658 0462                                  l1738 096E  
                                l1772 0518                                  l1684 04F8  
                                l1676 04C4                                  l1668 049A  
                 LCD_Write_String@str 0014                                  l1678 04DA  
                                l1598 035A                                  l1688 0502  
                                STR_1 0328                                  STR_2 0339  
                                STR_3 0349                                  STR_4 0301  
                                STR_5 0315                                  _LATC 000F8B  
                                _LATD 000F8C                 __end_of_Reset_Counter 0ACC  
                   ?_LCD_Write_String 0014                                  _main 0946  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0039               __end_ofi2_Reset_Counter 0AE2  
                    __end_of_ADC_Read 09D4                                  prodh 000FF4  
                                prodl 000FF3                                  start 00BC  
                  ??_LCD_Write_String 0016                      __end_of_ADC_init 0A5C  
                    __end_of_ADC_stop 0B78                          ___param_bank 000000  
                   FSM_begin@moisture 001C            Callbacks_Manager@callbacks 0007  
                    __end_of_LCD_DATA 0816                           ?_UART2_init 0001  
                         ?_UART2_send 0001                      __end_of_LCD_Init 06FA  
            ?_SMS_Read_Moisture_Value 0012                                 ?_main 0001  
                       _SMS_Set_State 075C                                 i2l231 09FA  
                               i2l311 0098                                 i2l155 0B7A  
                               i2l235 0A22                                 i2l158 0B5A  
                               i2l254 0606                                 i2l257 0AE0  
                               _RCREG 000FAE                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TXREG 000FAD  
              __end_of_LCD_Set_Cursor 075C                                 pclath 000FFA  
                               pclatu 000FFB                                 tablat 000FF5  
                    __end_of_SMS_init 0B62                                 plusw1 000FE3  
                               plusw2 000FDB                                 ttemp5 003A  
                               ttemp6 003D                                 ttemp7 0041  
                               status 000FD8                                 wtemp8 003A  
                   __end_of_ADC_start 0B68                        _LCD_Write_Char 08B8  
                     __initialization 0900                          __end_of_main 097A  
                         i2_set_state 0B54                   _watering_status_led 0B14  
                      ?_SMS_Set_State 0011                                ??_main 001E  
             i2set_state@state_to_set 0001                     _Check_Moisture_cb 09D4  
                   __end_of_LCD_Clear 0B14                         __activetblptr 000002  
                           ??_LCD_CMD 0011                    ?_Check_Moisture_cb 0001  
                     ?_LCD_Set_Cursor 0012                  ?_watering_status_led 0001  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                 ??_Check_Moisture_cb 0003                                i2l1510 0B78  
                              i2l1514 0B56                                i2l1516 0ACC  
                              i2l1700 0544                                i2l1710 05F4  
                              i2l1702 055A                                i2l1712 05F6  
                              i2l1704 0590                                i2l1706 05B2  
                              i2l1708 05CA                                i2l1740 002A  
                              i2l1590 09F4                                i2l1750 0056  
                              i2l1742 002E                                i2l1592 09FC  
                              i2l1760 008C                                i2l1752 0064  
                              i2l1744 003E                                i2l1594 0A10  
                              i2l1586 09D4                                i2l1762 0092  
                              i2l1754 0068                                i2l1746 0042  
                              i2l1596 0A1C                                i2l1588 09E8  
                              i2l1764 0094                                i2l1756 006A  
                              i2l1748 0052                                i2l1694 0540  
                              i2l1766 0096                                i2l1758 0078  
                   __end_of_FSM_begin 0540                                _SPBRGH 000FB0  
                    ?i2_Reset_Counter 0001                __end_of_LCD_Write_Char 0900  
                       ??_Timer0_init 0010       __end_of_SMS_Read_Moisture_Value 0AB6  
                       ??_Timer0_stop 0010             __end_of_Check_Moisture_cb 09FC  
                              clear_0 0926                                clear_1 0932  
                              isa$std 000001                     _Callbacks_Manager 0540  
                _registered_callbacks 0060                          __pdataCOMRAM 001E  
                           ?_ADC_Read 0010                    ?_Callbacks_Manager 0001  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                           ?_ADC_init 0001                             ?_ADC_stop 0001  
               ??_watering_status_led 0010                       LCD_Set_Cursor@c 0012  
                     LCD_Set_Cursor@r 0013                   ??_Callbacks_Manager 0003  
                           ?_LCD_DATA 0001                            __accesstop 0060  
             __end_of__initialization 0938                             ?_LCD_Init 0001  
                    _Watering_Done_cb 09FC                         ___rparam_used 000001  
                     ?_LCD_Write_Char 0001                        __pcstackCOMRAM 0001  
               __end_of_WaterPump_OFF 0B4C                       ??_SMS_Set_State 0013  
           __end_of_Callbacks_Manager 0608                   __end_of_Timer0_init 0A8A  
                 __end_of_Timer0_stop 0B6C     _tmr0Counter@SystemInterrupts$F994 002E  
          __end_of_timer_overflow_isr 00BC                             ?_SMS_init 0001  
                          ??_ADC_Read 0012                            ??_ADC_init 0010  
                          ??_ADC_stop 0010  __end_of_checking_moisture_status_led 0B32  
        _checking_moisture_status_led 0B28                            __pbssBANK0 0060  
                          ??_LCD_DATA 0010                            ??_LCD_Init 0012  
                          __pnvCOMRAM 0038                         ?_Timer0_start 0001  
                        ??_UART2_init 0010                          ??_UART2_send 0010  
                          ??_SMS_init 0010                               _LCD_CMD 0A5C  
                   ??_ADC_in_progress 0010                               i2u52_40 0590  
                             i2u60_40 008C                               i2u52_41 058C  
                             i2u60_41 0088                               i2u53_40 05B2  
                             i2u53_41 05AE                               i2u47_40 09E8  
                             i2u55_40 0606                               i2u54_48 05E0  
                             i2u47_41 09E4                               i2u55_41 0602  
                             i2u54_49 05F4                               i2u48_40 0A10  
                             i2u56_40 003E                               i2u48_41 0A0C  
                             i2u56_41 003A                               i2u57_40 0052  
                             i2u57_41 004E                               i2u58_40 0064  
                             i2u58_41 0060                               i2u59_40 0078  
                             i2u59_41 0074         ?_checking_moisture_status_led 0001  
                           _ADCHSbits 000F99                    __end_of_UART2_init 0A40  
                  __end_of_UART2_send 0AA0                               __Hparam 0000  
                             __Lparam 0000                        ??_Timer0_start 0010  
                         _Timer0_init 0A74                           _Timer0_stop 0B68  
                        ?i2_set_state 0001                             _ADC_start 0B62  
                       ?_WaterPump_ON 0001                          __psmallconst 0300  
                             __pcinit 0900                               __ramtop 0300  
                    ??_LCD_Set_Cursor 0013                               __ptext0 0946  
                             __ptext1 0A24                               __ptext2 0B68  
                             __ptext3 0A74                               __ptext4 035A  
                             __ptext5 0B14                               __ptext6 097A  
                             __ptext7 0B1E                               __ptext8 0B6C  
                             __ptext9 0B28                             _T0CONbits 000FD5  
                   __end_of_init_leds 09AA               Register_Callback@config 0012  
                           _LCD_Clear 0B06                               _rx_data 0034  
                             _rx_flag 0035                  end_of_initialization 0938  
                   ??_idle_status_led 0010                         __Lmediumconst 0000  
                   __end_of_set_state 0B54                             _FSM_begin 035A  
                      ??_WaterPump_ON 0010                             _FSM_state 0038  
                 fp__Watering_Done_cb 0000                             _RCSTAbits 000FAB  
                          ?_ADC_start 0001                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
                           _PORTBbits 000F81              __end_of_Watering_Done_cb 0A24  
                          LCD_CMD@CMD 0011                        _WaterPump_Init 0B32  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                          ?_LCD_Clear 0001                 _WateringDoneCB_Config 001E  
                   LCD_Write_String@i 0018                      ??_LCD_Write_Char 0011  
              Callbacks_Init@callback 0010                         _Reset_Counter 0AB6  
                           _TXSTAbits 000FAC                            ?_FSM_begin 0001  
                      _Callbacks_Init 086C                      _LCD_Write_String 0816  
                       __pidataCOMRAM 0AF6                __end_of_WaterPump_Init 0B3C  
         __end_of_watering_status_led 0B1E                   start_initialization 0900  
               i2Reset_Counter@config 0001               _SMS_Read_Moisture_Value 0AA0  
                 i2_get_current_state 0B78                  __end_of_Timer0_start 0B74  
                fp__Check_Moisture_cb 0000                    _timer_overflow_isr 0008  
                      ?_Reset_Counter 0010                __end_of_Callbacks_Init 08B8  
                 ?_timer_overflow_isr 0001                  ?i2_get_current_state 0001  
                         ??_ADC_start 0010                       _ADC_in_progress 0AE2  
                   _MoistureCB_Config 0026                       ?_WaterPump_Init 0001  
               __end_of_SMS_Set_State 07BA                              ?_LCD_CMD 0001  
                         __pbssCOMRAM 002E                  ??_timer_overflow_isr 0008  
                         ??_LCD_Clear 0012                  __end_of_WaterPump_ON 0B44  
                   _Register_Callback 0608                       ?_Callbacks_Init 0001  
                  ?_Register_Callback 0012                           ??_FSM_begin 001A  
               ??i2_get_current_state 0001                          ?_Timer0_init 0001  
                        ?_Timer0_stop 0001                             __pintcode 0008  
                 ??_Register_Callback 0014                           __smallconst 0300  
                     _idle_status_led 0B1E             ??_SMS_Read_Moisture_Value 0014  
                   ??i2_Reset_Counter 0003                              _ADC_Read 09AA  
                            _ADC_init 0A40                              _ADC_stop 0B74  
     SMS_Read_Moisture_Value@moisture 0014             __end_of_Register_Callback 0682  
                           _init_leds 097A                       ??_Reset_Counter 0012  
                            _LCD_DATA 07BA                              _LCD_Init 0682  
             __end_of_ADC_in_progress 0AF6                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             _set_state 0B4C  
                       _WaterPump_OFF 0B44                            _ADCON0bits 000FC2  
                          _ADCON1bits 000FC1                            _ADCON2bits 000FC0  
                            _SMS_init 0B5C                     ?_Watering_Done_cb 0001  
                 Reset_Counter@config 0010                    ??_Watering_Done_cb 0003  
                          ?_init_leds 0001                           _INTCON2bits 000FF1  
                           copy_data0 0914              __end_of_LCD_Write_String 086C  
                      UART2_send@data 0010                              __Hrparam 0000  
                            __Lrparam 0000                   LCD_Write_Char@High4 0012  
                          ?_set_state 0001                          _Timer0_start 0B70  
                      ?_WaterPump_OFF 0001               __end_of_idle_status_led 0B28  
                          _ANSEL0bits 000FB8                              __ptext10 0B3C  
                            __ptext11 0B44                              __ptext20 0AA0  
                            __ptext12 0B32                              __ptext21 09AA  
                            __ptext13 0A8A                              __ptext30 0B06  
                            __ptext22 0B62                              __ptext14 0B70  
                            __ptext31 0A5C                              __ptext23 0AE2  
                            __ptext15 0B5C                              __ptext40 0ACC  
                            __ptext32 07BA                              __ptext24 0608  
                            __ptext16 0A40                              __ptext41 0000  
                            __ptext33 086C                              __ptext25 0AB6  
                            __ptext17 0B74                              __ptext26 0816  
                            __ptext18 075C                              __ptext35 0540  
                            __ptext27 08B8                              __ptext19 0B4C  
                            __ptext36 09D4                              __ptext28 06FA  
                            __ptext37 09FC                              __ptext29 0682  
                            __ptext38 0B54                              __ptext39 0B78  
                      _callback_count 0037                      ?_ADC_in_progress 0001  
                    ??_WaterPump_Init 0010                              isa$xinst 000000  
                   _get_current_state 0B6C                          _WaterPump_ON 0B3C  
                            int$flags 0039                           _tmr0Counter 0030  
                 LCD_Set_Cursor@High4 0015                    ?_get_current_state 0001  
                 ??_get_current_state 0010                            _INTCONbits 000FF2  
                  LCD_Write_Char@Data 0013                    LCD_Write_Char@Low4 0011  
                         ??_init_leds 0010                      ??_Callbacks_Init 0010  
               SMS_Set_State@moisture 0011                              intlevel2 0000  
           __end_of_get_current_state 0B70                            _OSCCONbits 000FD3  
                     ??_WaterPump_OFF 0010                         ??i2_set_state 0001  
                         ??_set_state 0010        ??_checking_moisture_status_led 0010  
                     i2_Reset_Counter 0ACC                    LCD_Set_Cursor@Low4 0014  
                  LCD_Set_Cursor@Temp 0016                      ?_idle_status_led 0001  
                          _UART2_init 0A24                            _UART2_send 0A8A  
                        LCD_DATA@Data 0010                 set_state@state_to_set 0010  
         __end_ofi2_get_current_state 0B7C  
