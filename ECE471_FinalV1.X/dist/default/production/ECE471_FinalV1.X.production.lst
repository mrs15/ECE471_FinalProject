

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 28 10:37:23 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    57   000000                     
    58                           ; Version 2.40
    59                           ; Generated 17/11/2021 GMT
    60                           ; 
    61                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F4331 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93   000000                     
    94                           	psect	idataCOMRAM
    95   000A88                     __pidataCOMRAM:
    96                           	callstack 0
    97                           
    98                           ;initializer for FSM_begin@F2884
    99   000A88  0005               	dw	5
   100   000A8A  FE                 	db	low _Watering_Done_cb
   101   000A8B  09                 	db	high _Watering_Done_cb
   102   000A8C  00                 	db	0
   103   000A8D  00                 	db	0
   104   000A8E  00                 	db	0
   105   000A8F  00                 	db	0
   106                           
   107                           ;initializer for FSM_begin@F2881
   108   000A90  000A               	dw	10
   109   000A92  E2                 	db	low _Check_Moisture_cb
   110   000A93  09                 	db	high _Check_Moisture_cb
   111   000A94  00                 	db	0
   112   000A95  00                 	db	0
   113   000A96  00                 	db	0
   114   000A97  00                 	db	0
   115   000000                     _ADRESL	set	4035
   116   000000                     _ADRESH	set	4036
   117                           
   118                           	psect	nvCOMRAM
   119   000045                     __pnvCOMRAM:
   120                           	callstack 0
   121   000045                     _FSM_state:
   122                           	callstack 0
   123   000045                     	ds	1
   124   000000                     _TRISBbits	set	3987
   125   000000                     _PORTBbits	set	3969
   126   000000                     _TRISB	set	3987
   127   000000                     _ADCHSbits	set	3993
   128   000000                     _ADCON1bits	set	4033
   129   000000                     _ADCON0bits	set	4034
   130   000000                     _ANSEL0bits	set	4024
   131   000000                     _ADCON2bits	set	4032
   132   000000                     _RCONbits	set	4048
   133   000000                     _OSCCONbits	set	4051
   134   000000                     _T0CONbits	set	4053
   135   000000                     _INTCON2bits	set	4081
   136   000000                     _INTCONbits	set	4082
   137   000000                     _TMR0H	set	4055
   138   000000                     _TMR0L	set	4054
   139   000000                     _TRISD	set	3989
   140   000000                     _TRISC	set	3988
   141   000000                     _LATC	set	3979
   142   000000                     _LATD	set	3980
   143                           
   144                           	psect	smallconst
   145   000300                     __psmallconst:
   146                           	callstack 0
   147   000300  00                 	db	0
   148   000301                     STR_4:
   149   000301  20                 	db	32
   150   000302  3E                 	db	62	;'>'
   151   000303  57                 	db	87	;'W'
   152   000304  41                 	db	65	;'A'
   153   000305  54                 	db	84	;'T'
   154   000306  45                 	db	69	;'E'
   155   000307  52                 	db	82	;'R'
   156   000308  49                 	db	73	;'I'
   157   000309  4E                 	db	78	;'N'
   158   00030A  47                 	db	71	;'G'
   159   00030B  20                 	db	32
   160   00030C  50                 	db	80	;'P'
   161   00030D  4C                 	db	76	;'L'
   162   00030E  41                 	db	65	;'A'
   163   00030F  4E                 	db	78	;'N'
   164   000310  54                 	db	84	;'T'
   165   000311  53                 	db	83	;'S'
   166   000312  3C                 	db	60	;'<'
   167   000313  00                 	db	0
   168   000314  00                 	db	0
   169   000315                     STR_2:
   170   000315  53                 	db	83	;'S'
   171   000316  79                 	db	121	;'y'
   172   000317  73                 	db	115	;'s'
   173   000318  74                 	db	116	;'t'
   174   000319  65                 	db	101	;'e'
   175   00031A  6D                 	db	109	;'m'
   176   00031B  20                 	db	32
   177   00031C  49                 	db	73	;'I'
   178   00031D  6E                 	db	110	;'n'
   179   00031E  69                 	db	105	;'i'
   180   00031F  74                 	db	116	;'t'
   181   000320  69                 	db	105	;'i'
   182   000321  61                 	db	97	;'a'
   183   000322  6C                 	db	108	;'l'
   184   000323  2E                 	db	46
   185   000324  2E                 	db	46
   186   000325  2E                 	db	46
   187   000326  00                 	db	0
   188   000327  00                 	db	0
   189   000328                     STR_5:
   190   000328  20                 	db	32
   191   000329  3E                 	db	62	;'>'
   192   00032A  43                 	db	67	;'C'
   193   00032B  48                 	db	72	;'H'
   194   00032C  45                 	db	69	;'E'
   195   00032D  43                 	db	67	;'C'
   196   00032E  4B                 	db	75	;'K'
   197   00032F  49                 	db	73	;'I'
   198   000330  4E                 	db	78	;'N'
   199   000331  47                 	db	71	;'G'
   200   000332  20                 	db	32
   201   000333  4D                 	db	77	;'M'
   202   000334  4F                 	db	79	;'O'
   203   000335  49                 	db	73	;'I'
   204   000336  53                 	db	83	;'S'
   205   000337  54                 	db	84	;'T'
   206   000338  3C                 	db	60	;'<'
   207   000339  00                 	db	0
   208   00033A  00                 	db	0
   209   00033B                     STR_1:
   210   00033B  20                 	db	32
   211   00033C  50                 	db	80	;'P'
   212   00033D  6C                 	db	108	;'l'
   213   00033E  61                 	db	97	;'a'
   214   00033F  6E                 	db	110	;'n'
   215   000340  74                 	db	116	;'t'
   216   000341  20                 	db	32
   217   000342  57                 	db	87	;'W'
   218   000343  61                 	db	97	;'a'
   219   000344  74                 	db	116	;'t'
   220   000345  65                 	db	101	;'e'
   221   000346  72                 	db	114	;'r'
   222   000347  69                 	db	105	;'i'
   223   000348  6E                 	db	110	;'n'
   224   000349  67                 	db	103	;'g'
   225   00034A  00                 	db	0
   226   00034B  00                 	db	0
   227   00034C                     STR_3:
   228   00034C  20                 	db	32
   229   00034D  3E                 	db	62	;'>'
   230   00034E  49                 	db	73	;'I'
   231   00034F  44                 	db	68	;'D'
   232   000350  4C                 	db	76	;'L'
   233   000351  45                 	db	69	;'E'
   234   000352  20                 	db	32
   235   000353  53                 	db	83	;'S'
   236   000354  54                 	db	84	;'T'
   237   000355  41                 	db	65	;'A'
   238   000356  54                 	db	84	;'T'
   239   000357  45                 	db	69	;'E'
   240   000358  3C                 	db	60	;'<'
   241   000359  00                 	db	0
   242   00035A  00                 	db	0
   243   00035B  00                 	db	0	; dummy byte at the end
   244   000000                     
   245                           ; #config settings
   246                           
   247                           	psect	cinit
   248   0008FC                     __pcinit:
   249                           	callstack 0
   250   0008FC                     start_initialization:
   251                           	callstack 0
   252   0008FC                     __initialization:
   253                           	callstack 0
   254                           
   255                           ; Initialize objects allocated to COMRAM (16 bytes)
   256                           ; load TBLPTR registers with __pidataCOMRAM
   257   0008FC  0E88               	movlw	low __pidataCOMRAM
   258   0008FE  6EF6               	movwf	tblptrl,c
   259   000900  0E0A               	movlw	high __pidataCOMRAM
   260   000902  6EF7               	movwf	tblptrh,c
   261   000904  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   262   000906  6EF8               	movwf	tblptru,c
   263   000908  EE00  F02D         	lfsr	0,__pdataCOMRAM
   264   00090C  EE10 F010          	lfsr	1,16
   265   000910                     copy_data0:
   266   000910  0009               	tblrd		*+
   267   000912  CFF5 FFEE          	movff	tablat,postinc0
   268   000916  50E5               	movf	postdec1,w,c
   269   000918  50E1               	movf	fsr1l,w,c
   270   00091A  E1FA               	bnz	copy_data0
   271                           
   272                           ; Clear objects allocated to BANK0 (40 bytes)
   273   00091C  EE00  F060         	lfsr	0,__pbssBANK0
   274   000920  0E28               	movlw	40
   275   000922                     clear_0:
   276   000922  6AEE               	clrf	postinc0,c
   277   000924  06E8               	decf	wreg,f,c
   278   000926  E1FD               	bnz	clear_0
   279                           
   280                           ; Clear objects allocated to COMRAM (8 bytes)
   281   000928  EE00  F03D         	lfsr	0,__pbssCOMRAM
   282   00092C  0E08               	movlw	8
   283   00092E                     clear_1:
   284   00092E  6AEE               	clrf	postinc0,c
   285   000930  06E8               	decf	wreg,f,c
   286   000932  E1FD               	bnz	clear_1
   287   000934                     end_of_initialization:
   288                           	callstack 0
   289   000934                     __end_of__initialization:
   290                           	callstack 0
   291   000934  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   292   000936  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   293   000938  0E00               	movlw	low (__Lmediumconst shr (0+16))
   294   00093A  6EF8               	movwf	tblptru,c
   295   00093C  0100               	movlb	0
   296   00093E  EFB9  F004         	goto	_main	;jump to C main() function
   297                           
   298                           	psect	bssCOMRAM
   299   00003D                     __pbssCOMRAM:
   300                           	callstack 0
   301   00003D                     _tmr0Counter@SystemInterrupts$F930:
   302                           	callstack 0
   303   00003D                     	ds	2
   304   00003F                     _tmr0Counter:
   305                           	callstack 0
   306   00003F                     	ds	2
   307   000041                     _ADC:
   308                           	callstack 0
   309   000041                     	ds	2
   310   000043                     _pump_status:
   311                           	callstack 0
   312   000043                     	ds	1
   313   000044                     _callback_count:
   314                           	callstack 0
   315   000044                     	ds	1
   316                           
   317                           	psect	dataCOMRAM
   318   00002D                     __pdataCOMRAM:
   319                           	callstack 0
   320   00002D                     FSM_begin@F2884:
   321                           	callstack 0
   322   00002D                     	ds	8
   323   000035                     FSM_begin@F2881:
   324                           	callstack 0
   325   000035                     	ds	8
   326                           
   327                           	psect	bssBANK0
   328   000060                     __pbssBANK0:
   329                           	callstack 0
   330   000060                     _registered_callbacks:
   331                           	callstack 0
   332   000060                     	ds	40
   333                           
   334                           	psect	cstackCOMRAM
   335   000001                     __pcstackCOMRAM:
   336                           	callstack 0
   337   000001                     i2set_state@state_to_set:
   338                           	callstack 0
   339                           
   340                           ; 1 bytes @ 0x0
   341   000001                     	ds	1
   342   000002                     
   343                           ; 1 bytes @ 0x1
   344   000002                     	ds	4
   345   000006                     Callbacks_Manager@callbacks:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x5
   349   000006                     	ds	1
   350   000007                     ??_timer_overflow_isr:
   351                           
   352                           ; 1 bytes @ 0x6
   353   000007                     	ds	8
   354   00000F                     ??_init_leds:
   355   00000F                     ?_ADC_Read:
   356                           	callstack 0
   357   00000F                     LCD_DATA@Data:
   358                           	callstack 0
   359   00000F                     set_state@state_to_set:
   360                           	callstack 0
   361   00000F                     Callbacks_Init@callback:
   362                           	callstack 0
   363   00000F                     Reset_Counter@config:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0xE
   367   00000F                     	ds	1
   368   000010                     LCD_CMD@CMD:
   369                           	callstack 0
   370   000010                     LCD_Write_Char@Low4:
   371                           	callstack 0
   372   000010                     SMS_Set_State@moisture:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0xF
   376   000010                     	ds	1
   377   000011                     ??_LCD_Init:
   378   000011                     ?_SMS_Read_Moisture_Value:
   379                           	callstack 0
   380   000011                     LCD_Set_Cursor@c:
   381                           	callstack 0
   382   000011                     LCD_Write_Char@High4:
   383                           	callstack 0
   384   000011                     Register_Callback@config:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x10
   388   000011                     	ds	1
   389   000012                     LCD_Set_Cursor@r:
   390                           	callstack 0
   391   000012                     LCD_Write_Char@Data:
   392                           	callstack 0
   393                           
   394                           ; 1 bytes @ 0x11
   395   000012                     	ds	1
   396   000013                     LCD_Set_Cursor@Low4:
   397                           	callstack 0
   398   000013                     LCD_Write_String@str:
   399                           	callstack 0
   400   000013                     SMS_Read_Moisture_Value@moisture:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x12
   404   000013                     	ds	1
   405   000014                     LCD_Set_Cursor@High4:
   406                           	callstack 0
   407                           
   408                           ; 1 bytes @ 0x13
   409   000014                     	ds	1
   410   000015                     ??_LCD_Write_String:
   411   000015                     LCD_Set_Cursor@Temp:
   412                           	callstack 0
   413                           
   414                           ; 1 bytes @ 0x14
   415   000015                     	ds	2
   416   000017                     LCD_Write_String@i:
   417                           	callstack 0
   418                           
   419                           ; 2 bytes @ 0x16
   420   000017                     	ds	2
   421   000019                     ??_FSM_begin:
   422                           
   423                           ; 1 bytes @ 0x18
   424   000019                     	ds	2
   425   00001B                     FSM_begin@MoistureCB_Config:
   426                           	callstack 0
   427                           
   428                           ; 8 bytes @ 0x1A
   429   00001B                     	ds	8
   430   000023                     FSM_begin@WateringDoneCB_Config:
   431                           	callstack 0
   432                           
   433                           ; 8 bytes @ 0x22
   434   000023                     	ds	8
   435   00002B                     FSM_begin@moisture:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x2A
   439   00002B                     	ds	2
   440   00002D                     
   441                           ; 1 bytes @ 0x2C
   442 ;;
   443 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   444 ;;
   445 ;; *************** function _main *****************
   446 ;; Defined at:
   447 ;;		line 16 in file "main.c"
   448 ;; Parameters:    Size  Location     Type
   449 ;;		None
   450 ;; Auto vars:     Size  Location     Type
   451 ;;		None
   452 ;; Return value:  Size  Location     Type
   453 ;;                  1    wreg      void 
   454 ;; Registers used:
   455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   456 ;; Tracked objects:
   457 ;;		On entry : 0/0
   458 ;;		On exit  : 0/0
   459 ;;		Unchanged: 0/0
   460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   461 ;;      Params:         0       0       0       0
   462 ;;      Locals:         0       0       0       0
   463 ;;      Temps:          0       0       0       0
   464 ;;      Totals:         0       0       0       0
   465 ;;Total ram usage:        0 bytes
   466 ;; Hardware stack levels required when called: 8
   467 ;; This function calls:
   468 ;;		_FSM_begin
   469 ;;		_Timer0_init
   470 ;;		_Timer0_stop
   471 ;;		_set_state
   472 ;; This function is called by:
   473 ;;		Startup code after reset
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           	psect	text0
   478   000972                     __ptext0:
   479                           	callstack 0
   480   000972                     _main:
   481                           	callstack 23
   482   000972                     
   483                           ;main.c: 19:     OSCCONbits.IRCF0 = 1;
   484   000972  88D3               	bsf	211,4,c	;volatile
   485                           
   486                           ;main.c: 20:     OSCCONbits.IRCF1 = 1;
   487   000974  8AD3               	bsf	211,5,c	;volatile
   488                           
   489                           ;main.c: 21:     OSCCONbits.IRCF2 = 1;
   490   000976  8CD3               	bsf	211,6,c	;volatile
   491   000978                     
   492                           ;main.c: 24:     Timer0_stop();
   493   000978  EC7D  F005         	call	_Timer0_stop	;wreg free
   494   00097C                     
   495                           ;main.c: 27:     RCONbits.IPEN = 1;
   496   00097C  8ED0               	bsf	208,7,c	;volatile
   497   00097E                     
   498                           ;main.c: 30:     INTCONbits.TMR0IE = 1;
   499   00097E  8AF2               	bsf	242,5,c	;volatile
   500   000980                     
   501                           ;main.c: 33:     INTCON2bits.TMR0IP = 1;
   502   000980  84F1               	bsf	241,2,c	;volatile
   503   000982                     
   504                           ;main.c: 36:     Timer0_init();
   505   000982  EC19  F005         	call	_Timer0_init	;wreg free
   506   000986                     
   507                           ;main.c: 39:     INTCONbits.GIEH = 1;
   508   000986  8EF2               	bsf	242,7,c	;volatile
   509   000988                     
   510                           ;main.c: 40:     INTCONbits.GIEL = 1;
   511   000988  8CF2               	bsf	242,6,c	;volatile
   512   00098A                     
   513                           ;main.c: 43:     set_state(INIT_STATE);
   514   00098A  0E00               	movlw	0
   515   00098C  EC6F  F005         	call	_set_state
   516   000990                     l1603:
   517                           
   518                           ;main.c: 45:     {;main.c: 46:      FSM_begin();
   519   000990  ECAE  F001         	call	_FSM_begin	;wreg free
   520   000994  EFC8  F004         	goto	l1603
   521   000998  EF49  F000         	goto	start
   522   00099C                     __end_of_main:
   523                           	callstack 0
   524                           
   525 ;; *************** function _Timer0_stop *****************
   526 ;; Defined at:
   527 ;;		line 92 in file "PIC18F4331_Timer.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;		None
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		None
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   541 ;;      Params:         0       0       0       0
   542 ;;      Locals:         0       0       0       0
   543 ;;      Temps:          0       0       0       0
   544 ;;      Totals:         0       0       0       0
   545 ;;Total ram usage:        0 bytes
   546 ;; Hardware stack levels used: 1
   547 ;; Hardware stack levels required when called: 4
   548 ;; This function calls:
   549 ;;		Nothing
   550 ;; This function is called by:
   551 ;;		_main
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text1
   556   000AFA                     __ptext1:
   557                           	callstack 0
   558   000AFA                     _Timer0_stop:
   559                           	callstack 26
   560   000AFA                     
   561                           ;PIC18F4331_Timer.c: 94:     T0CONbits.TMR0ON = 0;
   562   000AFA  9ED5               	bcf	213,7,c	;volatile
   563   000AFC  0012               	return		;funcret
   564   000AFE                     __end_of_Timer0_stop:
   565                           	callstack 0
   566                           
   567 ;; *************** function _Timer0_init *****************
   568 ;; Defined at:
   569 ;;		line 56 in file "PIC18F4331_Timer.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;		None
   572 ;; Auto vars:     Size  Location     Type
   573 ;;		None
   574 ;; Return value:  Size  Location     Type
   575 ;;                  1    wreg      void 
   576 ;; Registers used:
   577 ;;		wreg, status,2
   578 ;; Tracked objects:
   579 ;;		On entry : 0/0
   580 ;;		On exit  : 0/0
   581 ;;		Unchanged: 0/0
   582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   583 ;;      Params:         0       0       0       0
   584 ;;      Locals:         0       0       0       0
   585 ;;      Temps:          0       0       0       0
   586 ;;      Totals:         0       0       0       0
   587 ;;Total ram usage:        0 bytes
   588 ;; Hardware stack levels used: 1
   589 ;; Hardware stack levels required when called: 4
   590 ;; This function calls:
   591 ;;		Nothing
   592 ;; This function is called by:
   593 ;;		_main
   594 ;; This function uses a non-reentrant model
   595 ;;
   596                           
   597                           	psect	text2
   598   000A32                     __ptext2:
   599                           	callstack 0
   600   000A32                     _Timer0_init:
   601                           	callstack 26
   602   000A32                     
   603                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   604   000A32  80D5               	bsf	213,0,c	;volatile
   605                           
   606                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 0;
   607   000A34  92D5               	bcf	213,1,c	;volatile
   608                           
   609                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   610   000A36  84D5               	bsf	213,2,c	;volatile
   611                           
   612                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   613   000A38  96D5               	bcf	213,3,c	;volatile
   614                           
   615                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   616   000A3A  9AD5               	bcf	213,5,c	;volatile
   617                           
   618                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   619   000A3C  9CD5               	bcf	213,6,c	;volatile
   620   000A3E                     
   621                           ;PIC18F4331_Timer.c: 80:     TMR0L = (0x7C);
   622   000A3E  0E7C               	movlw	124
   623   000A40  6ED6               	movwf	214,c	;volatile
   624                           
   625                           ;PIC18F4331_Timer.c: 81:     TMR0H = (0xE1);
   626   000A42  0EE1               	movlw	225
   627   000A44  6ED7               	movwf	215,c	;volatile
   628   000A46  0012               	return		;funcret
   629   000A48                     __end_of_Timer0_init:
   630                           	callstack 0
   631                           
   632 ;; *************** function _FSM_begin *****************
   633 ;; Defined at:
   634 ;;		line 36 in file "System_FSM.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;		None
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  moisture        2   42[COMRAM] unsigned short 
   639 ;;  WateringDone    8   34[COMRAM] struct .
   640 ;;  MoistureCB_C    8   26[COMRAM] struct .
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   650 ;;      Params:         0       0       0       0
   651 ;;      Locals:        18       0       0       0
   652 ;;      Temps:          2       0       0       0
   653 ;;      Totals:        20       0       0       0
   654 ;;Total ram usage:       20 bytes
   655 ;; Hardware stack levels used: 1
   656 ;; Hardware stack levels required when called: 7
   657 ;; This function calls:
   658 ;;		_Callbacks_Init
   659 ;;		_LCD_Clear
   660 ;;		_LCD_Init
   661 ;;		_LCD_Set_Cursor
   662 ;;		_LCD_Write_String
   663 ;;		_Register_Callback
   664 ;;		_SMS_Read_Moisture_Value
   665 ;;		_SMS_Set_State
   666 ;;		_SMS_init
   667 ;;		_Timer0_start
   668 ;;		_WaterPump_Init
   669 ;;		_WaterPump_OFF
   670 ;;		_WaterPump_ON
   671 ;;		_checking_moisture_status_led
   672 ;;		_get_current_state
   673 ;;		_idle_status_led
   674 ;;		_init_leds
   675 ;;		_set_state
   676 ;;		_watering_status_led
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text3
   683   00035C                     __ptext3:
   684                           	callstack 0
   685   00035C                     _FSM_begin:
   686                           	callstack 23
   687   00035C                     
   688                           ;System_FSM.c: 38:     switch(get_current_state())
   689   00035C  EF7F  F002         	goto	l1559
   690   000360                     l1477:
   691                           
   692                           ;System_FSM.c: 41:         {;System_FSM.c: 42:             SMS_init();
   693   000360  EC77  F005         	call	_SMS_init	;wreg free
   694   000364                     
   695                           ;System_FSM.c: 43:             Callbacks_Init();
   696   000364  EC34  F004         	call	_Callbacks_Init	;wreg free
   697   000368                     
   698                           ;System_FSM.c: 44:             WaterPump_Init();
   699   000368  EC62  F005         	call	_WaterPump_Init	;wreg free
   700   00036C                     
   701                           ;System_FSM.c: 46:             Callback_Config_t MoistureCB_Config =
   702   00036C  EE20  F035         	lfsr	2,FSM_begin@F2881
   703   000370  EE10  F01B         	lfsr	1,FSM_begin@MoistureCB_Config
   704   000374  0E07               	movlw	7
   705   000376                     u471:
   706   000376  CFDB FFE3          	movff	plusw2,plusw1
   707   00037A  06E8               	decf	wreg,f,c
   708   00037C  E2FC               	bc	u471
   709   00037E                     
   710                           ;System_FSM.c: 52:             Callback_Config_t WateringDoneCB_Config =
   711   00037E  EE20  F02D         	lfsr	2,FSM_begin@F2884
   712   000382  EE10  F023         	lfsr	1,FSM_begin@WateringDoneCB_Config
   713   000386  0E07               	movlw	7
   714   000388                     u481:
   715   000388  CFDB FFE3          	movff	plusw2,plusw1
   716   00038C  06E8               	decf	wreg,f,c
   717   00038E  E2FC               	bc	u481
   718   000390                     
   719                           ;System_FSM.c: 58:             Register_Callback(&MoistureCB_Config);
   720   000390  0E1B               	movlw	low FSM_begin@MoistureCB_Config
   721   000392  6E11               	movwf	Register_Callback@config^0,c
   722   000394  0E00               	movlw	high FSM_begin@MoistureCB_Config
   723   000396  6E12               	movwf	(Register_Callback@config+1)^0,c
   724   000398  EC02  F003         	call	_Register_Callback	;wreg free
   725   00039C                     
   726                           ;System_FSM.c: 59:             Register_Callback(&WateringDoneCB_Config);
   727   00039C  0E23               	movlw	low FSM_begin@WateringDoneCB_Config
   728   00039E  6E11               	movwf	Register_Callback@config^0,c
   729   0003A0  0E00               	movlw	high FSM_begin@WateringDoneCB_Config
   730   0003A2  6E12               	movwf	(Register_Callback@config+1)^0,c
   731   0003A4  EC02  F003         	call	_Register_Callback	;wreg free
   732   0003A8                     
   733                           ;System_FSM.c: 61:             init_leds();
   734   0003A8  ECA1  F004         	call	_init_leds	;wreg free
   735   0003AC                     
   736                           ;System_FSM.c: 63:             LCD_Init();
   737   0003AC  EC3F  F003         	call	_LCD_Init	;wreg free
   738   0003B0                     
   739                           ;System_FSM.c: 65:             LCD_Clear();
   740   0003B0  EC4C  F005         	call	_LCD_Clear	;wreg free
   741   0003B4                     
   742                           ;System_FSM.c: 66:             LCD_Set_Cursor(1,1);
   743   0003B4  0E01               	movlw	1
   744   0003B6  6E11               	movwf	LCD_Set_Cursor@c^0,c
   745   0003B8  0E01               	movlw	1
   746   0003BA  EC7B  F003         	call	_LCD_Set_Cursor
   747   0003BE                     
   748                           ;System_FSM.c: 67:             LCD_Write_String(" Plant Watering\0");
   749   0003BE  0E3B               	movlw	low STR_1
   750   0003C0  6E13               	movwf	LCD_Write_String@str^0,c
   751   0003C2  0E03               	movlw	high STR_1
   752   0003C4  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   753   0003C6  EC09  F004         	call	_LCD_Write_String	;wreg free
   754   0003CA                     
   755                           ;System_FSM.c: 68:             LCD_Set_Cursor(2,1);
   756   0003CA  0E01               	movlw	1
   757   0003CC  6E11               	movwf	LCD_Set_Cursor@c^0,c
   758   0003CE  0E02               	movlw	2
   759   0003D0  EC7B  F003         	call	_LCD_Set_Cursor
   760   0003D4                     
   761                           ;System_FSM.c: 69:             LCD_Write_String("System Initial...\0");
   762   0003D4  0E15               	movlw	low STR_2
   763   0003D6  6E13               	movwf	LCD_Write_String@str^0,c
   764   0003D8  0E03               	movlw	high STR_2
   765   0003DA  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   766   0003DC  EC09  F004         	call	_LCD_Write_String	;wreg free
   767   0003E0                     
   768                           ;System_FSM.c: 71:             _delay((unsigned long)((200)*(8000000/4000.0)));
   769   0003E0  0E03               	movlw	3
   770   0003E2  6E1A               	movwf	(??_FSM_begin+1)^0,c
   771   0003E4  0E08               	movlw	8
   772   0003E6  6E19               	movwf	??_FSM_begin^0,c
   773   0003E8  0E77               	movlw	119
   774   0003EA                     u597:
   775   0003EA  2EE8               	decfsz	wreg,f,c
   776   0003EC  D7FE               	bra	u597
   777   0003EE  2E19               	decfsz	??_FSM_begin^0,f,c
   778   0003F0  D7FC               	bra	u597
   779   0003F2  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   780   0003F4  D7FA               	bra	u597
   781   0003F6  F000               	nop	
   782   0003F8                     
   783                           ;System_FSM.c: 73:             Timer0_start();
   784   0003F8  EC81  F005         	call	_Timer0_start	;wreg free
   785   0003FC                     
   786                           ;System_FSM.c: 75:             set_state(IDLE_STATE);
   787   0003FC  0E01               	movlw	1
   788   0003FE  EC6F  F005         	call	_set_state
   789                           
   790                           ;System_FSM.c: 77:             break;
   791   000402  EF9D  F002         	goto	l223
   792   000406                     l1511:
   793                           
   794                           ;System_FSM.c: 81:         {;System_FSM.c: 82:             LCD_Clear();
   795   000406  EC4C  F005         	call	_LCD_Clear	;wreg free
   796   00040A                     
   797                           ;System_FSM.c: 83:             LCD_Set_Cursor(1,1);
   798   00040A  0E01               	movlw	1
   799   00040C  6E11               	movwf	LCD_Set_Cursor@c^0,c
   800   00040E  0E01               	movlw	1
   801   000410  EC7B  F003         	call	_LCD_Set_Cursor
   802   000414                     
   803                           ;System_FSM.c: 84:             LCD_Write_String(" >IDLE STATE<\0");
   804   000414  0E4C               	movlw	low STR_3
   805   000416  6E13               	movwf	LCD_Write_String@str^0,c
   806   000418  0E03               	movlw	high STR_3
   807   00041A  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   808   00041C  EC09  F004         	call	_LCD_Write_String	;wreg free
   809   000420                     
   810                           ;System_FSM.c: 86:             WaterPump_OFF();
   811   000420  EC6B  F005         	call	_WaterPump_OFF	;wreg free
   812                           
   813                           ;System_FSM.c: 90:             while(get_current_state() == IDLE_STATE)
   814   000424  EF16  F002         	goto	l1521
   815   000428                     l1519:
   816                           
   817                           ;System_FSM.c: 91:             {;System_FSM.c: 93:                 idle_status_led();
   818   000428  EC58  F005         	call	_idle_status_led	;wreg free
   819   00042C                     l1521:
   820                           
   821                           ;System_FSM.c: 90:             while(get_current_state() == IDLE_STATE)
   822   00042C  EC7F  F005         	call	_get_current_state	;wreg free
   823   000430  06E8               	decf	wreg,f,c
   824   000432  B4D8               	btfsc	status,2,c
   825   000434  EF1E  F002         	goto	u491
   826   000438  EF20  F002         	goto	u490
   827   00043C                     u491:
   828   00043C  EF14  F002         	goto	l1519
   829   000440                     u490:
   830   000440  EF9D  F002         	goto	l223
   831   000444                     l1523:
   832                           
   833                           ;System_FSM.c: 100:         {;System_FSM.c: 101:             WaterPump_ON();
   834   000444  EC67  F005         	call	_WaterPump_ON	;wreg free
   835   000448                     
   836                           ;System_FSM.c: 102:             LCD_Clear();
   837   000448  EC4C  F005         	call	_LCD_Clear	;wreg free
   838   00044C                     
   839                           ;System_FSM.c: 103:             LCD_Set_Cursor(1,1);
   840   00044C  0E01               	movlw	1
   841   00044E  6E11               	movwf	LCD_Set_Cursor@c^0,c
   842   000450  0E01               	movlw	1
   843   000452  EC7B  F003         	call	_LCD_Set_Cursor
   844   000456                     
   845                           ;System_FSM.c: 104:             LCD_Write_String(" >WATERING PLANTS<\0");
   846   000456  0E01               	movlw	low STR_4
   847   000458  6E13               	movwf	LCD_Write_String@str^0,c
   848   00045A  0E03               	movlw	high STR_4
   849   00045C  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   850   00045E  EC09  F004         	call	_LCD_Write_String	;wreg free
   851                           
   852                           ;System_FSM.c: 108:             while(get_current_state() == WATER_PLANTS)
   853   000462  EF35  F002         	goto	l1533
   854   000466                     l1531:
   855                           
   856                           ;System_FSM.c: 109:             {;System_FSM.c: 111:               watering_status_led()
      +                          ;
   857   000466  EC53  F005         	call	_watering_status_led	;wreg free
   858   00046A                     l1533:
   859                           
   860                           ;System_FSM.c: 108:             while(get_current_state() == WATER_PLANTS)
   861   00046A  EC7F  F005         	call	_get_current_state	;wreg free
   862   00046E  0A02               	xorlw	2
   863   000470  B4D8               	btfsc	status,2,c
   864   000472  EF3D  F002         	goto	u501
   865   000476  EF3F  F002         	goto	u500
   866   00047A                     u501:
   867   00047A  EF33  F002         	goto	l1531
   868   00047E                     u500:
   869   00047E  EF9D  F002         	goto	l223
   870   000482                     l1535:
   871                           
   872                           ;System_FSM.c: 119:         {;System_FSM.c: 122:             LCD_Clear();
   873   000482  EC4C  F005         	call	_LCD_Clear	;wreg free
   874   000486                     
   875                           ;System_FSM.c: 123:             LCD_Set_Cursor(1,1);
   876   000486  0E01               	movlw	1
   877   000488  6E11               	movwf	LCD_Set_Cursor@c^0,c
   878   00048A  0E01               	movlw	1
   879   00048C  EC7B  F003         	call	_LCD_Set_Cursor
   880   000490                     
   881                           ;System_FSM.c: 124:             LCD_Write_String(" >CHECKING MOIST<\0");
   882   000490  0E28               	movlw	low STR_5
   883   000492  6E13               	movwf	LCD_Write_String@str^0,c
   884   000494  0E03               	movlw	high STR_5
   885   000496  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   886   000498  EC09  F004         	call	_LCD_Write_String	;wreg free
   887   00049C                     
   888                           ;System_FSM.c: 125:             WaterPump_OFF();
   889   00049C  EC6B  F005         	call	_WaterPump_OFF	;wreg free
   890   0004A0                     
   891                           ;System_FSM.c: 127:             checking_moisture_status_led();
   892   0004A0  EC5D  F005         	call	_checking_moisture_status_led	;wreg free
   893   0004A4                     
   894                           ;System_FSM.c: 128:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   895   0004A4  0E0B               	movlw	11
   896   0004A6  6E1A               	movwf	(??_FSM_begin+1)^0,c
   897   0004A8  0E26               	movlw	38
   898   0004AA  6E19               	movwf	??_FSM_begin^0,c
   899   0004AC  0E5E               	movlw	94
   900   0004AE                     u607:
   901   0004AE  2EE8               	decfsz	wreg,f,c
   902   0004B0  D7FE               	bra	u607
   903   0004B2  2E19               	decfsz	??_FSM_begin^0,f,c
   904   0004B4  D7FC               	bra	u607
   905   0004B6  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   906   0004B8  D7FA               	bra	u607
   907   0004BA                     
   908                           ;System_FSM.c: 130:             U16 moisture = SMS_Read_Moisture_Value();
   909   0004BA  EC24  F005         	call	_SMS_Read_Moisture_Value	;wreg free
   910   0004BE  C011  F02B         	movff	?_SMS_Read_Moisture_Value,FSM_begin@moisture
   911   0004C2  C012  F02C         	movff	?_SMS_Read_Moisture_Value+1,FSM_begin@moisture+1
   912   0004C6                     
   913                           ;System_FSM.c: 132:             if(moisture > 65000)
   914   0004C6  0EE9               	movlw	233
   915   0004C8  5C2B               	subwf	FSM_begin@moisture^0,w,c
   916   0004CA  0EFD               	movlw	253
   917   0004CC  582C               	subwfb	(FSM_begin@moisture+1)^0,w,c
   918   0004CE  A0D8               	btfss	status,0,c
   919   0004D0  EF6C  F002         	goto	u511
   920   0004D4  EF6E  F002         	goto	u510
   921   0004D8                     u511:
   922   0004D8  EF72  F002         	goto	l1553
   923   0004DC                     u510:
   924   0004DC                     
   925                           ;System_FSM.c: 133:                 moisture = 1000;
   926   0004DC  0E03               	movlw	3
   927   0004DE  6E2C               	movwf	(FSM_begin@moisture+1)^0,c
   928   0004E0  0EE8               	movlw	232
   929   0004E2  6E2B               	movwf	FSM_begin@moisture^0,c
   930   0004E4                     l1553:
   931                           
   932                           ;System_FSM.c: 135:             SMS_Set_State(moisture);
   933   0004E4  C02B  F010         	movff	FSM_begin@moisture,SMS_Set_State@moisture
   934   0004E8  C02C  F011         	movff	FSM_begin@moisture+1,SMS_Set_State@moisture+1
   935   0004EC  ECAC  F003         	call	_SMS_Set_State	;wreg free
   936                           
   937                           ;System_FSM.c: 139:             break;
   938   0004F0  EF9D  F002         	goto	l223
   939   0004F4                     l1555:
   940                           
   941                           ;System_FSM.c: 143:         {;System_FSM.c: 144:             set_state(INIT_STATE);
   942   0004F4  0E00               	movlw	0
   943   0004F6  EC6F  F005         	call	_set_state
   944                           
   945                           ;System_FSM.c: 145:             break;
   946   0004FA  EF9D  F002         	goto	l223
   947   0004FE                     l1559:
   948   0004FE  EC7F  F005         	call	_get_current_state	;wreg free
   949   000502  6E19               	movwf	??_FSM_begin^0,c
   950   000504  6A1A               	clrf	(??_FSM_begin+1)^0,c
   951                           
   952                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   953                           ; Switch size 1, requested type "simple"
   954                           ; Number of cases is 1, Range of values is 0 to 0
   955                           ; switch strategies available:
   956                           ; Name         Instructions Cycles
   957                           ; simple_byte            4     3 (average)
   958                           ;	Chosen strategy is simple_byte
   959   000506  501A               	movf	(??_FSM_begin+1)^0,w,c
   960   000508  0A00               	xorlw	0	; case 0
   961   00050A  B4D8               	btfsc	status,2,c
   962   00050C  EF8A  F002         	goto	l1629
   963   000510  EF7A  F002         	goto	l1555
   964   000514                     l1629:
   965                           
   966                           ; Switch size 1, requested type "simple"
   967                           ; Number of cases is 4, Range of values is 0 to 3
   968                           ; switch strategies available:
   969                           ; Name         Instructions Cycles
   970                           ; simple_byte           13     7 (average)
   971                           ;	Chosen strategy is simple_byte
   972   000514  5019               	movf	??_FSM_begin^0,w,c
   973   000516  0A00               	xorlw	0	; case 0
   974   000518  B4D8               	btfsc	status,2,c
   975   00051A  EFB0  F001         	goto	l1477
   976   00051E  0A01               	xorlw	1	; case 1
   977   000520  B4D8               	btfsc	status,2,c
   978   000522  EF03  F002         	goto	l1511
   979   000526  0A03               	xorlw	3	; case 2
   980   000528  B4D8               	btfsc	status,2,c
   981   00052A  EF22  F002         	goto	l1523
   982   00052E  0A01               	xorlw	1	; case 3
   983   000530  B4D8               	btfsc	status,2,c
   984   000532  EF41  F002         	goto	l1535
   985   000536  EF7A  F002         	goto	l1555
   986   00053A                     l223:
   987   00053A  0012               	return		;funcret
   988   00053C                     __end_of_FSM_begin:
   989                           	callstack 0
   990                           
   991 ;; *************** function _watering_status_led *****************
   992 ;; Defined at:
   993 ;;		line 40 in file "LedDriver.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;		None
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		status,2, status,0
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1007 ;;      Params:         0       0       0       0
  1008 ;;      Locals:         0       0       0       0
  1009 ;;      Temps:          0       0       0       0
  1010 ;;      Totals:         0       0       0       0
  1011 ;;Total ram usage:        0 bytes
  1012 ;; Hardware stack levels used: 1
  1013 ;; Hardware stack levels required when called: 4
  1014 ;; This function calls:
  1015 ;;		Nothing
  1016 ;; This function is called by:
  1017 ;;		_FSM_begin
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text4
  1022   000AA6                     __ptext4:
  1023                           	callstack 0
  1024   000AA6                     _watering_status_led:
  1025                           	callstack 25
  1026   000AA6                     
  1027                           ;LedDriver.c: 42:     (((LATD))|=((0x01)));
  1028   000AA6  808C               	bsf	140,0,c	;volatile
  1029                           
  1030                           ;LedDriver.c: 44:     (((LATC))&=(~((0x02))));
  1031   000AA8  928B               	bcf	139,1,c	;volatile
  1032                           
  1033                           ;LedDriver.c: 45:     (((LATC))&=(~((0x04))));
  1034   000AAA  948B               	bcf	139,2,c	;volatile
  1035                           
  1036                           ;LedDriver.c: 46:     (((LATD))&=(~((0x02))));
  1037   000AAC  928C               	bcf	140,1,c	;volatile
  1038   000AAE  0012               	return		;funcret
  1039   000AB0                     __end_of_watering_status_led:
  1040                           	callstack 0
  1041                           
  1042 ;; *************** function _init_leds *****************
  1043 ;; Defined at:
  1044 ;;		line 12 in file "LedDriver.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;		None
  1047 ;; Auto vars:     Size  Location     Type
  1048 ;;		None
  1049 ;; Return value:  Size  Location     Type
  1050 ;;                  1    wreg      void 
  1051 ;; Registers used:
  1052 ;;		wreg, status,2, status,0
  1053 ;; Tracked objects:
  1054 ;;		On entry : 0/0
  1055 ;;		On exit  : 0/0
  1056 ;;		Unchanged: 0/0
  1057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1058 ;;      Params:         0       0       0       0
  1059 ;;      Locals:         0       0       0       0
  1060 ;;      Temps:          2       0       0       0
  1061 ;;      Totals:         2       0       0       0
  1062 ;;Total ram usage:        2 bytes
  1063 ;; Hardware stack levels used: 1
  1064 ;; Hardware stack levels required when called: 4
  1065 ;; This function calls:
  1066 ;;		Nothing
  1067 ;; This function is called by:
  1068 ;;		_FSM_begin
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text5
  1073   000942                     __ptext5:
  1074                           	callstack 0
  1075   000942                     _init_leds:
  1076                           	callstack 25
  1077   000942                     
  1078                           ;LedDriver.c: 14:     (((TRISC))&=(~((0x02))));
  1079   000942  9294               	bcf	148,1,c	;volatile
  1080                           
  1081                           ;LedDriver.c: 15:     (((TRISC))&=(~((0x04))));
  1082   000944  9494               	bcf	148,2,c	;volatile
  1083                           
  1084                           ;LedDriver.c: 16:     (((TRISD))&=(~((0x02))));
  1085   000946  9295               	bcf	149,1,c	;volatile
  1086                           
  1087                           ;LedDriver.c: 17:     (((TRISD))&=(~((0x01))));
  1088   000948  9095               	bcf	149,0,c	;volatile
  1089                           
  1090                           ;LedDriver.c: 19:     (((LATC))|=((0x02)));
  1091   00094A  828B               	bsf	139,1,c	;volatile
  1092                           
  1093                           ;LedDriver.c: 20:     (((LATC))|=((0x04)));
  1094   00094C  848B               	bsf	139,2,c	;volatile
  1095                           
  1096                           ;LedDriver.c: 21:     (((LATD))|=((0x02)));
  1097   00094E  828C               	bsf	140,1,c	;volatile
  1098                           
  1099                           ;LedDriver.c: 22:     (((LATD))|=((0x01)));
  1100   000950  808C               	bsf	140,0,c	;volatile
  1101   000952                     
  1102                           ;LedDriver.c: 24:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1103   000952  0E0B               	movlw	11
  1104   000954  6E10               	movwf	(??_init_leds+1)^0,c
  1105   000956  0E26               	movlw	38
  1106   000958  6E0F               	movwf	??_init_leds^0,c
  1107   00095A  0E5E               	movlw	94
  1108   00095C                     u617:
  1109   00095C  2EE8               	decfsz	wreg,f,c
  1110   00095E  D7FE               	bra	u617
  1111   000960  2E0F               	decfsz	??_init_leds^0,f,c
  1112   000962  D7FC               	bra	u617
  1113   000964  2E10               	decfsz	(??_init_leds+1)^0,f,c
  1114   000966  D7FA               	bra	u617
  1115   000968                     
  1116                           ;LedDriver.c: 26:     (((LATC))&=(~((0x02))));
  1117   000968  928B               	bcf	139,1,c	;volatile
  1118   00096A                     
  1119                           ;LedDriver.c: 27:     (((LATC))&=(~((0x04))));
  1120   00096A  948B               	bcf	139,2,c	;volatile
  1121   00096C                     
  1122                           ;LedDriver.c: 28:     (((LATD))&=(~((0x02))));
  1123   00096C  928C               	bcf	140,1,c	;volatile
  1124   00096E                     
  1125                           ;LedDriver.c: 29:     (((LATD))&=(~((0x01))));
  1126   00096E  908C               	bcf	140,0,c	;volatile
  1127   000970  0012               	return		;funcret
  1128   000972                     __end_of_init_leds:
  1129                           	callstack 0
  1130                           
  1131 ;; *************** function _idle_status_led *****************
  1132 ;; Defined at:
  1133 ;;		line 32 in file "LedDriver.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  1    wreg      void 
  1140 ;; Registers used:
  1141 ;;		status,2, status,0
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1147 ;;      Params:         0       0       0       0
  1148 ;;      Locals:         0       0       0       0
  1149 ;;      Temps:          0       0       0       0
  1150 ;;      Totals:         0       0       0       0
  1151 ;;Total ram usage:        0 bytes
  1152 ;; Hardware stack levels used: 1
  1153 ;; Hardware stack levels required when called: 4
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_FSM_begin
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text6
  1162   000AB0                     __ptext6:
  1163                           	callstack 0
  1164   000AB0                     _idle_status_led:
  1165                           	callstack 25
  1166   000AB0                     
  1167                           ;LedDriver.c: 34:     (((LATC))|=((0x04)));
  1168   000AB0  848B               	bsf	139,2,c	;volatile
  1169                           
  1170                           ;LedDriver.c: 36:     (((LATC))&=(~((0x02))));
  1171   000AB2  928B               	bcf	139,1,c	;volatile
  1172                           
  1173                           ;LedDriver.c: 37:     (((LATD))&=(~((0x01))));
  1174   000AB4  908C               	bcf	140,0,c	;volatile
  1175                           
  1176                           ;LedDriver.c: 38:     (((LATD))&=(~((0x02))));
  1177   000AB6  928C               	bcf	140,1,c	;volatile
  1178   000AB8  0012               	return		;funcret
  1179   000ABA                     __end_of_idle_status_led:
  1180                           	callstack 0
  1181                           
  1182 ;; *************** function _get_current_state *****************
  1183 ;; Defined at:
  1184 ;;		line 5 in file "FSM_states.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;		None
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      enum E2
  1191 ;; Registers used:
  1192 ;;		wreg, status,2
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1198 ;;      Params:         0       0       0       0
  1199 ;;      Locals:         0       0       0       0
  1200 ;;      Temps:          0       0       0       0
  1201 ;;      Totals:         0       0       0       0
  1202 ;;Total ram usage:        0 bytes
  1203 ;; Hardware stack levels used: 1
  1204 ;; Hardware stack levels required when called: 4
  1205 ;; This function calls:
  1206 ;;		Nothing
  1207 ;; This function is called by:
  1208 ;;		_FSM_begin
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text7
  1213   000AFE                     __ptext7:
  1214                           	callstack 0
  1215   000AFE                     _get_current_state:
  1216                           	callstack 25
  1217   000AFE                     
  1218                           ;FSM_states.c: 7:     return FSM_state;
  1219   000AFE  5045               	movf	_FSM_state^0,w,c
  1220   000B00  0012               	return		;funcret
  1221   000B02                     __end_of_get_current_state:
  1222                           	callstack 0
  1223                           
  1224 ;; *************** function _checking_moisture_status_led *****************
  1225 ;; Defined at:
  1226 ;;		line 49 in file "LedDriver.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;		None
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;		None
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		status,2, status,0
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1240 ;;      Params:         0       0       0       0
  1241 ;;      Locals:         0       0       0       0
  1242 ;;      Temps:          0       0       0       0
  1243 ;;      Totals:         0       0       0       0
  1244 ;;Total ram usage:        0 bytes
  1245 ;; Hardware stack levels used: 1
  1246 ;; Hardware stack levels required when called: 4
  1247 ;; This function calls:
  1248 ;;		Nothing
  1249 ;; This function is called by:
  1250 ;;		_FSM_begin
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text8
  1255   000ABA                     __ptext8:
  1256                           	callstack 0
  1257   000ABA                     _checking_moisture_status_led:
  1258                           	callstack 25
  1259   000ABA                     
  1260                           ;LedDriver.c: 51:     (((LATD))|=((0x02)));
  1261   000ABA  828C               	bsf	140,1,c	;volatile
  1262                           
  1263                           ;LedDriver.c: 53:     (((LATC))&=(~((0x02))));
  1264   000ABC  928B               	bcf	139,1,c	;volatile
  1265                           
  1266                           ;LedDriver.c: 54:     (((LATC))&=(~((0x04))));
  1267   000ABE  948B               	bcf	139,2,c	;volatile
  1268                           
  1269                           ;LedDriver.c: 55:     (((LATD))&=(~((0x01))));
  1270   000AC0  908C               	bcf	140,0,c	;volatile
  1271   000AC2  0012               	return		;funcret
  1272   000AC4                     __end_of_checking_moisture_status_led:
  1273                           	callstack 0
  1274                           
  1275 ;; *************** function _WaterPump_ON *****************
  1276 ;; Defined at:
  1277 ;;		line 25 in file "WaterPump_Driver.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;		None
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;		None
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  1    wreg      void 
  1284 ;; Registers used:
  1285 ;;		wreg, status,2, status,0
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1291 ;;      Params:         0       0       0       0
  1292 ;;      Locals:         0       0       0       0
  1293 ;;      Temps:          0       0       0       0
  1294 ;;      Totals:         0       0       0       0
  1295 ;;Total ram usage:        0 bytes
  1296 ;; Hardware stack levels used: 1
  1297 ;; Hardware stack levels required when called: 4
  1298 ;; This function calls:
  1299 ;;		Nothing
  1300 ;; This function is called by:
  1301 ;;		_FSM_begin
  1302 ;;		_WaterPump_Toggle
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text9
  1307   000ACE                     __ptext9:
  1308                           	callstack 0
  1309   000ACE                     _WaterPump_ON:
  1310                           	callstack 25
  1311   000ACE                     
  1312                           ;WaterPump_Driver.c: 27:     (((LATD))|=((0x04)));
  1313   000ACE  848C               	bsf	140,2,c	;volatile
  1314   000AD0                     
  1315                           ;WaterPump_Driver.c: 28:     pump_status = PUMP_ON;
  1316   000AD0  0E00               	movlw	0
  1317   000AD2  6E43               	movwf	_pump_status^0,c
  1318   000AD4  0012               	return		;funcret
  1319   000AD6                     __end_of_WaterPump_ON:
  1320                           	callstack 0
  1321                           
  1322 ;; *************** function _WaterPump_OFF *****************
  1323 ;; Defined at:
  1324 ;;		line 31 in file "WaterPump_Driver.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;		None
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2, status,0
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1338 ;;      Params:         0       0       0       0
  1339 ;;      Locals:         0       0       0       0
  1340 ;;      Temps:          0       0       0       0
  1341 ;;      Totals:         0       0       0       0
  1342 ;;Total ram usage:        0 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; Hardware stack levels required when called: 4
  1345 ;; This function calls:
  1346 ;;		Nothing
  1347 ;; This function is called by:
  1348 ;;		_FSM_begin
  1349 ;;		_WaterPump_Toggle
  1350 ;; This function uses a non-reentrant model
  1351 ;;
  1352                           
  1353                           	psect	text10
  1354   000AD6                     __ptext10:
  1355                           	callstack 0
  1356   000AD6                     _WaterPump_OFF:
  1357                           	callstack 25
  1358   000AD6                     
  1359                           ;WaterPump_Driver.c: 33:     (((LATD))|=((0x04)));
  1360   000AD6  848C               	bsf	140,2,c	;volatile
  1361   000AD8                     
  1362                           ;WaterPump_Driver.c: 34:     pump_status = PUMP_OFF;
  1363   000AD8  0E01               	movlw	1
  1364   000ADA  6E43               	movwf	_pump_status^0,c
  1365   000ADC  0012               	return		;funcret
  1366   000ADE                     __end_of_WaterPump_OFF:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _WaterPump_Init *****************
  1370 ;; Defined at:
  1371 ;;		line 17 in file "WaterPump_Driver.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;		None
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		wreg, status,2, status,0
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1385 ;;      Params:         0       0       0       0
  1386 ;;      Locals:         0       0       0       0
  1387 ;;      Temps:          0       0       0       0
  1388 ;;      Totals:         0       0       0       0
  1389 ;;Total ram usage:        0 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; Hardware stack levels required when called: 4
  1392 ;; This function calls:
  1393 ;;		Nothing
  1394 ;; This function is called by:
  1395 ;;		_FSM_begin
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text11
  1400   000AC4                     __ptext11:
  1401                           	callstack 0
  1402   000AC4                     _WaterPump_Init:
  1403                           	callstack 25
  1404   000AC4                     
  1405                           ;WaterPump_Driver.c: 19:     (((TRISD))&=(~((0x04))));
  1406   000AC4  9495               	bcf	149,2,c	;volatile
  1407                           
  1408                           ;WaterPump_Driver.c: 20:     (((LATD))&=(~((0x04))));
  1409   000AC6  948C               	bcf	140,2,c	;volatile
  1410   000AC8                     
  1411                           ;WaterPump_Driver.c: 21:     pump_status = PUMP_OFF;
  1412   000AC8  0E01               	movlw	1
  1413   000ACA  6E43               	movwf	_pump_status^0,c
  1414   000ACC  0012               	return		;funcret
  1415   000ACE                     __end_of_WaterPump_Init:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _Timer0_start *****************
  1419 ;; Defined at:
  1420 ;;		line 86 in file "PIC18F4331_Timer.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		None
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1434 ;;      Params:         0       0       0       0
  1435 ;;      Locals:         0       0       0       0
  1436 ;;      Temps:          0       0       0       0
  1437 ;;      Totals:         0       0       0       0
  1438 ;;Total ram usage:        0 bytes
  1439 ;; Hardware stack levels used: 1
  1440 ;; Hardware stack levels required when called: 4
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_FSM_begin
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text12
  1449   000B02                     __ptext12:
  1450                           	callstack 0
  1451   000B02                     _Timer0_start:
  1452                           	callstack 25
  1453   000B02                     
  1454                           ;PIC18F4331_Timer.c: 88:     T0CONbits.TMR0ON = 1;
  1455   000B02  8ED5               	bsf	213,7,c	;volatile
  1456   000B04  0012               	return		;funcret
  1457   000B06                     __end_of_Timer0_start:
  1458                           	callstack 0
  1459                           
  1460 ;; *************** function _SMS_init *****************
  1461 ;; Defined at:
  1462 ;;		line 8 in file "SoilMoistureSensor.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1476 ;;      Params:         0       0       0       0
  1477 ;;      Locals:         0       0       0       0
  1478 ;;      Temps:          0       0       0       0
  1479 ;;      Totals:         0       0       0       0
  1480 ;;Total ram usage:        0 bytes
  1481 ;; Hardware stack levels used: 1
  1482 ;; Hardware stack levels required when called: 6
  1483 ;; This function calls:
  1484 ;;		_ADC_init
  1485 ;; This function is called by:
  1486 ;;		_FSM_begin
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           	psect	text13
  1491   000AEE                     __ptext13:
  1492                           	callstack 0
  1493   000AEE                     _SMS_init:
  1494                           	callstack 23
  1495   000AEE                     
  1496                           ;SoilMoistureSensor.c: 10:     ADC_init();
  1497   000AEE  ECE3  F004         	call	_ADC_init	;wreg free
  1498   000AF2  0012               	return		;funcret
  1499   000AF4                     __end_of_SMS_init:
  1500                           	callstack 0
  1501                           
  1502 ;; *************** function _ADC_init *****************
  1503 ;; Defined at:
  1504 ;;		line 24 in file "PIC18F4331_ADC.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1518 ;;      Params:         0       0       0       0
  1519 ;;      Locals:         0       0       0       0
  1520 ;;      Temps:          0       0       0       0
  1521 ;;      Totals:         0       0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used: 1
  1524 ;; Hardware stack levels required when called: 5
  1525 ;; This function calls:
  1526 ;;		_ADC_stop
  1527 ;; This function is called by:
  1528 ;;		_SMS_init
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text14
  1533   0009C6                     __ptext14:
  1534                           	callstack 0
  1535   0009C6                     _ADC_init:
  1536                           	callstack 23
  1537   0009C6                     
  1538                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
  1539   0009C6  EC83  F005         	call	_ADC_stop	;wreg free
  1540   0009CA                     
  1541                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
  1542   0009CA  0E3F               	movlw	-193
  1543   0009CC  16C1               	andwf	193,f,c	;volatile
  1544   0009CE                     
  1545                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
  1546   0009CE  9099               	bcf	153,0,c	;volatile
  1547   0009D0                     
  1548                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
  1549   0009D0  9299               	bcf	153,1,c	;volatile
  1550   0009D2                     
  1551                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
  1552   0009D2  9AC2               	bcf	194,5,c	;volatile
  1553   0009D4                     
  1554                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
  1555   0009D4  0EF8               	movlw	-8
  1556   0009D6  16C0               	andwf	192,f,c	;volatile
  1557   0009D8                     
  1558                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
  1559   0009D8  8EC0               	bsf	192,7,c	;volatile
  1560   0009DA                     
  1561                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
  1562   0009DA  0E87               	movlw	-121
  1563   0009DC  16C0               	andwf	192,f,c	;volatile
  1564   0009DE                     
  1565                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
  1566   0009DE  80B8               	bsf	184,0,c	;volatile
  1567   0009E0  0012               	return		;funcret
  1568   0009E2                     __end_of_ADC_init:
  1569                           	callstack 0
  1570                           
  1571 ;; *************** function _ADC_stop *****************
  1572 ;; Defined at:
  1573 ;;		line 19 in file "PIC18F4331_ADC.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;		None
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;		None
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		None
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1587 ;;      Params:         0       0       0       0
  1588 ;;      Locals:         0       0       0       0
  1589 ;;      Temps:          0       0       0       0
  1590 ;;      Totals:         0       0       0       0
  1591 ;;Total ram usage:        0 bytes
  1592 ;; Hardware stack levels used: 1
  1593 ;; Hardware stack levels required when called: 4
  1594 ;; This function calls:
  1595 ;;		Nothing
  1596 ;; This function is called by:
  1597 ;;		_ADC_init
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           	psect	text15
  1602   000B06                     __ptext15:
  1603                           	callstack 0
  1604   000B06                     _ADC_stop:
  1605                           	callstack 23
  1606   000B06                     
  1607                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1608   000B06  90C2               	bcf	194,0,c	;volatile
  1609   000B08  0012               	return		;funcret
  1610   000B0A                     __end_of_ADC_stop:
  1611                           	callstack 0
  1612                           
  1613 ;; *************** function _SMS_Set_State *****************
  1614 ;; Defined at:
  1615 ;;		line 19 in file "SoilMoistureSensor.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;  moisture        2   15[COMRAM] unsigned short 
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;		None
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, status,2, status,0, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1629 ;;      Params:         2       0       0       0
  1630 ;;      Locals:         0       0       0       0
  1631 ;;      Temps:          0       0       0       0
  1632 ;;      Totals:         2       0       0       0
  1633 ;;Total ram usage:        2 bytes
  1634 ;; Hardware stack levels used: 1
  1635 ;; Hardware stack levels required when called: 5
  1636 ;; This function calls:
  1637 ;;		_set_state
  1638 ;; This function is called by:
  1639 ;;		_FSM_begin
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text16
  1644   000758                     __ptext16:
  1645                           	callstack 0
  1646   000758                     _SMS_Set_State:
  1647                           	callstack 24
  1648   000758                     
  1649                           ;SoilMoistureSensor.c: 19: void SMS_Set_State(U16 moisture);SoilMoistureSensor.c: 20: {;
      +                          SoilMoistureSensor.c: 21:     if(moisture >= (595))
  1650   000758  0E53               	movlw	83
  1651   00075A  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1652   00075C  0E02               	movlw	2
  1653   00075E  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1654   000760  A0D8               	btfss	status,0,c
  1655   000762  EFB5  F003         	goto	u371
  1656   000766  EFB7  F003         	goto	u370
  1657   00076A                     u371:
  1658   00076A  EFBC  F003         	goto	l1431
  1659   00076E                     u370:
  1660   00076E                     
  1661                           ;SoilMoistureSensor.c: 22:     {;SoilMoistureSensor.c: 23:         set_state(WATER_PLANT
      +                          S);
  1662   00076E  0E02               	movlw	2
  1663   000770  EC6F  F005         	call	_set_state
  1664                           
  1665                           ;SoilMoistureSensor.c: 24:     }
  1666   000774  EFDA  F003         	goto	l146
  1667   000778                     l1431:
  1668   000778  5011               	movf	(SMS_Set_State@moisture+1)^0,w,c
  1669   00077A  E109               	bnz	u380
  1670   00077C  0EEF               	movlw	239
  1671   00077E  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1672   000780  A0D8               	btfss	status,0,c
  1673   000782  EFC5  F003         	goto	u381
  1674   000786  EFC7  F003         	goto	u380
  1675   00078A                     u381:
  1676   00078A  EFD7  F003         	goto	l1437
  1677   00078E                     u380:
  1678   00078E  0E53               	movlw	83
  1679   000790  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1680   000792  0E02               	movlw	2
  1681   000794  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1682   000796  B0D8               	btfsc	status,0,c
  1683   000798  EFD0  F003         	goto	u391
  1684   00079C  EFD2  F003         	goto	u390
  1685   0007A0                     u391:
  1686   0007A0  EFD7  F003         	goto	l1437
  1687   0007A4                     u390:
  1688   0007A4                     
  1689                           ;SoilMoistureSensor.c: 26:     {;SoilMoistureSensor.c: 28:         set_state(IDLE_STATE)
      +                          ;
  1690   0007A4  0E01               	movlw	1
  1691   0007A6  EC6F  F005         	call	_set_state
  1692                           
  1693                           ;SoilMoistureSensor.c: 29:     }
  1694   0007AA  EFDA  F003         	goto	l146
  1695   0007AE                     l1437:
  1696                           
  1697                           ;SoilMoistureSensor.c: 31:     {;SoilMoistureSensor.c: 32:         set_state(IDLE_STATE)
      +                          ;
  1698   0007AE  0E01               	movlw	1
  1699   0007B0  EC6F  F005         	call	_set_state
  1700   0007B4                     l146:
  1701   0007B4  0012               	return		;funcret
  1702   0007B6                     __end_of_SMS_Set_State:
  1703                           	callstack 0
  1704                           
  1705 ;; *************** function _set_state *****************
  1706 ;; Defined at:
  1707 ;;		line 9 in file "FSM_states.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  state_to_set    1    wreg     enum E2
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  state_to_set    1   14[COMRAM] enum E2
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1721 ;;      Params:         0       0       0       0
  1722 ;;      Locals:         1       0       0       0
  1723 ;;      Temps:          0       0       0       0
  1724 ;;      Totals:         1       0       0       0
  1725 ;;Total ram usage:        1 bytes
  1726 ;; Hardware stack levels used: 1
  1727 ;; Hardware stack levels required when called: 4
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;;		_SMS_Set_State
  1733 ;;		_FSM_begin
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text17
  1738   000ADE                     __ptext17:
  1739                           	callstack 0
  1740   000ADE                     _set_state:
  1741                           	callstack 26
  1742                           
  1743                           ;incstack = 0
  1744                           ;set_state@state_to_set stored from wreg
  1745   000ADE  6E0F               	movwf	set_state@state_to_set^0,c
  1746   000AE0                     
  1747                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  1748   000AE0  C00F  F045         	movff	set_state@state_to_set,_FSM_state
  1749   000AE4  0012               	return		;funcret
  1750   000AE6                     __end_of_set_state:
  1751                           	callstack 0
  1752                           
  1753 ;; *************** function _SMS_Read_Moisture_Value *****************
  1754 ;; Defined at:
  1755 ;;		line 13 in file "SoilMoistureSensor.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  moisture        2   18[COMRAM] unsigned short 
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  2   16[COMRAM] unsigned short 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1769 ;;      Params:         2       0       0       0
  1770 ;;      Locals:         2       0       0       0
  1771 ;;      Temps:          0       0       0       0
  1772 ;;      Totals:         4       0       0       0
  1773 ;;Total ram usage:        4 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; Hardware stack levels required when called: 6
  1776 ;; This function calls:
  1777 ;;		_ADC_Read
  1778 ;; This function is called by:
  1779 ;;		_FSM_begin
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text18
  1784   000A48                     __ptext18:
  1785                           	callstack 0
  1786   000A48                     _SMS_Read_Moisture_Value:
  1787                           	callstack 23
  1788   000A48                     
  1789                           ;SoilMoistureSensor.c: 15:     U16 moisture = ADC_Read();
  1790   000A48  ECCE  F004         	call	_ADC_Read	;wreg free
  1791   000A4C  C00F  F013         	movff	?_ADC_Read,SMS_Read_Moisture_Value@moisture
  1792   000A50  C010  F014         	movff	?_ADC_Read+1,SMS_Read_Moisture_Value@moisture+1
  1793   000A54                     
  1794                           ;SoilMoistureSensor.c: 16:     return moisture;
  1795   000A54  C013  F011         	movff	SMS_Read_Moisture_Value@moisture,?_SMS_Read_Moisture_Value
  1796   000A58  C014  F012         	movff	SMS_Read_Moisture_Value@moisture+1,?_SMS_Read_Moisture_Value+1
  1797   000A5C  0012               	return		;funcret
  1798   000A5E                     __end_of_SMS_Read_Moisture_Value:
  1799                           	callstack 0
  1800                           
  1801 ;; *************** function _ADC_Read *****************
  1802 ;; Defined at:
  1803 ;;		line 60 in file "PIC18F4331_ADC.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;		None
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  2   14[COMRAM] unsigned short 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1817 ;;      Params:         2       0       0       0
  1818 ;;      Locals:         0       0       0       0
  1819 ;;      Temps:          0       0       0       0
  1820 ;;      Totals:         2       0       0       0
  1821 ;;Total ram usage:        2 bytes
  1822 ;; Hardware stack levels used: 1
  1823 ;; Hardware stack levels required when called: 5
  1824 ;; This function calls:
  1825 ;;		_ADC_in_progress
  1826 ;;		_ADC_start
  1827 ;; This function is called by:
  1828 ;;		_SMS_Read_Moisture_Value
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text19
  1833   00099C                     __ptext19:
  1834                           	callstack 0
  1835   00099C                     _ADC_Read:
  1836                           	callstack 23
  1837   00099C                     
  1838                           ;PIC18F4331_ADC.c: 62:     ADC_start();
  1839   00099C  EC7A  F005         	call	_ADC_start	;wreg free
  1840   0009A0                     l1389:
  1841   0009A0  EC3A  F005         	call	_ADC_in_progress	;wreg free
  1842   0009A4  0900               	iorlw	0
  1843   0009A6  A4D8               	btfss	status,2,c
  1844   0009A8  EFD8  F004         	goto	u331
  1845   0009AC  EFDA  F004         	goto	u330
  1846   0009B0                     u331:
  1847   0009B0  EFD0  F004         	goto	l1389
  1848   0009B4                     u330:
  1849   0009B4                     
  1850                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
  1851   0009B4  CFC4 F042          	movff	4036,_ADC+1	;volatile
  1852                           
  1853                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
  1854   0009B8  CFC3 F041          	movff	4035,_ADC	;volatile
  1855                           
  1856                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
  1857   0009BC  C041  F00F         	movff	_ADC,?_ADC_Read
  1858   0009C0  C042  F010         	movff	_ADC+1,?_ADC_Read+1
  1859   0009C4  0012               	return		;funcret
  1860   0009C6                     __end_of_ADC_Read:
  1861                           	callstack 0
  1862                           
  1863 ;; *************** function _ADC_start *****************
  1864 ;; Defined at:
  1865 ;;		line 13 in file "PIC18F4331_ADC.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		None
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1879 ;;      Params:         0       0       0       0
  1880 ;;      Locals:         0       0       0       0
  1881 ;;      Temps:          0       0       0       0
  1882 ;;      Totals:         0       0       0       0
  1883 ;;Total ram usage:        0 bytes
  1884 ;; Hardware stack levels used: 1
  1885 ;; Hardware stack levels required when called: 4
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_ADC_Read
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text20
  1894   000AF4                     __ptext20:
  1895                           	callstack 0
  1896   000AF4                     _ADC_start:
  1897                           	callstack 23
  1898   000AF4                     
  1899                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
  1900   000AF4  80C2               	bsf	194,0,c	;volatile
  1901                           
  1902                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
  1903   000AF6  82C2               	bsf	194,1,c	;volatile
  1904   000AF8  0012               	return		;funcret
  1905   000AFA                     __end_of_ADC_start:
  1906                           	callstack 0
  1907                           
  1908 ;; *************** function _ADC_in_progress *****************
  1909 ;; Defined at:
  1910 ;;		line 53 in file "PIC18F4331_ADC.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      unsigned char 
  1917 ;; Registers used:
  1918 ;;		wreg
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1924 ;;      Params:         0       0       0       0
  1925 ;;      Locals:         0       0       0       0
  1926 ;;      Temps:          0       0       0       0
  1927 ;;      Totals:         0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; Hardware stack levels required when called: 4
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_ADC_Read
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text21
  1939   000A74                     __ptext21:
  1940                           	callstack 0
  1941   000A74                     _ADC_in_progress:
  1942                           	callstack 23
  1943   000A74                     
  1944                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
  1945   000A74  B2C2               	btfsc	194,1,c	;volatile
  1946   000A76  EF3F  F005         	goto	u11
  1947   000A7A  EF42  F005         	goto	u10
  1948   000A7E                     u11:
  1949   000A7E  0E01               	movlw	1
  1950   000A80  EF43  F005         	goto	u16
  1951   000A84                     u10:
  1952   000A84  0E00               	movlw	0
  1953   000A86                     u16:
  1954   000A86  0012               	return		;funcret
  1955   000A88                     __end_of_ADC_in_progress:
  1956                           	callstack 0
  1957                           
  1958 ;; *************** function _Register_Callback *****************
  1959 ;; Defined at:
  1960 ;;		line 47 in file "SystemCallbacks.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;  config          2   16[COMRAM] PTR struct .
  1963 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      unsigned char 
  1968 ;; Registers used:
  1969 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1975 ;;      Params:         2       0       0       0
  1976 ;;      Locals:         0       0       0       0
  1977 ;;      Temps:          2       0       0       0
  1978 ;;      Totals:         4       0       0       0
  1979 ;;Total ram usage:        4 bytes
  1980 ;; Hardware stack levels used: 1
  1981 ;; Hardware stack levels required when called: 5
  1982 ;; This function calls:
  1983 ;;		_Reset_Counter
  1984 ;; This function is called by:
  1985 ;;		_FSM_begin
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text22
  1990   000604                     __ptext22:
  1991                           	callstack 0
  1992   000604                     _Register_Callback:
  1993                           	callstack 24
  1994   000604                     
  1995                           ;SystemCallbacks.c: 47: U8 Register_Callback(Callback_Config_t *config);SystemCallbacks.
      +                          c: 48: {;SystemCallbacks.c: 49:     if(callback_count < (5))
  1996   000604  0E05               	movlw	5
  1997   000606  6044               	cpfslt	_callback_count^0,c
  1998   000608  EF08  F003         	goto	u431
  1999   00060C  EF0A  F003         	goto	u430
  2000   000610                     u431:
  2001   000610  EF3E  F003         	goto	l250
  2002   000614                     u430:
  2003   000614                     
  2004                           ;SystemCallbacks.c: 50:     {;SystemCallbacks.c: 51:         if(config->callback != ((vo
      +                          id*)0) && config->expiry_time > 0)
  2005   000614  EE20 F002          	lfsr	2,2
  2006   000618  5011               	movf	Register_Callback@config^0,w,c
  2007   00061A  26D9               	addwf	fsr2l,f,c
  2008   00061C  5012               	movf	(Register_Callback@config+1)^0,w,c
  2009   00061E  22DA               	addwfc	fsr2h,f,c
  2010   000620  50DE               	movf	postinc2,w,c
  2011   000622  10DE               	iorwf	postinc2,w,c
  2012   000624  B4D8               	btfsc	status,2,c
  2013   000626  EF17  F003         	goto	u441
  2014   00062A  EF19  F003         	goto	u440
  2015   00062E                     u441:
  2016   00062E  EF3E  F003         	goto	l250
  2017   000632                     u440:
  2018   000632  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2019   000636  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2020   00063A  50DE               	movf	postinc2,w,c
  2021   00063C  10DE               	iorwf	postinc2,w,c
  2022   00063E  B4D8               	btfsc	status,2,c
  2023   000640  EF24  F003         	goto	u451
  2024   000644  EF26  F003         	goto	u450
  2025   000648                     u451:
  2026   000648  EF3E  F003         	goto	l250
  2027   00064C                     u450:
  2028   00064C                     
  2029                           ;SystemCallbacks.c: 52:         {;SystemCallbacks.c: 54:             registered_callback
      +                          s[callback_count] = (*config);
  2030   00064C  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2031   000650  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2032   000654  5044               	movf	_callback_count^0,w,c
  2033   000656  0D08               	mullw	8
  2034   000658  0E60               	movlw	low _registered_callbacks
  2035   00065A  24F3               	addwf	243,w,c
  2036   00065C  6EE1               	movwf	fsr1l,c
  2037   00065E  0E00               	movlw	high _registered_callbacks
  2038   000660  20F4               	addwfc	prodh,w,c
  2039   000662  6EE2               	movwf	fsr1h,c
  2040   000664  0E07               	movlw	7
  2041   000666                     u461:
  2042   000666  CFDB FFE3          	movff	plusw2,plusw1
  2043   00066A  06E8               	decf	wreg,f,c
  2044   00066C  E2FC               	bc	u461
  2045   00066E                     
  2046                           ;SystemCallbacks.c: 55:             Reset_Counter(config);
  2047   00066E  C011  F00F         	movff	Register_Callback@config,Reset_Counter@config
  2048   000672  C012  F010         	movff	Register_Callback@config+1,Reset_Counter@config+1
  2049   000676  EC2F  F005         	call	_Reset_Counter	;wreg free
  2050   00067A                     
  2051                           ;SystemCallbacks.c: 57:             callback_count++;
  2052   00067A  2A44               	incf	_callback_count^0,f,c
  2053   00067C                     l250:
  2054   00067C  0012               	return		;funcret
  2055   00067E                     __end_of_Register_Callback:
  2056                           	callstack 0
  2057                           
  2058 ;; *************** function _Reset_Counter *****************
  2059 ;; Defined at:
  2060 ;;		line 42 in file "SystemCallbacks.c"
  2061 ;; Parameters:    Size  Location     Type
  2062 ;;  config          2   14[COMRAM] PTR struct .
  2063 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2075 ;;      Params:         2       0       0       0
  2076 ;;      Locals:         0       0       0       0
  2077 ;;      Temps:          0       0       0       0
  2078 ;;      Totals:         2       0       0       0
  2079 ;;Total ram usage:        2 bytes
  2080 ;; Hardware stack levels used: 1
  2081 ;; Hardware stack levels required when called: 4
  2082 ;; This function calls:
  2083 ;;		Nothing
  2084 ;; This function is called by:
  2085 ;;		_Register_Callback
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text23
  2090   000A5E                     __ptext23:
  2091                           	callstack 0
  2092   000A5E                     _Reset_Counter:
  2093                           	callstack 24
  2094   000A5E                     
  2095                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  2096   000A5E  EE20 F005          	lfsr	2,5
  2097   000A62  500F               	movf	Reset_Counter@config^0,w,c
  2098   000A64  26D9               	addwf	fsr2l,f,c
  2099   000A66  5010               	movf	(Reset_Counter@config+1)^0,w,c
  2100   000A68  22DA               	addwfc	fsr2h,f,c
  2101   000A6A  0E00               	movlw	0
  2102   000A6C  6EDE               	movwf	postinc2,c
  2103   000A6E  0E00               	movlw	0
  2104   000A70  6EDD               	movwf	postdec2,c
  2105   000A72  0012               	return		;funcret
  2106   000A74                     __end_of_Reset_Counter:
  2107                           	callstack 0
  2108                           
  2109 ;; *************** function _LCD_Write_String *****************
  2110 ;; Defined at:
  2111 ;;		line 120 in file "LCD.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  str             2   18[COMRAM] PTR unsigned char 
  2114 ;;		 -> STR_5(19), STR_4(20), STR_3(15), STR_2(19), 
  2115 ;;		 -> STR_1(17), 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  i               2   22[COMRAM] int 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2127 ;;      Params:         2       0       0       0
  2128 ;;      Locals:         2       0       0       0
  2129 ;;      Temps:          2       0       0       0
  2130 ;;      Totals:         6       0       0       0
  2131 ;;Total ram usage:        6 bytes
  2132 ;; Hardware stack levels used: 1
  2133 ;; Hardware stack levels required when called: 6
  2134 ;; This function calls:
  2135 ;;		_LCD_Write_Char
  2136 ;; This function is called by:
  2137 ;;		_FSM_begin
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           	psect	text24
  2142   000812                     __ptext24:
  2143                           	callstack 0
  2144   000812                     _LCD_Write_String:
  2145                           	callstack 23
  2146   000812                     
  2147                           ;LCD.c: 120: void LCD_Write_String(char *str);LCD.c: 121: {;LCD.c: 122:   int i;;LCD.c: 
      +                          123:   for(i=0;str[i]!='\0';i++)
  2148   000812  0E00               	movlw	0
  2149   000814  6E18               	movwf	(LCD_Write_String@i+1)^0,c
  2150   000816  0E00               	movlw	0
  2151   000818  6E17               	movwf	LCD_Write_String@i^0,c
  2152   00081A  EF1F  F004         	goto	l1419
  2153   00081E                     l1415:
  2154                           
  2155                           ;LCD.c: 124:     LCD_Write_Char(str[i]);
  2156   00081E  5017               	movf	LCD_Write_String@i^0,w,c
  2157   000820  2413               	addwf	LCD_Write_String@str^0,w,c
  2158   000822  6E15               	movwf	??_LCD_Write_String^0,c
  2159   000824  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2160   000826  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2161   000828  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2162   00082A  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2163   00082E  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2164   000832                     	if	0	;tblptru may be non-zero
  2165   000832                     	endif
  2166   000832                     	if	0	;tblptru may be non-zero
  2167   000832                     	endif
  2168   000832  0008               	tblrd		*
  2169   000834  50F5               	movf	tablat,w,c
  2170   000836  EC5A  F004         	call	_LCD_Write_Char
  2171   00083A  4A17               	infsnz	LCD_Write_String@i^0,f,c
  2172   00083C  2A18               	incf	(LCD_Write_String@i+1)^0,f,c
  2173   00083E                     l1419:
  2174   00083E  5017               	movf	LCD_Write_String@i^0,w,c
  2175   000840  2413               	addwf	LCD_Write_String@str^0,w,c
  2176   000842  6E15               	movwf	??_LCD_Write_String^0,c
  2177   000844  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2178   000846  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2179   000848  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2180   00084A  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2181   00084E  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2182   000852                     	if	0	;tblptru may be non-zero
  2183   000852                     	endif
  2184   000852                     	if	0	;tblptru may be non-zero
  2185   000852                     	endif
  2186   000852  0008               	tblrd		*
  2187   000854  50F5               	movf	tablat,w,c
  2188   000856  0900               	iorlw	0
  2189   000858  A4D8               	btfss	status,2,c
  2190   00085A  EF31  F004         	goto	u361
  2191   00085E  EF33  F004         	goto	u360
  2192   000862                     u361:
  2193   000862  EF0F  F004         	goto	l1415
  2194   000866                     u360:
  2195   000866  0012               	return		;funcret
  2196   000868                     __end_of_LCD_Write_String:
  2197                           	callstack 0
  2198                           
  2199 ;; *************** function _LCD_Write_Char *****************
  2200 ;; Defined at:
  2201 ;;		line 102 in file "LCD.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  Data            1    wreg     unsigned char 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  Data            1   17[COMRAM] unsigned char 
  2206 ;;  High4           1   16[COMRAM] unsigned char 
  2207 ;;  Low4            1   15[COMRAM] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, status,2, status,0, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2217 ;;      Params:         0       0       0       0
  2218 ;;      Locals:         3       0       0       0
  2219 ;;      Temps:          0       0       0       0
  2220 ;;      Totals:         3       0       0       0
  2221 ;;Total ram usage:        3 bytes
  2222 ;; Hardware stack levels used: 1
  2223 ;; Hardware stack levels required when called: 5
  2224 ;; This function calls:
  2225 ;;		_LCD_DATA
  2226 ;; This function is called by:
  2227 ;;		_LCD_Write_String
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text25
  2232   0008B4                     __ptext25:
  2233                           	callstack 0
  2234   0008B4                     _LCD_Write_Char:
  2235                           	callstack 23
  2236                           
  2237                           ;incstack = 0
  2238                           ;LCD_Write_Char@Data stored from wreg
  2239   0008B4  6E12               	movwf	LCD_Write_Char@Data^0,c
  2240   0008B6                     
  2241                           ;LCD.c: 102: void LCD_Write_Char(char Data);LCD.c: 103: {;LCD.c: 104:   char Low4,High4;
      +                          ;LCD.c: 105:   Low4 = Data & 0x0F;
  2242   0008B6  5012               	movf	LCD_Write_Char@Data^0,w,c
  2243   0008B8  0B0F               	andlw	15
  2244   0008BA  6E10               	movwf	LCD_Write_Char@Low4^0,c
  2245                           
  2246                           ;LCD.c: 106:   High4 = Data & 0xF0;
  2247   0008BC  5012               	movf	LCD_Write_Char@Data^0,w,c
  2248   0008BE  0BF0               	andlw	240
  2249   0008C0  6E11               	movwf	LCD_Write_Char@High4^0,c
  2250   0008C2                     
  2251                           ;LCD.c: 107:   PORTBbits.RB5 = 1;
  2252   0008C2  8A81               	bsf	129,5,c	;volatile
  2253   0008C4                     
  2254                           ;LCD.c: 108:   LCD_DATA(High4>>4);
  2255   0008C4  3811               	swapf	LCD_Write_Char@High4^0,w,c
  2256   0008C6  0B0F               	andlw	15
  2257   0008C8  ECDB  F003         	call	_LCD_DATA
  2258   0008CC                     
  2259                           ;LCD.c: 109:   PORTBbits.RB4 = 1;
  2260   0008CC  8881               	bsf	129,4,c	;volatile
  2261   0008CE                     
  2262                           ;LCD.c: 110:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2263   0008CE  0EA6               	movlw	166
  2264   0008D0                     u627:
  2265   0008D0  2EE8               	decfsz	wreg,f,c
  2266   0008D2  D7FE               	bra	u627
  2267   0008D4  D000               	nop2	
  2268   0008D6                     
  2269                           ;LCD.c: 111:   PORTBbits.RB4 = 0;
  2270   0008D6  9881               	bcf	129,4,c	;volatile
  2271   0008D8                     
  2272                           ;LCD.c: 112:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2273   0008D8  0EA6               	movlw	166
  2274   0008DA                     u637:
  2275   0008DA  2EE8               	decfsz	wreg,f,c
  2276   0008DC  D7FE               	bra	u637
  2277   0008DE  D000               	nop2	
  2278   0008E0                     
  2279                           ;LCD.c: 113:   LCD_DATA(Low4);
  2280   0008E0  5010               	movf	LCD_Write_Char@Low4^0,w,c
  2281   0008E2  ECDB  F003         	call	_LCD_DATA
  2282   0008E6                     
  2283                           ;LCD.c: 114:   PORTBbits.RB4 = 1;
  2284   0008E6  8881               	bsf	129,4,c	;volatile
  2285   0008E8                     
  2286                           ;LCD.c: 115:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2287   0008E8  0EA6               	movlw	166
  2288   0008EA                     u647:
  2289   0008EA  2EE8               	decfsz	wreg,f,c
  2290   0008EC  D7FE               	bra	u647
  2291   0008EE  D000               	nop2	
  2292   0008F0                     
  2293                           ;LCD.c: 116:   PORTBbits.RB4 = 0;
  2294   0008F0  9881               	bcf	129,4,c	;volatile
  2295   0008F2                     
  2296                           ;LCD.c: 117:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2297   0008F2  0EA6               	movlw	166
  2298   0008F4                     u657:
  2299   0008F4  2EE8               	decfsz	wreg,f,c
  2300   0008F6  D7FE               	bra	u657
  2301   0008F8  D000               	nop2	
  2302   0008FA  0012               	return		;funcret
  2303   0008FC                     __end_of_LCD_Write_Char:
  2304                           	callstack 0
  2305                           
  2306 ;; *************** function _LCD_Set_Cursor *****************
  2307 ;; Defined at:
  2308 ;;		line 81 in file "LCD.c"
  2309 ;; Parameters:    Size  Location     Type
  2310 ;;  r               1    wreg     unsigned char 
  2311 ;;  c               1   16[COMRAM] unsigned char 
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  r               1   17[COMRAM] unsigned char 
  2314 ;;  Temp            1   20[COMRAM] unsigned char 
  2315 ;;  High4           1   19[COMRAM] unsigned char 
  2316 ;;  Low4            1   18[COMRAM] unsigned char 
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2326 ;;      Params:         1       0       0       0
  2327 ;;      Locals:         4       0       0       0
  2328 ;;      Temps:          0       0       0       0
  2329 ;;      Totals:         5       0       0       0
  2330 ;;Total ram usage:        5 bytes
  2331 ;; Hardware stack levels used: 1
  2332 ;; Hardware stack levels required when called: 6
  2333 ;; This function calls:
  2334 ;;		_LCD_CMD
  2335 ;; This function is called by:
  2336 ;;		_FSM_begin
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text26
  2341   0006F6                     __ptext26:
  2342                           	callstack 0
  2343   0006F6                     _LCD_Set_Cursor:
  2344                           	callstack 23
  2345                           
  2346                           ;incstack = 0
  2347                           ;LCD_Set_Cursor@r stored from wreg
  2348   0006F6  6E12               	movwf	LCD_Set_Cursor@r^0,c
  2349   0006F8                     
  2350                           ;LCD.c: 81: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 82: {;LCD.c: 83
      +                          :   unsigned char Temp,Low4,High4;;LCD.c: 84:   if(r == 1)
  2351   0006F8  0412               	decf	LCD_Set_Cursor@r^0,w,c
  2352   0006FA  A4D8               	btfss	status,2,c
  2353   0006FC  EF82  F003         	goto	u341
  2354   000700  EF84  F003         	goto	u340
  2355   000704                     u341:
  2356   000704  EF93  F003         	goto	l92
  2357   000708                     u340:
  2358   000708                     
  2359                           ;LCD.c: 85:   {;LCD.c: 86:     Temp = 0x80 + c - 1;
  2360   000708  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2361   00070A  0F7F               	addlw	127
  2362   00070C  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2363                           
  2364                           ;LCD.c: 87:     High4 = Temp >> 4;
  2365   00070E  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2366   000710  0B0F               	andlw	15
  2367   000712  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2368                           
  2369                           ;LCD.c: 88:     Low4 = Temp & 0x0F;
  2370   000714  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2371   000716  0B0F               	andlw	15
  2372   000718  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2373   00071A                     
  2374                           ;LCD.c: 89:     LCD_CMD(High4);
  2375   00071A  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2376   00071C  EC0D  F005         	call	_LCD_CMD
  2377   000720                     
  2378                           ;LCD.c: 90:     LCD_CMD(Low4);
  2379   000720  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2380   000722  EC0D  F005         	call	_LCD_CMD
  2381   000726                     l92:
  2382                           
  2383                           ;LCD.c: 92:   if(r == 2)
  2384   000726  0E02               	movlw	2
  2385   000728  1812               	xorwf	LCD_Set_Cursor@r^0,w,c
  2386   00072A  A4D8               	btfss	status,2,c
  2387   00072C  EF9A  F003         	goto	u351
  2388   000730  EF9C  F003         	goto	u350
  2389   000734                     u351:
  2390   000734  EFAB  F003         	goto	l94
  2391   000738                     u350:
  2392   000738                     
  2393                           ;LCD.c: 93:   {;LCD.c: 94:     Temp = 0xC0 + c - 1;
  2394   000738  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2395   00073A  0FBF               	addlw	191
  2396   00073C  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2397                           
  2398                           ;LCD.c: 95:     High4 = Temp >> 4;
  2399   00073E  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2400   000740  0B0F               	andlw	15
  2401   000742  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2402                           
  2403                           ;LCD.c: 96:     Low4 = Temp & 0x0F;
  2404   000744  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2405   000746  0B0F               	andlw	15
  2406   000748  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2407   00074A                     
  2408                           ;LCD.c: 97:     LCD_CMD(High4);
  2409   00074A  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2410   00074C  EC0D  F005         	call	_LCD_CMD
  2411   000750                     
  2412                           ;LCD.c: 98:     LCD_CMD(Low4);
  2413   000750  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2414   000752  EC0D  F005         	call	_LCD_CMD
  2415   000756                     l94:
  2416   000756  0012               	return		;funcret
  2417   000758                     __end_of_LCD_Set_Cursor:
  2418                           	callstack 0
  2419                           
  2420 ;; *************** function _LCD_Init *****************
  2421 ;; Defined at:
  2422 ;;		line 5 in file "LCD.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;		None
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, status,2, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2436 ;;      Params:         0       0       0       0
  2437 ;;      Locals:         0       0       0       0
  2438 ;;      Temps:          1       0       0       0
  2439 ;;      Totals:         1       0       0       0
  2440 ;;Total ram usage:        1 bytes
  2441 ;; Hardware stack levels used: 1
  2442 ;; Hardware stack levels required when called: 6
  2443 ;; This function calls:
  2444 ;;		_LCD_CMD
  2445 ;;		_LCD_DATA
  2446 ;; This function is called by:
  2447 ;;		_FSM_begin
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text27
  2452   00067E                     __ptext27:
  2453                           	callstack 0
  2454   00067E                     _LCD_Init:
  2455                           	callstack 23
  2456   00067E                     
  2457                           ;LCD.c: 8:   TRISB = 0x00;
  2458   00067E  0E00               	movlw	0
  2459   000680  6E93               	movwf	147,c	;volatile
  2460   000682                     
  2461                           ;LCD.c: 9:   TRISBbits.RB5 = 0;
  2462   000682  9A93               	bcf	147,5,c	;volatile
  2463   000684                     
  2464                           ;LCD.c: 10:   TRISBbits.RB4 = 0;
  2465   000684  9893               	bcf	147,4,c	;volatile
  2466   000686                     
  2467                           ;LCD.c: 13:   LCD_DATA(0x00);
  2468   000686  0E00               	movlw	0
  2469   000688  ECDB  F003         	call	_LCD_DATA
  2470   00068C                     
  2471                           ;LCD.c: 14:   _delay((unsigned long)((30)*(8000000/4000.0)));
  2472   00068C  0E4E               	movlw	78
  2473   00068E  6E11               	movwf	??_LCD_Init^0,c
  2474   000690  0EEB               	movlw	235
  2475   000692                     u667:
  2476   000692  2EE8               	decfsz	wreg,f,c
  2477   000694  D7FE               	bra	u667
  2478   000696  2E11               	decfsz	??_LCD_Init^0,f,c
  2479   000698  D7FC               	bra	u667
  2480   00069A  F000               	nop	
  2481   00069C                     
  2482                           ;LCD.c: 15:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2483   00069C  0EA6               	movlw	166
  2484   00069E                     u677:
  2485   00069E  2EE8               	decfsz	wreg,f,c
  2486   0006A0  D7FE               	bra	u677
  2487   0006A2  D000               	nop2	
  2488   0006A4                     
  2489                           ;LCD.c: 16:   LCD_CMD(0x03);
  2490   0006A4  0E03               	movlw	3
  2491   0006A6  EC0D  F005         	call	_LCD_CMD
  2492                           
  2493                           ;LCD.c: 17:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2494   0006AA  0E0D               	movlw	13
  2495   0006AC  6E11               	movwf	??_LCD_Init^0,c
  2496   0006AE  0EFC               	movlw	252
  2497   0006B0                     u687:
  2498   0006B0  2EE8               	decfsz	wreg,f,c
  2499   0006B2  D7FE               	bra	u687
  2500   0006B4  2E11               	decfsz	??_LCD_Init^0,f,c
  2501   0006B6  D7FC               	bra	u687
  2502   0006B8                     
  2503                           ;LCD.c: 18:   LCD_CMD(0x03);
  2504   0006B8  0E03               	movlw	3
  2505   0006BA  EC0D  F005         	call	_LCD_CMD
  2506   0006BE                     
  2507                           ;LCD.c: 19:   _delay((unsigned long)((150)*(8000000/4000000.0)));
  2508   0006BE  0E64               	movlw	100
  2509   0006C0                     u697:
  2510   0006C0  2EE8               	decfsz	wreg,f,c
  2511   0006C2  D7FE               	bra	u697
  2512                           
  2513                           ;LCD.c: 20:   LCD_CMD(0x03);
  2514   0006C4  0E03               	movlw	3
  2515   0006C6  EC0D  F005         	call	_LCD_CMD
  2516                           
  2517                           ;LCD.c: 21:   LCD_CMD(0x02);
  2518   0006CA  0E02               	movlw	2
  2519   0006CC  EC0D  F005         	call	_LCD_CMD
  2520                           
  2521                           ;LCD.c: 22:   LCD_CMD(0x02);
  2522   0006D0  0E02               	movlw	2
  2523   0006D2  EC0D  F005         	call	_LCD_CMD
  2524                           
  2525                           ;LCD.c: 23:   LCD_CMD(0x08);
  2526   0006D6  0E08               	movlw	8
  2527   0006D8  EC0D  F005         	call	_LCD_CMD
  2528                           
  2529                           ;LCD.c: 24:   LCD_CMD(0x00);
  2530   0006DC  0E00               	movlw	0
  2531   0006DE  EC0D  F005         	call	_LCD_CMD
  2532                           
  2533                           ;LCD.c: 25:   LCD_CMD(0x0C);
  2534   0006E2  0E0C               	movlw	12
  2535   0006E4  EC0D  F005         	call	_LCD_CMD
  2536                           
  2537                           ;LCD.c: 26:   LCD_CMD(0x00);
  2538   0006E8  0E00               	movlw	0
  2539   0006EA  EC0D  F005         	call	_LCD_CMD
  2540                           
  2541                           ;LCD.c: 27:   LCD_CMD(0x06);
  2542   0006EE  0E06               	movlw	6
  2543   0006F0  EC0D  F005         	call	_LCD_CMD
  2544   0006F4  0012               	return		;funcret
  2545   0006F6                     __end_of_LCD_Init:
  2546                           	callstack 0
  2547                           
  2548 ;; *************** function _LCD_Clear *****************
  2549 ;; Defined at:
  2550 ;;		line 30 in file "LCD.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2564 ;;      Params:         0       0       0       0
  2565 ;;      Locals:         0       0       0       0
  2566 ;;      Temps:          0       0       0       0
  2567 ;;      Totals:         0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used: 1
  2570 ;; Hardware stack levels required when called: 6
  2571 ;; This function calls:
  2572 ;;		_LCD_CMD
  2573 ;; This function is called by:
  2574 ;;		_FSM_begin
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text28
  2579   000A98                     __ptext28:
  2580                           	callstack 0
  2581   000A98                     _LCD_Clear:
  2582                           	callstack 23
  2583   000A98                     
  2584                           ;LCD.c: 32:   LCD_CMD(0);
  2585   000A98  0E00               	movlw	0
  2586   000A9A  EC0D  F005         	call	_LCD_CMD
  2587                           
  2588                           ;LCD.c: 33:   LCD_CMD(1);
  2589   000A9E  0E01               	movlw	1
  2590   000AA0  EC0D  F005         	call	_LCD_CMD
  2591   000AA4  0012               	return		;funcret
  2592   000AA6                     __end_of_LCD_Clear:
  2593                           	callstack 0
  2594                           
  2595 ;; *************** function _LCD_CMD *****************
  2596 ;; Defined at:
  2597 ;;		line 49 in file "LCD.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;  CMD             1    wreg     unsigned char 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  CMD             1   15[COMRAM] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  1    wreg      void 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2611 ;;      Params:         0       0       0       0
  2612 ;;      Locals:         1       0       0       0
  2613 ;;      Temps:          0       0       0       0
  2614 ;;      Totals:         1       0       0       0
  2615 ;;Total ram usage:        1 bytes
  2616 ;; Hardware stack levels used: 1
  2617 ;; Hardware stack levels required when called: 5
  2618 ;; This function calls:
  2619 ;;		_LCD_DATA
  2620 ;; This function is called by:
  2621 ;;		_LCD_Init
  2622 ;;		_LCD_Clear
  2623 ;;		_LCD_Set_Cursor
  2624 ;;		_LCD_SL
  2625 ;;		_LCD_SR
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text29
  2630   000A1A                     __ptext29:
  2631                           	callstack 0
  2632   000A1A                     _LCD_CMD:
  2633                           	callstack 23
  2634                           
  2635                           ;incstack = 0
  2636                           ;LCD_CMD@CMD stored from wreg
  2637   000A1A  6E10               	movwf	LCD_CMD@CMD^0,c
  2638   000A1C                     
  2639                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:   PORTBbits.RB5 = 0;
  2640   000A1C  9A81               	bcf	129,5,c	;volatile
  2641   000A1E                     
  2642                           ;LCD.c: 54:   LCD_DATA(CMD);
  2643   000A1E  5010               	movf	LCD_CMD@CMD^0,w,c
  2644   000A20  ECDB  F003         	call	_LCD_DATA
  2645   000A24                     
  2646                           ;LCD.c: 56:   PORTBbits.RB4 = 1;
  2647   000A24  8881               	bsf	129,4,c	;volatile
  2648   000A26                     
  2649                           ;LCD.c: 57:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2650   000A26  0EA6               	movlw	166
  2651   000A28                     u707:
  2652   000A28  2EE8               	decfsz	wreg,f,c
  2653   000A2A  D7FE               	bra	u707
  2654   000A2C  D000               	nop2	
  2655   000A2E                     
  2656                           ;LCD.c: 58:   PORTBbits.RB4 = 0;
  2657   000A2E  9881               	bcf	129,4,c	;volatile
  2658   000A30  0012               	return		;funcret
  2659   000A32                     __end_of_LCD_CMD:
  2660                           	callstack 0
  2661                           
  2662 ;; *************** function _LCD_DATA *****************
  2663 ;; Defined at:
  2664 ;;		line 61 in file "LCD.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  Data            1    wreg     unsigned char 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  Data            1   14[COMRAM] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2678 ;;      Params:         0       0       0       0
  2679 ;;      Locals:         1       0       0       0
  2680 ;;      Temps:          0       0       0       0
  2681 ;;      Totals:         1       0       0       0
  2682 ;;Total ram usage:        1 bytes
  2683 ;; Hardware stack levels used: 1
  2684 ;; Hardware stack levels required when called: 4
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_LCD_Init
  2689 ;;		_LCD_CMD
  2690 ;;		_LCD_Write_Char
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text30
  2695   0007B6                     __ptext30:
  2696                           	callstack 0
  2697   0007B6                     _LCD_DATA:
  2698                           	callstack 23
  2699                           
  2700                           ;incstack = 0
  2701                           ;LCD_DATA@Data stored from wreg
  2702   0007B6  6E0F               	movwf	LCD_DATA@Data^0,c
  2703   0007B8                     
  2704                           ;LCD.c: 61: void LCD_DATA(unsigned char Data);LCD.c: 62: {;LCD.c: 63:   if(Data & 1)
  2705   0007B8  A00F               	btfss	LCD_DATA@Data^0,0,c
  2706   0007BA  EFE1  F003         	goto	u21
  2707   0007BE  EFE3  F003         	goto	u20
  2708   0007C2                     u21:
  2709   0007C2  EFE6  F003         	goto	l81
  2710   0007C6                     u20:
  2711   0007C6                     
  2712                           ;LCD.c: 64:     PORTBbits.RB0 = 1;
  2713   0007C6  8081               	bsf	129,0,c	;volatile
  2714   0007C8  EFE7  F003         	goto	l1001
  2715   0007CC                     l81:
  2716                           
  2717                           ;LCD.c: 66:     PORTBbits.RB0 = 0;
  2718   0007CC  9081               	bcf	129,0,c	;volatile
  2719   0007CE                     l1001:
  2720                           
  2721                           ;LCD.c: 67:   if(Data & 2)
  2722   0007CE  A20F               	btfss	LCD_DATA@Data^0,1,c
  2723   0007D0  EFEC  F003         	goto	u31
  2724   0007D4  EFEE  F003         	goto	u30
  2725   0007D8                     u31:
  2726   0007D8  EFF1  F003         	goto	l83
  2727   0007DC                     u30:
  2728   0007DC                     
  2729                           ;LCD.c: 68:     PORTBbits.RB1 = 1;
  2730   0007DC  8281               	bsf	129,1,c	;volatile
  2731   0007DE  EFF2  F003         	goto	l1005
  2732   0007E2                     l83:
  2733                           
  2734                           ;LCD.c: 70:     PORTBbits.RB1 = 0;
  2735   0007E2  9281               	bcf	129,1,c	;volatile
  2736   0007E4                     l1005:
  2737                           
  2738                           ;LCD.c: 71:   if(Data & 4)
  2739   0007E4  A40F               	btfss	LCD_DATA@Data^0,2,c
  2740   0007E6  EFF7  F003         	goto	u41
  2741   0007EA  EFF9  F003         	goto	u40
  2742   0007EE                     u41:
  2743   0007EE  EFFC  F003         	goto	l85
  2744   0007F2                     u40:
  2745   0007F2                     
  2746                           ;LCD.c: 72:     PORTBbits.RB2 = 1;
  2747   0007F2  8481               	bsf	129,2,c	;volatile
  2748   0007F4  EFFD  F003         	goto	l1009
  2749   0007F8                     l85:
  2750                           
  2751                           ;LCD.c: 74:     PORTBbits.RB2 = 0;
  2752   0007F8  9481               	bcf	129,2,c	;volatile
  2753   0007FA                     l1009:
  2754                           
  2755                           ;LCD.c: 75:   if(Data & 8)
  2756   0007FA  A60F               	btfss	LCD_DATA@Data^0,3,c
  2757   0007FC  EF02  F004         	goto	u51
  2758   000800  EF04  F004         	goto	u50
  2759   000804                     u51:
  2760   000804  EF07  F004         	goto	l87
  2761   000808                     u50:
  2762   000808                     
  2763                           ;LCD.c: 76:     PORTBbits.RB3 = 1;
  2764   000808  8681               	bsf	129,3,c	;volatile
  2765   00080A  EF08  F004         	goto	l89
  2766   00080E                     l87:
  2767                           
  2768                           ;LCD.c: 78:     PORTBbits.RB3 = 0;
  2769   00080E  9681               	bcf	129,3,c	;volatile
  2770   000810                     l89:
  2771   000810  0012               	return		;funcret
  2772   000812                     __end_of_LCD_DATA:
  2773                           	callstack 0
  2774                           
  2775 ;; *************** function _Callbacks_Init *****************
  2776 ;; Defined at:
  2777 ;;		line 9 in file "SystemCallbacks.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;		None
  2780 ;; Auto vars:     Size  Location     Type
  2781 ;;  callback        1   14[COMRAM] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      void 
  2784 ;; Registers used:
  2785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2791 ;;      Params:         0       0       0       0
  2792 ;;      Locals:         1       0       0       0
  2793 ;;      Temps:          0       0       0       0
  2794 ;;      Totals:         1       0       0       0
  2795 ;;Total ram usage:        1 bytes
  2796 ;; Hardware stack levels used: 1
  2797 ;; Hardware stack levels required when called: 4
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_FSM_begin
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text31
  2806   000868                     __ptext31:
  2807                           	callstack 0
  2808   000868                     _Callbacks_Init:
  2809                           	callstack 25
  2810   000868                     
  2811                           ;SystemCallbacks.c: 11:     for(U8 callback=0; callback<(5); callback++)
  2812   000868  0E00               	movlw	0
  2813   00086A  6E0F               	movwf	Callbacks_Init@callback^0,c
  2814   00086C                     l1453:
  2815                           
  2816                           ;SystemCallbacks.c: 12:     {;SystemCallbacks.c: 13:         registered_callbacks[callba
      +                          ck].callback = ((void*)0);
  2817   00086C  500F               	movf	Callbacks_Init@callback^0,w,c
  2818   00086E  0D08               	mullw	8
  2819   000870  0E62               	movlw	low (_registered_callbacks+2)
  2820   000872  24F3               	addwf	243,w,c
  2821   000874  6ED9               	movwf	fsr2l,c
  2822   000876  0E00               	movlw	high (_registered_callbacks+2)
  2823   000878  20F4               	addwfc	prodh,w,c
  2824   00087A  6EDA               	movwf	fsr2h,c
  2825   00087C  0E00               	movlw	0
  2826   00087E  6EDE               	movwf	postinc2,c
  2827   000880  0E00               	movlw	0
  2828   000882  6EDD               	movwf	postdec2,c
  2829                           
  2830                           ;SystemCallbacks.c: 14:         registered_callbacks[callback].count = 0;
  2831   000884  500F               	movf	Callbacks_Init@callback^0,w,c
  2832   000886  0D08               	mullw	8
  2833   000888  0E65               	movlw	low (_registered_callbacks+5)
  2834   00088A  24F3               	addwf	243,w,c
  2835   00088C  6ED9               	movwf	fsr2l,c
  2836   00088E  0E00               	movlw	high (_registered_callbacks+5)
  2837   000890  20F4               	addwfc	prodh,w,c
  2838   000892  6EDA               	movwf	fsr2h,c
  2839   000894  0E00               	movlw	0
  2840   000896  6EDE               	movwf	postinc2,c
  2841   000898  0E00               	movlw	0
  2842   00089A  6EDD               	movwf	postdec2,c
  2843   00089C                     
  2844                           ;SystemCallbacks.c: 15:         callback_count = 0;
  2845   00089C  0E00               	movlw	0
  2846   00089E  6E44               	movwf	_callback_count^0,c
  2847   0008A0                     
  2848                           ;SystemCallbacks.c: 16:     }
  2849   0008A0  2A0F               	incf	Callbacks_Init@callback^0,f,c
  2850   0008A2  0E04               	movlw	4
  2851   0008A4  640F               	cpfsgt	Callbacks_Init@callback^0,c
  2852   0008A6  EF57  F004         	goto	u421
  2853   0008AA  EF59  F004         	goto	u420
  2854   0008AE                     u421:
  2855   0008AE  EF36  F004         	goto	l1453
  2856   0008B2                     u420:
  2857   0008B2  0012               	return		;funcret
  2858   0008B4                     __end_of_Callbacks_Init:
  2859                           	callstack 0
  2860                           
  2861 ;; *************** function _timer_overflow_isr *****************
  2862 ;; Defined at:
  2863 ;;		line 10 in file "SystemInterrupts.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2877 ;;      Params:         0       0       0       0
  2878 ;;      Locals:         0       0       0       0
  2879 ;;      Temps:          8       0       0       0
  2880 ;;      Totals:         8       0       0       0
  2881 ;;Total ram usage:        8 bytes
  2882 ;; Hardware stack levels used: 1
  2883 ;; Hardware stack levels required when called: 3
  2884 ;; This function calls:
  2885 ;;		_Callbacks_Manager
  2886 ;; This function is called by:
  2887 ;;		Interrupt level 2
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	intcode
  2892   000008                     __pintcode:
  2893                           	callstack 0
  2894   000008                     _timer_overflow_isr:
  2895                           	callstack 23
  2896                           
  2897                           ;incstack = 0
  2898   000008  8246               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2899   00000A  CFFA F007          	movff	pclath,??_timer_overflow_isr
  2900   00000E  CFFB F008          	movff	pclatu,??_timer_overflow_isr+1
  2901   000012  CFE1 F009          	movff	fsr1l,??_timer_overflow_isr+2
  2902   000016  CFE2 F00A          	movff	fsr1h,??_timer_overflow_isr+3
  2903   00001A  CFD9 F00B          	movff	fsr2l,??_timer_overflow_isr+4
  2904   00001E  CFDA F00C          	movff	fsr2h,??_timer_overflow_isr+5
  2905   000022  CFF3 F00D          	movff	prodl,??_timer_overflow_isr+6
  2906   000026  CFF4 F00E          	movff	prodh,??_timer_overflow_isr+7
  2907   00002A                     
  2908                           ;SystemInterrupts.c: 13:     INTCONbits.GIEH = 0;
  2909   00002A  9EF2               	bcf	242,7,c	;volatile
  2910                           
  2911                           ;SystemInterrupts.c: 14:     INTCONbits.GIEL = 1;
  2912   00002C  8CF2               	bsf	242,6,c	;volatile
  2913   00002E                     
  2914                           ;SystemInterrupts.c: 28:     if(TMR0L < (0x7C))
  2915   00002E  0E7C               	movlw	124
  2916   000030  60D6               	cpfslt	214,c	;volatile
  2917   000032  EF1D  F000         	goto	i2u56_41
  2918   000036  EF1F  F000         	goto	i2u56_40
  2919   00003A                     i2u56_41:
  2920   00003A  EF21  F000         	goto	i2l1611
  2921   00003E                     i2u56_40:
  2922   00003E                     
  2923                           ;SystemInterrupts.c: 29:     {;SystemInterrupts.c: 30:         TMR0L = (0x7C);
  2924   00003E  0E7C               	movlw	124
  2925   000040  6ED6               	movwf	214,c	;volatile
  2926   000042                     i2l1611:
  2927                           
  2928                           ;SystemInterrupts.c: 32:     if(TMR0H < (0xE1))
  2929   000042  0EE1               	movlw	225
  2930   000044  60D7               	cpfslt	215,c	;volatile
  2931   000046  EF27  F000         	goto	i2u57_41
  2932   00004A  EF29  F000         	goto	i2u57_40
  2933   00004E                     i2u57_41:
  2934   00004E  EF2B  F000         	goto	i2l1615
  2935   000052                     i2u57_40:
  2936   000052                     
  2937                           ;SystemInterrupts.c: 33:     {;SystemInterrupts.c: 34:         TMR0H = (0xE1);
  2938   000052  0EE1               	movlw	225
  2939   000054  6ED7               	movwf	215,c	;volatile
  2940   000056                     i2l1615:
  2941                           
  2942                           ;SystemInterrupts.c: 38:     if(INTCONbits.TMR0IF)
  2943   000056  A4F2               	btfss	242,2,c	;volatile
  2944   000058  EF30  F000         	goto	i2u58_41
  2945   00005C  EF32  F000         	goto	i2u58_40
  2946   000060                     i2u58_41:
  2947   000060  EF35  F000         	goto	i2l1621
  2948   000064                     i2u58_40:
  2949   000064                     
  2950                           ;SystemInterrupts.c: 39:     {;SystemInterrupts.c: 43:         Callbacks_Manager();
  2951   000064  EC9E  F002         	call	_Callbacks_Manager	;wreg free
  2952   000068                     
  2953                           ;SystemInterrupts.c: 46:         INTCONbits.TMR0IF = 0;
  2954   000068  94F2               	bcf	242,2,c	;volatile
  2955   00006A                     i2l1621:
  2956                           
  2957                           ;SystemInterrupts.c: 55:     INTCONbits.GIEH = 1;
  2958   00006A  8EF2               	bsf	242,7,c	;volatile
  2959   00006C                     
  2960                           ;SystemInterrupts.c: 56:     INTCONbits.GIEL = 1;
  2961   00006C  8CF2               	bsf	242,6,c	;volatile
  2962   00006E  C00E  FFF4         	movff	??_timer_overflow_isr+7,prodh
  2963   000072  C00D  FFF3         	movff	??_timer_overflow_isr+6,prodl
  2964   000076  C00C  FFDA         	movff	??_timer_overflow_isr+5,fsr2h
  2965   00007A  C00B  FFD9         	movff	??_timer_overflow_isr+4,fsr2l
  2966   00007E  C00A  FFE2         	movff	??_timer_overflow_isr+3,fsr1h
  2967   000082  C009  FFE1         	movff	??_timer_overflow_isr+2,fsr1l
  2968   000086  C008  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  2969   00008A  C007  FFFA         	movff	??_timer_overflow_isr,pclath
  2970   00008E  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2971   000090  0011               	retfie		f
  2972   000092                     __end_of_timer_overflow_isr:
  2973                           	callstack 0
  2974                           
  2975 ;; *************** function _Callbacks_Manager *****************
  2976 ;; Defined at:
  2977 ;;		line 24 in file "SystemCallbacks.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  callbacks       1    5[COMRAM] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2991 ;;      Params:         0       0       0       0
  2992 ;;      Locals:         1       0       0       0
  2993 ;;      Temps:          4       0       0       0
  2994 ;;      Totals:         5       0       0       0
  2995 ;;Total ram usage:        5 bytes
  2996 ;; Hardware stack levels used: 1
  2997 ;; Hardware stack levels required when called: 2
  2998 ;; This function calls:
  2999 ;;		_Check_Moisture_cb
  3000 ;;		_Watering_Done_cb
  3001 ;; This function is called by:
  3002 ;;		_timer_overflow_isr
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text33
  3007   00053C                     __ptext33:
  3008                           	callstack 0
  3009   00053C                     _Callbacks_Manager:
  3010                           	callstack 23
  3011   00053C                     
  3012                           ;SystemCallbacks.c: 26:     for (U8 callbacks = 0; callbacks < (5); callbacks++)
  3013   00053C  0E00               	movlw	0
  3014   00053E  6E06               	movwf	Callbacks_Manager@callbacks^0,c
  3015   000540                     i2l1571:
  3016                           
  3017                           ;SystemCallbacks.c: 27:     {;SystemCallbacks.c: 28:         (registered_callbacks[callb
      +                          acks].count)++;
  3018   000540  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3019   000542  0D08               	mullw	8
  3020   000544  0E65               	movlw	low (_registered_callbacks+5)
  3021   000546  24F3               	addwf	243,w,c
  3022   000548  6ED9               	movwf	fsr2l,c
  3023   00054A  0E00               	movlw	high (_registered_callbacks+5)
  3024   00054C  20F4               	addwfc	prodh,w,c
  3025   00054E  6EDA               	movwf	fsr2h,c
  3026   000550  2ADE               	incf	postinc2,f,c
  3027   000552  0E00               	movlw	0
  3028   000554  22DD               	addwfc	postdec2,f,c
  3029   000556                     
  3030                           ;SystemCallbacks.c: 29:         if(registered_callbacks[callbacks].count >=
  3031   000556  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3032   000558  0D08               	mullw	8
  3033   00055A  0E60               	movlw	low _registered_callbacks
  3034   00055C  24F3               	addwf	243,w,c
  3035   00055E  6ED9               	movwf	fsr2l,c
  3036   000560  0E00               	movlw	high _registered_callbacks
  3037   000562  20F4               	addwfc	prodh,w,c
  3038   000564  6EDA               	movwf	fsr2h,c
  3039   000566  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3040   000568  0D08               	mullw	8
  3041   00056A  0E65               	movlw	low (_registered_callbacks+5)
  3042   00056C  24F3               	addwf	243,w,c
  3043   00056E  6EE1               	movwf	fsr1l,c
  3044   000570  0E00               	movlw	high (_registered_callbacks+5)
  3045   000572  20F4               	addwfc	prodh,w,c
  3046   000574  6EE2               	movwf	fsr1h,c
  3047   000576  50DE               	movf	postinc2,w,c
  3048   000578  5CE6               	subwf	postinc1,w,c
  3049   00057A  50DE               	movf	postinc2,w,c
  3050   00057C  58E6               	subwfb	postinc1,w,c
  3051   00057E  A0D8               	btfss	status,0,c
  3052   000580  EFC4  F002         	goto	i2u52_41
  3053   000584  EFC6  F002         	goto	i2u52_40
  3054   000588                     i2u52_41:
  3055   000588  EFF8  F002         	goto	i2l1581
  3056   00058C                     i2u52_40:
  3057   00058C                     
  3058                           ;SystemCallbacks.c: 31:         {;SystemCallbacks.c: 32:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  3059   00058C  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3060   00058E  0D08               	mullw	8
  3061   000590  0E62               	movlw	low (_registered_callbacks+2)
  3062   000592  24F3               	addwf	243,w,c
  3063   000594  6ED9               	movwf	fsr2l,c
  3064   000596  0E00               	movlw	high (_registered_callbacks+2)
  3065   000598  20F4               	addwfc	prodh,w,c
  3066   00059A  6EDA               	movwf	fsr2h,c
  3067   00059C  50DE               	movf	postinc2,w,c
  3068   00059E  10DE               	iorwf	postinc2,w,c
  3069   0005A0  B4D8               	btfsc	status,2,c
  3070   0005A2  EFD5  F002         	goto	i2u53_41
  3071   0005A6  EFD7  F002         	goto	i2u53_40
  3072   0005AA                     i2u53_41:
  3073   0005AA  EFF8  F002         	goto	i2l1581
  3074   0005AE                     i2u53_40:
  3075   0005AE                     
  3076                           ;SystemCallbacks.c: 33:             {;SystemCallbacks.c: 34:                 registered_
      +                          callbacks[callbacks].count = 0;
  3077   0005AE  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3078   0005B0  0D08               	mullw	8
  3079   0005B2  0E65               	movlw	low (_registered_callbacks+5)
  3080   0005B4  24F3               	addwf	243,w,c
  3081   0005B6  6ED9               	movwf	fsr2l,c
  3082   0005B8  0E00               	movlw	high (_registered_callbacks+5)
  3083   0005BA  20F4               	addwfc	prodh,w,c
  3084   0005BC  6EDA               	movwf	fsr2h,c
  3085   0005BE  0E00               	movlw	0
  3086   0005C0  6EDE               	movwf	postinc2,c
  3087   0005C2  0E00               	movlw	0
  3088   0005C4  6EDD               	movwf	postdec2,c
  3089   0005C6                     
  3090                           ;SystemCallbacks.c: 35:                 registered_callbacks[callbacks].callback();
  3091   0005C6  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3092   0005C8  0D08               	mullw	8
  3093   0005CA  0E62               	movlw	low (_registered_callbacks+2)
  3094   0005CC  24F3               	addwf	243,w,c
  3095   0005CE  6ED9               	movwf	fsr2l,c
  3096   0005D0  0E00               	movlw	high (_registered_callbacks+2)
  3097   0005D2  20F4               	addwfc	prodh,w,c
  3098   0005D4  6EDA               	movwf	fsr2h,c
  3099   0005D6  D802               	call	i2u54_48
  3100   0005D8  EFF8  F002         	goto	i2u54_49
  3101   0005DC                     i2u54_48:
  3102   0005DC  0005               	push	
  3103   0005DE  6EFA               	movwf	pclath,c
  3104   0005E0  50DE               	movf	postinc2,w,c
  3105   0005E2  6EFD               	movwf	tosl,c
  3106   0005E4  50DE               	movf	postinc2,w,c
  3107   0005E6  6EFE               	movwf	tosh,c
  3108   0005E8  50F8               	movf	tblptru,w,c
  3109   0005EA  6EFF               	movwf	tosu,c
  3110   0005EC  50FA               	movf	pclath,w,c
  3111   0005EE  0012               	return		;indir
  3112   0005F0                     i2u54_49:
  3113   0005F0                     i2l1581:
  3114                           
  3115                           ;SystemCallbacks.c: 38:     }
  3116   0005F0  2A06               	incf	Callbacks_Manager@callbacks^0,f,c
  3117   0005F2  0E04               	movlw	4
  3118   0005F4  6406               	cpfsgt	Callbacks_Manager@callbacks^0,c
  3119   0005F6  EFFF  F002         	goto	i2u55_41
  3120   0005FA  EF01  F003         	goto	i2u55_40
  3121   0005FE                     i2u55_41:
  3122   0005FE  EFA0  F002         	goto	i2l1571
  3123   000602                     i2u55_40:
  3124   000602  0012               	return		;funcret
  3125   000604                     __end_of_Callbacks_Manager:
  3126                           	callstack 0
  3127                           
  3128 ;; *************** function _Check_Moisture_cb *****************
  3129 ;; Defined at:
  3130 ;;		line 16 in file "System_FSM.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      void 
  3137 ;; Registers used:
  3138 ;;		wreg, status,2, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3144 ;;      Params:         0       0       0       0
  3145 ;;      Locals:         0       0       0       0
  3146 ;;      Temps:          0       0       0       0
  3147 ;;      Totals:         0       0       0       0
  3148 ;;Total ram usage:        0 bytes
  3149 ;; Hardware stack levels used: 1
  3150 ;; Hardware stack levels required when called: 1
  3151 ;; This function calls:
  3152 ;;		i2_get_current_state
  3153 ;;		i2_set_state
  3154 ;; This function is called by:
  3155 ;;		_Callbacks_Manager
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text34
  3160   0009E2                     __ptext34:
  3161                           	callstack 0
  3162   0009E2                     _Check_Moisture_cb:
  3163                           	callstack 23
  3164   0009E2                     
  3165                           ;System_FSM.c: 21:     if(get_current_state() != WATER_PLANTS)
  3166   0009E2  EC85  F005         	call	i2_get_current_state	;wreg free
  3167   0009E6  0A02               	xorlw	2
  3168   0009E8  B4D8               	btfsc	status,2,c
  3169   0009EA  EFF9  F004         	goto	i2u40_41
  3170   0009EE  EFFB  F004         	goto	i2u40_40
  3171   0009F2                     i2u40_41:
  3172   0009F2  EFFE  F004         	goto	i2l198
  3173   0009F6                     i2u40_40:
  3174   0009F6                     
  3175                           ;System_FSM.c: 22:     {;System_FSM.c: 23:       set_state(CHECK_MOISTURE);
  3176   0009F6  0E03               	movlw	3
  3177   0009F8  EC73  F005         	call	i2_set_state
  3178   0009FC                     i2l198:
  3179   0009FC  0012               	return		;funcret
  3180   0009FE                     __end_of_Check_Moisture_cb:
  3181                           	callstack 0
  3182                           
  3183 ;; *************** function _Watering_Done_cb *****************
  3184 ;; Defined at:
  3185 ;;		line 27 in file "System_FSM.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3199 ;;      Params:         0       0       0       0
  3200 ;;      Locals:         0       0       0       0
  3201 ;;      Temps:          0       0       0       0
  3202 ;;      Totals:         0       0       0       0
  3203 ;;Total ram usage:        0 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; Hardware stack levels required when called: 1
  3206 ;; This function calls:
  3207 ;;		i2_get_current_state
  3208 ;;		i2_set_state
  3209 ;; This function is called by:
  3210 ;;		_Callbacks_Manager
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text35
  3215   0009FE                     __ptext35:
  3216                           	callstack 0
  3217   0009FE                     _Watering_Done_cb:
  3218                           	callstack 23
  3219   0009FE                     
  3220                           ;System_FSM.c: 30:     if(get_current_state() == WATER_PLANTS)
  3221   0009FE  EC85  F005         	call	i2_get_current_state	;wreg free
  3222   000A02  0A02               	xorlw	2
  3223   000A04  A4D8               	btfss	status,2,c
  3224   000A06  EF07  F005         	goto	i2u41_41
  3225   000A0A  EF09  F005         	goto	i2u41_40
  3226   000A0E                     i2u41_41:
  3227   000A0E  EF0C  F005         	goto	i2l202
  3228   000A12                     i2u41_40:
  3229   000A12                     
  3230                           ;System_FSM.c: 31:     {;System_FSM.c: 32:         set_state(IDLE_STATE);
  3231   000A12  0E01               	movlw	1
  3232   000A14  EC73  F005         	call	i2_set_state
  3233   000A18                     i2l202:
  3234   000A18  0012               	return		;funcret
  3235   000A1A                     __end_of_Watering_Done_cb:
  3236                           	callstack 0
  3237                           
  3238 ;; *************** function i2_set_state *****************
  3239 ;; Defined at:
  3240 ;;		line 9 in file "FSM_states.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  state_to_set    1    wreg     enum E2
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  state_to_set    1    0[COMRAM] enum E2
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3254 ;;      Params:         0       0       0       0
  3255 ;;      Locals:         1       0       0       0
  3256 ;;      Temps:          0       0       0       0
  3257 ;;      Totals:         1       0       0       0
  3258 ;;Total ram usage:        1 bytes
  3259 ;; Hardware stack levels used: 1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		_Check_Moisture_cb
  3264 ;;		_Watering_Done_cb
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text36
  3269   000AE6                     __ptext36:
  3270                           	callstack 0
  3271   000AE6                     i2_set_state:
  3272                           	callstack 23
  3273                           
  3274                           ;incstack = 0
  3275                           ;i2set_state@state_to_set stored from wreg
  3276   000AE6  6E01               	movwf	i2set_state@state_to_set^0,c
  3277   000AE8                     
  3278                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  3279   000AE8  C001  F045         	movff	i2set_state@state_to_set,_FSM_state
  3280   000AEC  0012               	return		;funcret
  3281   000AEE                     __end_ofi2_set_state:
  3282                           	callstack 0
  3283                           
  3284 ;; *************** function i2_get_current_state *****************
  3285 ;; Defined at:
  3286 ;;		line 5 in file "FSM_states.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      enum E2
  3293 ;; Registers used:
  3294 ;;		wreg, status,2
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3300 ;;      Params:         0       0       0       0
  3301 ;;      Locals:         0       0       0       0
  3302 ;;      Temps:          0       0       0       0
  3303 ;;      Totals:         0       0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used: 1
  3306 ;; This function calls:
  3307 ;;		Nothing
  3308 ;; This function is called by:
  3309 ;;		_Check_Moisture_cb
  3310 ;;		_Watering_Done_cb
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text37
  3315   000B0A                     __ptext37:
  3316                           	callstack 0
  3317   000B0A                     i2_get_current_state:
  3318                           	callstack 23
  3319   000B0A                     
  3320                           ;FSM_states.c: 7:     return FSM_state;
  3321   000B0A  5045               	movf	_FSM_state^0,w,c
  3322   000B0C  0012               	return		;funcret
  3323   000B0E                     __end_ofi2_get_current_state:
  3324                           	callstack 0
  3325                           
  3326                           	psect	text38
  3327   000000                     __ptext38:
  3328                           	callstack 0
  3329   000000                     
  3330                           	psect	rparam
  3331   000000                     
  3332                           	psect	temp
  3333   000046                     btemp:
  3334                           	callstack 0
  3335   000046                     	ds	1
  3336   000000                     int$flags	set	btemp
  3337   000000                     wtemp8	set	btemp+1
  3338   000000                     ttemp5	set	btemp+1
  3339   000000                     ttemp6	set	btemp+4
  3340   000000                     ttemp7	set	btemp+8
  3341                           
  3342                           	psect	idloc
  3343                           
  3344                           ;Config register IDLOC0 @ 0x200000
  3345                           ;	unspecified, using default values
  3346   200000                     	org	2097152
  3347   200000  FF                 	db	255
  3348                           
  3349                           ;Config register IDLOC1 @ 0x200001
  3350                           ;	unspecified, using default values
  3351   200001                     	org	2097153
  3352   200001  FF                 	db	255
  3353                           
  3354                           ;Config register IDLOC2 @ 0x200002
  3355                           ;	unspecified, using default values
  3356   200002                     	org	2097154
  3357   200002  FF                 	db	255
  3358                           
  3359                           ;Config register IDLOC3 @ 0x200003
  3360                           ;	unspecified, using default values
  3361   200003                     	org	2097155
  3362   200003  FF                 	db	255
  3363                           
  3364                           ;Config register IDLOC4 @ 0x200004
  3365                           ;	unspecified, using default values
  3366   200004                     	org	2097156
  3367   200004  FF                 	db	255
  3368                           
  3369                           ;Config register IDLOC5 @ 0x200005
  3370                           ;	unspecified, using default values
  3371   200005                     	org	2097157
  3372   200005  FF                 	db	255
  3373                           
  3374                           ;Config register IDLOC6 @ 0x200006
  3375                           ;	unspecified, using default values
  3376   200006                     	org	2097158
  3377   200006  FF                 	db	255
  3378                           
  3379                           ;Config register IDLOC7 @ 0x200007
  3380                           ;	unspecified, using default values
  3381   200007                     	org	2097159
  3382   200007  FF                 	db	255
  3383                           
  3384                           	psect	config
  3385                           
  3386                           ; Padding undefined space
  3387   300000                     	org	3145728
  3388   300000  FF                 	db	255
  3389                           
  3390                           ;Config register CONFIG1H @ 0x300001
  3391                           ;	Oscillator Selection bits
  3392                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  3393                           ;	Fail-Safe Clock Monitor Enable bit
  3394                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3395                           ;	Internal External Oscillator Switchover bit
  3396                           ;	IESO = ON, Internal External Switchover mode enabled
  3397   300001                     	org	3145729
  3398   300001  C8                 	db	200
  3399                           
  3400                           ;Config register CONFIG2L @ 0x300002
  3401                           ;	Power-up Timer Enable bit
  3402                           ;	PWRTEN = OFF, PWRT disabled
  3403                           ;	Brown-out Reset Enable bits
  3404                           ;	BOREN = OFF, Brown-out Reset disabled
  3405                           ;	Brown Out Reset Voltage bits
  3406                           ;	BORV = 0x3, unprogrammed default
  3407   300002                     	org	3145730
  3408   300002  0D                 	db	13
  3409                           
  3410                           ;Config register CONFIG2H @ 0x300003
  3411                           ;	Watchdog Timer Enable bit
  3412                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3413                           ;	Watchdog Timer Postscale Select bits
  3414                           ;	WDPS = 32768, 1:32768
  3415                           ;	Watchdog Timer Window Enable bit
  3416                           ;	WINEN = OFF, WDT window disabled
  3417   300003                     	org	3145731
  3418   300003  3E                 	db	62
  3419                           
  3420                           ;Config register CONFIG3L @ 0x300004
  3421                           ;	PWM output pins Reset state control
  3422                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  3423                           ;	Low-Side Transistors Polarity
  3424                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  3425                           ;	High-Side Transistors Polarity
  3426                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  3427                           ;	Timer1 Oscillator MUX
  3428                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  3429   300004                     	org	3145732
  3430   300004  3C                 	db	60
  3431                           
  3432                           ;Config register CONFIG3H @ 0x300005
  3433                           ;	FLTA MUX bit
  3434                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  3435                           ;	SSP I/O MUX bit
  3436                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  3437                           ;	PWM4 MUX bit
  3438                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  3439                           ;	TMR0/T5CKI External clock MUX bit
  3440                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  3441                           ;	MCLR Pin Enable bit
  3442                           ;	MCLRE = ON, Enabled
  3443   300005                     	org	3145733
  3444   300005  9D                 	db	157
  3445                           
  3446                           ;Config register CONFIG4L @ 0x300006
  3447                           ;	Stack Full/Underflow Reset Enable bit
  3448                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3449                           ;	Low-Voltage ICSP Enable bit
  3450                           ;	LVP = OFF, Low-voltage ICSP disabled
  3451                           ;	Background Debugger Enable bit
  3452                           ;	DEBUG = 0x1, unprogrammed default
  3453   300006                     	org	3145734
  3454   300006  81                 	db	129
  3455                           
  3456                           ; Padding undefined space
  3457   300007                     	org	3145735
  3458   300007  FF                 	db	255
  3459                           
  3460                           ;Config register CONFIG5L @ 0x300008
  3461                           ;	Code Protection bit
  3462                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  3463                           ;	Code Protection bit
  3464                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  3465   300008                     	org	3145736
  3466   300008  0F                 	db	15
  3467                           
  3468                           ;Config register CONFIG5H @ 0x300009
  3469                           ;	Boot Block Code Protection bit
  3470                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3471                           ;	Data EEPROM Code Protection bit
  3472                           ;	CPD = OFF, Data EEPROM not code-protected
  3473   300009                     	org	3145737
  3474   300009  C0                 	db	192
  3475                           
  3476                           ;Config register CONFIG6L @ 0x30000A
  3477                           ;	Write Protection bit
  3478                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  3479                           ;	Write Protection bit
  3480                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  3481   30000A                     	org	3145738
  3482   30000A  0F                 	db	15
  3483                           
  3484                           ;Config register CONFIG6H @ 0x30000B
  3485                           ;	Configuration Register Write Protection bit
  3486                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3487                           ;	Boot Block Write Protection bit
  3488                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3489                           ;	Data EEPROM Write Protection bit
  3490                           ;	WRTD = OFF, Data EEPROM not write-protected
  3491   30000B                     	org	3145739
  3492   30000B  E0                 	db	224
  3493                           
  3494                           ;Config register CONFIG7L @ 0x30000C
  3495                           ;	Table Read Protection bit
  3496                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  3497                           ;	Table Read Protection bit
  3498                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  3499   30000C                     	org	3145740
  3500   30000C  0F                 	db	15
  3501                           
  3502                           ;Config register CONFIG7H @ 0x30000D
  3503                           ;	Boot Block Table Read Protection bit
  3504                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3505   30000D                     	org	3145741
  3506   30000D  40                 	db	64
  3507                           tosu	equ	0xFFF
  3508                           tosh	equ	0xFFE
  3509                           tosl	equ	0xFFD
  3510                           stkptr	equ	0xFFC
  3511                           pclatu	equ	0xFFB
  3512                           pclath	equ	0xFFA
  3513                           pcl	equ	0xFF9
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           indf0	equ	0xFEF
  3521                           postinc0	equ	0xFEE
  3522                           postdec0	equ	0xFED
  3523                           preinc0	equ	0xFEC
  3524                           plusw0	equ	0xFEB
  3525                           fsr0h	equ	0xFEA
  3526                           fsr0l	equ	0xFE9
  3527                           wreg	equ	0xFE8
  3528                           indf1	equ	0xFE7
  3529                           postinc1	equ	0xFE6
  3530                           postdec1	equ	0xFE5
  3531                           preinc1	equ	0xFE4
  3532                           plusw1	equ	0xFE3
  3533                           fsr1h	equ	0xFE2
  3534                           fsr1l	equ	0xFE1
  3535                           bsr	equ	0xFE0
  3536                           indf2	equ	0xFDF
  3537                           postinc2	equ	0xFDE
  3538                           postdec2	equ	0xFDD
  3539                           preinc2	equ	0xFDC
  3540                           plusw2	equ	0xFDB
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8

Data Sizes:
    Strings     90
    Constant    0
    Data        16
    BSS         48
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      69
    BANK0           160      0      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Register_Callback@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    Reset_Counter@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Reset_Counter@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    WateringDoneCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2884.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    MoistureCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    S760$callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2881.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[19]), STR_4(CODE[20]), STR_3(CODE[15]), STR_2(CODE[19]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_LCD_Write_String
    _SMS_Set_State->_set_state
    _SMS_Read_Moisture_Value->_ADC_Read
    _Register_Callback->_Reset_Counter
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager
    _Watering_Done_cb->i2_set_state
    _Check_Moisture_cb->i2_set_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2265
                          _FSM_begin
                        _Timer0_init
                        _Timer0_stop
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _Timer0_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                           20    20      0    2250
                                             24 COMRAM    20    20      0
                     _Callbacks_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                  _Register_Callback
            _SMS_Read_Moisture_Value
                      _SMS_Set_State
                           _SMS_init
                       _Timer0_start
                     _WaterPump_Init
                      _WaterPump_OFF
                       _WaterPump_ON
       _checking_moisture_status_led
                  _get_current_state
                    _idle_status_led
                          _init_leds
                          _set_state
                _watering_status_led
 ---------------------------------------------------------------------------------
 (2) _watering_status_led                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_leds                                            2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _idle_status_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checking_moisture_status_led                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_ON                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_OFF                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_Set_State                                        2     0      2     157
                                             15 COMRAM     2     0      2
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_Read_Moisture_Value                              4     2      2      23
                                             16 COMRAM     4     2      2
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             14 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Register_Callback                                    4     2      2     338
                                             16 COMRAM     4     2      2
                      _Reset_Counter
 ---------------------------------------------------------------------------------
 (3) _Reset_Counter                                        2     0      2      98
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2     590
                                             18 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1     725
                                             16 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                             16 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              1     1      0      75
                                             15 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_DATA                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Callbacks_Init                                       1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   8     8      0     222
                                              6 COMRAM     8     8      0
                  _Callbacks_Manager
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     222
                                              1 COMRAM     5     5      0
                  _Check_Moisture_cb *
                   _Watering_Done_cb *
 ---------------------------------------------------------------------------------
 (7) _Watering_Done_cb                                     0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (7) _Check_Moisture_cb                                    0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (8) i2_set_state                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_get_current_state                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _Callbacks_Init
     _LCD_Clear
       _LCD_CMD
         _LCD_DATA
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _LCD_Set_Cursor
       _LCD_CMD
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_DATA
     _Register_Callback
       _Reset_Counter
     _SMS_Read_Moisture_Value
       _ADC_Read
         _ADC_in_progress
         _ADC_start
     _SMS_Set_State
       _set_state
     _SMS_init
       _ADC_init
         _ADC_stop
     _Timer0_start
     _WaterPump_Init
     _WaterPump_OFF
     _WaterPump_ON
     _checking_moisture_status_led
     _get_current_state
     _idle_status_led
     _init_leds
     _set_state
     _watering_status_led
   _Timer0_init
   _Timer0_stop
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager
     _Check_Moisture_cb *
       i2_get_current_state
       i2_set_state
     _Watering_Done_cb *
       i2_get_current_state
       i2_set_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      45       1       73.4%
BITBIGSFRllll       21      0       0      19        0.0%
BITBIGSFRlhl        1E      0       0      15        0.0%
BITBIGSFRhhhl       19      0       0      10        0.0%
BITBIGSFRhhhh        D      0       0       9        0.0%
BITBIGSFRhhlll       B      0       0      13        0.0%
BITBIGSFRlllhl       9      0       0      18        0.0%
BITBIGSFRlhh         7      0       0      14        0.0%
BITBIGSFRlllhh       6      0       0      17        0.0%
BITBIGSFRllh         3      0       0      16        0.0%
BITBIGSFRhhllh       2      0       0      12        0.0%
BITBIGSFRhhlh        1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6D      20        0.0%
DATA                 0      0      6D      22        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 28 10:37:23 2023

                                  l22 0B08                                    l33 09B4  
                                  l25 09E0                                    l34 09C4  
                                  l19 0AF8                                    l51 0AFC  
                                  l28 0A86                                    l45 0A46  
                                  l48 0B04                                    l81 07CC  
                                  l66 06F4                                    l83 07E2  
                                  l92 0726                                    l85 07F8  
                                  l69 0AA4                                    l78 0A30  
                                  l94 0756                                    l87 080E  
                                  l89 0810                                    l97 08FA  
                                  u10 0A84                                    u11 0A7E  
                                  u20 07C6                                    u21 07C2  
                                  u30 07DC                                    u31 07D8  
                                  u40 07F2                                    u16 0A86  
                                  u41 07EE                                    u50 0808  
                                  u51 0804                   __end_ofi2_set_state 0AEE  
                         _pump_status 0043                                   l103 0866  
                                 l302 0ACC                                   l151 0B00  
                                 l223 053A                                   l232 08B2  
                                 l136 0AF2                                   l305 0AD4  
                                 l250 067C                                   l154 0AE4  
                                 l146 07B4                                   l139 0A5C  
                                 l308 0ADC                                   l245 0A72  
                                 _ADC 0041                                   l272 0AAE  
                                 l266 0970                                   l275 0AC2  
                                 l269 0AB8                                   l991 0B06  
                                 l993 0A74                                   l997 07B8  
                                 l989 0AF4                                   l999 07C6  
                                 u330 09B4                                   u331 09B0  
                                 u420 08B2                                   u340 0708  
                                 u500 047E                                   u421 08AE  
                                 u341 0704                                   u501 047A  
                                 u350 0738                                   u430 0614  
                                 u510 04DC                                   u351 0734  
                                 u431 0610                                   u511 04D8  
                                 u360 0866                                   u440 0632  
                                 u361 0862                                   u441 062E  
                                 u450 064C                                   u370 076E  
                                 u451 0648                                   u371 076A  
                                 u380 078E                                   u461 0666  
                                 u381 078A                                   u390 07A4  
                                 u391 07A0                                   u607 04AE  
                                 u471 0376                                   u617 095C  
                                 u481 0388                                   u490 0440  
                                 u707 0A28                                   u627 08D0  
                                 u491 043C                                   u637 08DA  
                                 u647 08EA                                   u657 08F4  
                                 u667 0692                                   u677 069E  
                                 u597 03EA                                   u687 06B0  
                                 u697 06C0                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                     __end_of_LCD_CMD 0A32                        _LCD_Set_Cursor 06F6  
                                l1001 07CE                                  l1011 0808  
                                l1003 07DC                                  l1005 07E4  
                                l1021 09D2                                  l1013 09C6  
                                l1007 07F2                                  l1023 09D4  
                                l1015 09CA                                  l1009 07FA  
                                l1041 0A26                                  l1025 09D8  
                                l1017 09CE                                  l1201 0AD8  
                                l1043 0A2E                                  l1035 0A1C  
                                l1051 08CC                                  l1027 09DA  
                                l1019 09D0                                  l1123 0AEE  
                                l1211 0ABA                                  l1203 0AB0  
                                l1037 0A1E                                  l1061 08E6  
                                l1053 08CE                                  l1045 08B6  
                                l1029 09DE                                  l1205 0ACE  
                                l1213 0A32                                  l1039 0A24  
                                l1063 08E8                                  l1055 08D6  
                                l1047 08C2                                  l1207 0AD0  
                                l1143 0AFE                                  l1215 0A3E  
                                l1081 067E                                  l1401 0708  
                                l1065 08F0                                  l1057 08D8  
                                l1049 08C4                                  l1209 0AA6  
                                l1217 0AFA                                  l1091 069C  
                                l1083 0682                                  l1411 0750  
                                l1403 071A                                  l1067 08F2  
                                l1059 08E0                                  l1171 0AC8  
                                l1093 06A4                                  l1085 0684  
                                l1405 0720                                  l1413 0812  
                                l1421 0A48                                  l1069 0AE0  
                                l1501 03CA                                  l1095 06B8  
                                l1087 0686                                  l1407 0738  
                                l1415 081E                                  l1423 0A54  
                                l1431 0778                                  l1079 0B02  
                                l1191 0968                                  l1511 0406  
                                l1503 03D4                                  l1097 06BE  
                                l1089 068C                                  l1409 074A  
                                l1417 083A                                  l1433 078E  
                                l1169 0AC4                                  l1193 096A  
                                l1521 042C                                  l1513 040A  
                                l1505 03E0                                  l1601 098A  
                                l1099 0A98                                  l1419 083E  
                                l1435 07A4                                  l1427 0758  
                                l1195 096C                                  l1187 0942  
                                l1531 0466                                  l1523 0444  
                                l1515 0414                                  l1507 03F8  
                                l1603 0990                                  l1453 086C  
                                l1461 0604                                  l1437 07AE  
                                l1429 076E                                  l1197 096E  
                                l1189 0952                                  l1541 049C  
                                l1533 046A                                  l1525 0448  
                                l1517 0420                                  l1509 03FC  
                                l1455 089C                                  l1447 0868  
                                l1391 0A5E                                  l1471 067A  
                                l1463 0614                                  l1199 0AD6  
                                l1551 04DC                                  l1543 04A0  
                                l1535 0482                                  l1527 044C  
                                l1519 0428                                  l1457 08A0  
                                l1465 0632                                  l1553 04E4  
                                l1545 04A4                                  l1537 0486  
                                l1529 0456                                  l1481 0368  
                                l1459 08A2                                  l1467 064C  
                                l1387 099C                                  l1555 04F4  
                                l1547 04BA                                  l1539 0490  
                                l1491 03A8                                  l1483 036C  
                                l1475 035C                                  l1469 066E  
                                l1389 09A0                                  l1629 0514  
                                l1549 04C6                                  l1493 03AC  
                                l1485 037E                                  l1477 0360  
                                l1399 06F8                                  l1495 03B0  
                                l1487 0390                                  l1479 0364  
                                l1559 04FE                                  l1591 097E  
                                l1497 03B4                                  l1489 039C  
                                l1593 0980                                  l1585 0972  
                                l1499 03BE                                  l1595 0982  
                                l1587 0978                   LCD_Write_String@str 0013  
                                l1597 0986                                  l1589 097C  
                                l1599 0988                                  STR_1 033B  
                                STR_2 0315                                  STR_3 034C  
                                STR_4 0301                                  STR_5 0328  
                                _LATC 000F8B                                  _LATD 000F8C  
               __end_of_Reset_Counter 0A74                     ?_LCD_Write_String 0013  
                                _main 0972                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  fsr1l 000FE1  
                                fsr2l 000FD9                                  btemp 0046  
                    __end_of_ADC_Read 09C6                                  prodh 000FF4  
                                prodl 000FF3                                  start 0092  
                  ??_LCD_Write_String 0015                      __end_of_ADC_init 09E2  
                    __end_of_ADC_stop 0B0A                          ___param_bank 000000  
                   FSM_begin@moisture 002B            Callbacks_Manager@callbacks 0006  
                    __end_of_LCD_DATA 0812                      __end_of_LCD_Init 06F6  
            ?_SMS_Read_Moisture_Value 0011                                 ?_main 0001  
                       _SMS_Set_State 0758                                 i2l202 0A18  
                               i2l151 0B0C                                 i2l154 0AEC  
                               i2l242 0602                                 i2l293 006E  
                               i2l198 09FC                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
              __end_of_LCD_Set_Cursor 0758                                 pclath 000FFA  
                               pclatu 000FFB                                 tablat 000FF5  
                    __end_of_SMS_init 0AF4                                 plusw1 000FE3  
                               plusw2 000FDB                                 ttemp5 0047  
                               ttemp6 004A                                 ttemp7 004E  
                               status 000FD8                                 wtemp8 0047  
                   __end_of_ADC_start 0AFA                        _LCD_Write_Char 08B4  
                     __initialization 08FC                          __end_of_main 099C  
                         i2_set_state 0AE6                   _watering_status_led 0AA6  
                      ?_SMS_Set_State 0010                                ??_main 002D  
             i2set_state@state_to_set 0001                     _Check_Moisture_cb 09E2  
                   __end_of_LCD_Clear 0AA6                         __activetblptr 000002  
                           ??_LCD_CMD 0010                    ?_Check_Moisture_cb 0001  
                     ?_LCD_Set_Cursor 0011                  ?_watering_status_led 0001  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                 ??_Check_Moisture_cb 0002                                i2l1441 09F6  
                              i2l1443 09FE                                i2l1611 0042  
                              i2l1445 0A12                                i2l1621 006A  
                              i2l1613 0052                                i2l1605 002A  
                              i2l1439 09E2                                i2l1623 006C  
                              i2l1615 0056                                i2l1607 002E  
                              i2l1393 0B0A                                i2l1617 0064  
                              i2l1609 003E                                i2l1571 0540  
                              i2l1619 0068                                i2l1397 0AE8  
                              i2l1581 05F0                                i2l1573 0556  
                              i2l1565 053C                                i2l1583 05F2  
                              i2l1575 058C                                i2l1577 05AE  
                              i2l1579 05C6                     __end_of_FSM_begin 053C  
              __end_of_LCD_Write_Char 08FC                         ??_Timer0_init 000F  
     __end_of_SMS_Read_Moisture_Value 0A5E                         ??_Timer0_stop 000F  
           __end_of_Check_Moisture_cb 09FE                                clear_0 0922  
                              clear_1 092E                                isa$std 000001  
                   _Callbacks_Manager 053C                  _registered_callbacks 0060  
                        __pdataCOMRAM 002D                             ?_ADC_Read 000F  
                  ?_Callbacks_Manager 0001                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                             ?_ADC_init 0001  
                           ?_ADC_stop 0001                 ??_watering_status_led 000F  
      FSM_begin@WateringDoneCB_Config 0023                       LCD_Set_Cursor@c 0011  
                     LCD_Set_Cursor@r 0012                   ??_Callbacks_Manager 0002  
                           ?_LCD_DATA 0001                            __accesstop 0060  
             __end_of__initialization 0934                             ?_LCD_Init 0001  
                    _Watering_Done_cb 09FE                         ___rparam_used 000001  
                     ?_LCD_Write_Char 0001                        __pcstackCOMRAM 0001  
               __end_of_WaterPump_OFF 0ADE                       ??_SMS_Set_State 0012  
           __end_of_Callbacks_Manager 0604                   __end_of_Timer0_init 0A48  
                 __end_of_Timer0_stop 0AFE     _tmr0Counter@SystemInterrupts$F930 003D  
          __end_of_timer_overflow_isr 0092                             ?_SMS_init 0001  
                          ??_ADC_Read 0011                            ??_ADC_init 000F  
                          ??_ADC_stop 000F  __end_of_checking_moisture_status_led 0AC4  
        _checking_moisture_status_led 0ABA                            __pbssBANK0 0060  
                          ??_LCD_DATA 000F            FSM_begin@MoistureCB_Config 001B  
                          ??_LCD_Init 0011                            __pnvCOMRAM 0045  
                       ?_Timer0_start 0001                            ??_SMS_init 000F  
                             _LCD_CMD 0A1A                     ??_ADC_in_progress 000F  
                             i2u40_40 09F6                               i2u40_41 09F2  
                             i2u41_40 0A12                               i2u41_41 0A0E  
                             i2u52_40 058C                               i2u52_41 0588  
                             i2u53_40 05AE                               i2u53_41 05AA  
                             i2u55_40 0602                               i2u54_48 05DC  
                             i2u55_41 05FE                               i2u54_49 05F0  
                             i2u56_40 003E                               i2u56_41 003A  
                             i2u57_40 0052                               i2u57_41 004E  
                             i2u58_40 0064                               i2u58_41 0060  
       ?_checking_moisture_status_led 0001                             _ADCHSbits 000F99  
                             __Hparam 0000                               __Lparam 0000  
                      ??_Timer0_start 000F                           _Timer0_init 0A32  
                         _Timer0_stop 0AFA                          ?i2_set_state 0001  
                           _ADC_start 0AF4                         ?_WaterPump_ON 0001  
                        __psmallconst 0300                               __pcinit 08FC  
                             __ramtop 0300                      ??_LCD_Set_Cursor 0012  
                             __ptext0 0972                               __ptext1 0AFA  
                             __ptext2 0A32                               __ptext3 035C  
                             __ptext4 0AA6                               __ptext5 0942  
                             __ptext6 0AB0                               __ptext7 0AFE  
                             __ptext8 0ABA                               __ptext9 0ACE  
                           _T0CONbits 000FD5                     __end_of_init_leds 0972  
             Register_Callback@config 0011                             _LCD_Clear 0A98  
                end_of_initialization 0934                     ??_idle_status_led 000F  
                       __Lmediumconst 0000                     __end_of_set_state 0AE6  
                           _FSM_begin 035C                        ??_WaterPump_ON 000F  
                           _FSM_state 0045                   fp__Watering_Done_cb 0000  
                          ?_ADC_start 0001                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
                           _PORTBbits 000F81              __end_of_Watering_Done_cb 0A1A  
                          LCD_CMD@CMD 0010                        _WaterPump_Init 0AC4  
                           _TRISBbits 000F93                            ?_LCD_Clear 0001  
                   LCD_Write_String@i 0017                      ??_LCD_Write_Char 0010  
              Callbacks_Init@callback 000F                         _Reset_Counter 0A5E  
                          ?_FSM_begin 0001                        _Callbacks_Init 0868  
                    _LCD_Write_String 0812                         __pidataCOMRAM 0A88  
              __end_of_WaterPump_Init 0ACE           __end_of_watering_status_led 0AB0  
                 start_initialization 08FC               _SMS_Read_Moisture_Value 0A48  
                 i2_get_current_state 0B0A                  __end_of_Timer0_start 0B06  
                fp__Check_Moisture_cb 0000                    _timer_overflow_isr 0008  
                      ?_Reset_Counter 000F                __end_of_Callbacks_Init 08B4  
                 ?_timer_overflow_isr 0001                  ?i2_get_current_state 0001  
                         ??_ADC_start 000F                       _ADC_in_progress 0A74  
                     ?_WaterPump_Init 0001                 __end_of_SMS_Set_State 07B6  
                            ?_LCD_CMD 0001                           __pbssCOMRAM 003D  
                ??_timer_overflow_isr 0007                           ??_LCD_Clear 0011  
                __end_of_WaterPump_ON 0AD6                     _Register_Callback 0604  
                     ?_Callbacks_Init 0001                    ?_Register_Callback 0011  
                         ??_FSM_begin 0019                 ??i2_get_current_state 0001  
                        ?_Timer0_init 0001                          ?_Timer0_stop 0001  
                           __pintcode 0008                   ??_Register_Callback 0013  
                         __smallconst 0300                       _idle_status_led 0AB0  
           ??_SMS_Read_Moisture_Value 0013                              _ADC_Read 099C  
                            _ADC_init 09C6                              _ADC_stop 0B06  
     SMS_Read_Moisture_Value@moisture 0013             __end_of_Register_Callback 067E  
                           _init_leds 0942                       ??_Reset_Counter 0011  
                            _LCD_DATA 07B6                              _LCD_Init 067E  
             __end_of_ADC_in_progress 0A88                              _RCONbits 000FD0  
                           _set_state 0ADE                         _WaterPump_OFF 0AD6  
                          _ADCON0bits 000FC2                            _ADCON1bits 000FC1  
                          _ADCON2bits 000FC0                              _SMS_init 0AEE  
                   ?_Watering_Done_cb 0001                   Reset_Counter@config 000F  
                  ??_Watering_Done_cb 0002                            ?_init_leds 0001  
                         _INTCON2bits 000FF1                             copy_data0 0910  
            __end_of_LCD_Write_String 0868                              __Hrparam 0000  
                            __Lrparam 0000                   LCD_Write_Char@High4 0011  
                          ?_set_state 0001                          _Timer0_start 0B02  
                      ?_WaterPump_OFF 0001               __end_of_idle_status_led 0ABA  
                          _ANSEL0bits 000FB8                              __ptext10 0AD6  
                            __ptext11 0AC4                              __ptext20 0AF4  
                            __ptext12 0B02                              __ptext21 0A74  
                            __ptext13 0AEE                              __ptext30 07B6  
                            __ptext22 0604                              __ptext14 09C6  
                            __ptext31 0868                              __ptext23 0A5E  
                            __ptext15 0B06                              __ptext24 0812  
                            __ptext16 0758                              __ptext33 053C  
                            __ptext25 08B4                              __ptext17 0ADE  
                            __ptext34 09E2                              __ptext26 06F6  
                            __ptext18 0A48                              __ptext35 09FE  
                            __ptext27 067E                              __ptext19 099C  
                            __ptext36 0AE6                              __ptext28 0A98  
                            __ptext37 0B0A                              __ptext29 0A1A  
                            __ptext38 0000                        _callback_count 0044  
                    ?_ADC_in_progress 0001                      ??_WaterPump_Init 000F  
                            isa$xinst 000000                     _get_current_state 0AFE  
                        _WaterPump_ON 0ACE                              int$flags 0046  
                         _tmr0Counter 003F                   LCD_Set_Cursor@High4 0014  
                  ?_get_current_state 0001                   ??_get_current_state 000F  
                          _INTCONbits 000FF2                    LCD_Write_Char@Data 0012  
                  LCD_Write_Char@Low4 0010                           ??_init_leds 000F  
                    ??_Callbacks_Init 000F                 SMS_Set_State@moisture 0010  
                            intlevel2 0000             __end_of_get_current_state 0B02  
                          _OSCCONbits 000FD3                       ??_WaterPump_OFF 000F  
                       ??i2_set_state 0001                           ??_set_state 000F  
      ??_checking_moisture_status_led 000F                    LCD_Set_Cursor@Low4 0013  
                  LCD_Set_Cursor@Temp 0015                      ?_idle_status_led 0001  
                        LCD_DATA@Data 000F                 set_state@state_to_set 000F  
                      FSM_begin@F2881 0035           __end_ofi2_get_current_state 0B0E  
                      FSM_begin@F2884 002D  
