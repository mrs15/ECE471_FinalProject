

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Feb 27 14:38:07 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4331 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     _ADRESL	set	4035
    63   000000                     _ADRESH	set	4036
    64                           
    65                           	psect	nvCOMRAM
    66   00000B                     __pnvCOMRAM:
    67                           	callstack 0
    68   00000B                     _FSM_state:
    69                           	callstack 0
    70   00000B                     	ds	1
    71   000000                     _ADCHSbits	set	3993
    72   000000                     _ADCON1bits	set	4033
    73   000000                     _ADCON0bits	set	4034
    74   000000                     _T0CONbits	set	4053
    75   000000                     _TMR0L	set	4054
    76   000000                     _INTCONbits	set	4082
    77   000000                     _ANSEL0bits	set	4024
    78   000000                     _ADCON2bits	set	4032
    79                           
    80                           ; #config settings
    81                           
    82                           	psect	cinit
    83   000162                     __pcinit:
    84                           	callstack 0
    85   000162                     start_initialization:
    86                           	callstack 0
    87   000162                     __initialization:
    88                           	callstack 0
    89                           
    90                           ; Clear objects allocated to COMRAM (4 bytes)
    91   000162  6A0A               	clrf	(__pbssCOMRAM+3)& (0+255),c
    92   000164  6A09               	clrf	(__pbssCOMRAM+2)& (0+255),c
    93   000166  6A08               	clrf	(__pbssCOMRAM+1)& (0+255),c
    94   000168  6A07               	clrf	__pbssCOMRAM& (0+255),c
    95   00016A                     end_of_initialization:
    96                           	callstack 0
    97   00016A                     __end_of__initialization:
    98                           	callstack 0
    99   00016A  900C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   100   00016C  920C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   101   00016E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   102   000170  6EF8               	movwf	tblptru,c
   103   000172  0100               	movlb	0
   104   000174  EFC6  F000         	goto	_main	;jump to C main() function
   105                           
   106                           	psect	bssCOMRAM
   107   000007                     __pbssCOMRAM:
   108                           	callstack 0
   109   000007                     _ADC:
   110                           	callstack 0
   111   000007                     	ds	2
   112   000009                     _tmr0Counter:
   113                           	callstack 0
   114   000009                     	ds	2
   115                           
   116                           	psect	cstackCOMRAM
   117   000001                     __pcstackCOMRAM:
   118                           	callstack 0
   119   000001                     ?_ADC_Read:
   120                           	callstack 0
   121   000001                     set_state@state_to_set:
   122                           	callstack 0
   123                           
   124                           ; 1 bytes @ 0x0
   125   000001                     	ds	2
   126   000003                     SMS_read_and_set_state@moisture:
   127                           	callstack 0
   128                           
   129                           ; 2 bytes @ 0x2
   130   000003                     	ds	2
   131   000005                     ??_FSM_begin:
   132                           
   133                           ; 1 bytes @ 0x4
   134   000005                     	ds	2
   135   000007                     
   136                           ; 1 bytes @ 0x6
   137 ;;
   138 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   139 ;;
   140 ;; *************** function _main *****************
   141 ;; Defined at:
   142 ;;		line 14 in file "main.c"
   143 ;; Parameters:    Size  Location     Type
   144 ;;		None
   145 ;; Auto vars:     Size  Location     Type
   146 ;;		None
   147 ;; Return value:  Size  Location     Type
   148 ;;                  1    wreg      void 
   149 ;; Registers used:
   150 ;;		wreg, status,2, status,0, cstack
   151 ;; Tracked objects:
   152 ;;		On entry : 0/0
   153 ;;		On exit  : 0/0
   154 ;;		Unchanged: 0/0
   155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   156 ;;      Params:         0       0       0       0
   157 ;;      Locals:         0       0       0       0
   158 ;;      Temps:          0       0       0       0
   159 ;;      Totals:         0       0       0       0
   160 ;;Total ram usage:        0 bytes
   161 ;; Hardware stack levels required when called: 5
   162 ;; This function calls:
   163 ;;		_FSM_begin
   164 ;;		_set_state
   165 ;; This function is called by:
   166 ;;		Startup code after reset
   167 ;; This function uses a non-reentrant model
   168 ;;
   169                           
   170                           	psect	text0
   171   00018C                     __ptext0:
   172                           	callstack 0
   173   00018C                     _main:
   174                           	callstack 26
   175   00018C                     
   176                           ;main.c: 16:     set_state(INIT_STATE);
   177   00018C  0E00               	movlw	0
   178   00018E  ECCD  F000         	call	_set_state
   179   000192                     
   180                           ;main.c: 17:     FSM_begin();
   181   000192  EC21  F000         	call	_FSM_begin	;wreg free
   182   000196  EF1F  F000         	goto	start
   183   00019A                     __end_of_main:
   184                           	callstack 0
   185                           
   186 ;; *************** function _FSM_begin *****************
   187 ;; Defined at:
   188 ;;		line 5 in file "System_FSM.c"
   189 ;; Parameters:    Size  Location     Type
   190 ;;		None
   191 ;; Auto vars:     Size  Location     Type
   192 ;;		None
   193 ;; Return value:  Size  Location     Type
   194 ;;                  1    wreg      void 
   195 ;; Registers used:
   196 ;;		wreg, status,2, status,0, cstack
   197 ;; Tracked objects:
   198 ;;		On entry : 0/0
   199 ;;		On exit  : 0/0
   200 ;;		Unchanged: 0/0
   201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   202 ;;      Params:         0       0       0       0
   203 ;;      Locals:         0       0       0       0
   204 ;;      Temps:          2       0       0       0
   205 ;;      Totals:         2       0       0       0
   206 ;;Total ram usage:        2 bytes
   207 ;; Hardware stack levels used: 1
   208 ;; Hardware stack levels required when called: 4
   209 ;; This function calls:
   210 ;;		_SMS_init
   211 ;;		_SMS_read_and_set_state
   212 ;;		_get_current_state
   213 ;;		_set_state
   214 ;; This function is called by:
   215 ;;		_main
   216 ;; This function uses a non-reentrant model
   217 ;;
   218                           
   219                           	psect	text1
   220   000042                     __ptext1:
   221                           	callstack 0
   222   000042                     _FSM_begin:
   223                           	callstack 26
   224   000042                     
   225                           ;System_FSM.c: 7:     switch(get_current_state())
   226   000042  EF3F  F000         	goto	l919
   227   000046                     l907:
   228                           
   229                           ;System_FSM.c: 10:         {;System_FSM.c: 12:             SMS_init();
   230   000046  ECD4  F000         	call	_SMS_init	;wreg free
   231   00004A                     
   232                           ;System_FSM.c: 13:             set_state(IDLE_STATE);
   233   00004A  0E01               	movlw	1
   234   00004C  ECCD  F000         	call	_set_state
   235                           
   236                           ;System_FSM.c: 14:             break;
   237   000050  EF5D  F000         	goto	l111
   238   000054                     l911:
   239                           
   240                           ;System_FSM.c: 19:             while(get_current_state() == IDLE_STATE)
   241   000054  ECD7  F000         	call	_get_current_state	;wreg free
   242   000058  06E8               	decf	wreg,f,c
   243   00005A  B4D8               	btfsc	status,2,c
   244   00005C  EF32  F000         	goto	u131
   245   000060  EF34  F000         	goto	u130
   246   000064                     u131:
   247   000064  EF2A  F000         	goto	l911
   248   000068                     u130:
   249   000068  EF5D  F000         	goto	l111
   250   00006C                     l913:
   251                           
   252                           ;System_FSM.c: 38:         {;System_FSM.c: 41:             SMS_read_and_set_state();
   253   00006C  EC5E  F000         	call	_SMS_read_and_set_state	;wreg free
   254                           
   255                           ;System_FSM.c: 42:             break;
   256   000070  EF5D  F000         	goto	l111
   257   000074                     l915:
   258                           
   259                           ;System_FSM.c: 46:         {;System_FSM.c: 47:             set_state(INIT_STATE);
   260   000074  0E00               	movlw	0
   261   000076  ECCD  F000         	call	_set_state
   262                           
   263                           ;System_FSM.c: 48:             break;
   264   00007A  EF5D  F000         	goto	l111
   265   00007E                     l919:
   266   00007E  ECD7  F000         	call	_get_current_state	;wreg free
   267   000082  6E05               	movwf	??_FSM_begin^0,c
   268   000084  6A06               	clrf	(??_FSM_begin+1)^0,c
   269                           
   270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   271                           ; Switch size 1, requested type "simple"
   272                           ; Number of cases is 1, Range of values is 0 to 0
   273                           ; switch strategies available:
   274                           ; Name         Instructions Cycles
   275                           ; simple_byte            4     3 (average)
   276                           ;	Chosen strategy is simple_byte
   277   000086  5006               	movf	(??_FSM_begin+1)^0,w,c
   278   000088  0A00               	xorlw	0	; case 0
   279   00008A  B4D8               	btfsc	status,2,c
   280   00008C  EF4A  F000         	goto	l935
   281   000090  EF3A  F000         	goto	l915
   282   000094                     l935:
   283                           
   284                           ; Switch size 1, requested type "simple"
   285                           ; Number of cases is 4, Range of values is 0 to 3
   286                           ; switch strategies available:
   287                           ; Name         Instructions Cycles
   288                           ; simple_byte           13     7 (average)
   289                           ;	Chosen strategy is simple_byte
   290   000094  5005               	movf	??_FSM_begin^0,w,c
   291   000096  0A00               	xorlw	0	; case 0
   292   000098  B4D8               	btfsc	status,2,c
   293   00009A  EF23  F000         	goto	l907
   294   00009E  0A01               	xorlw	1	; case 1
   295   0000A0  B4D8               	btfsc	status,2,c
   296   0000A2  EF2A  F000         	goto	l911
   297   0000A6  0A03               	xorlw	3	; case 2
   298   0000A8  B4D8               	btfsc	status,2,c
   299   0000AA  EF5D  F000         	goto	l111
   300   0000AE  0A01               	xorlw	1	; case 3
   301   0000B0  B4D8               	btfsc	status,2,c
   302   0000B2  EF36  F000         	goto	l913
   303   0000B6  EF3A  F000         	goto	l915
   304   0000BA                     l111:
   305   0000BA  0012               	return		;funcret
   306   0000BC                     __end_of_FSM_begin:
   307                           	callstack 0
   308                           
   309 ;; *************** function _get_current_state *****************
   310 ;; Defined at:
   311 ;;		line 5 in file "FSM_states.c"
   312 ;; Parameters:    Size  Location     Type
   313 ;;		None
   314 ;; Auto vars:     Size  Location     Type
   315 ;;		None
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      enum E2813
   318 ;; Registers used:
   319 ;;		wreg, status,2
   320 ;; Tracked objects:
   321 ;;		On entry : 0/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   325 ;;      Params:         0       0       0       0
   326 ;;      Locals:         0       0       0       0
   327 ;;      Temps:          0       0       0       0
   328 ;;      Totals:         0       0       0       0
   329 ;;Total ram usage:        0 bytes
   330 ;; Hardware stack levels used: 1
   331 ;; Hardware stack levels required when called: 1
   332 ;; This function calls:
   333 ;;		Nothing
   334 ;; This function is called by:
   335 ;;		_FSM_begin
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339                           	psect	text2
   340   0001AE                     __ptext2:
   341                           	callstack 0
   342   0001AE                     _get_current_state:
   343                           	callstack 28
   344   0001AE                     
   345                           ;FSM_states.c: 7:     return FSM_state;
   346   0001AE  500B               	movf	_FSM_state^0,w,c
   347   0001B0  0012               	return		;funcret
   348   0001B2                     __end_of_get_current_state:
   349                           	callstack 0
   350                           
   351 ;; *************** function _SMS_read_and_set_state *****************
   352 ;; Defined at:
   353 ;;		line 13 in file "SoilMoistureSensor.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  moisture        2    2[COMRAM] unsigned short 
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, status,2, status,0, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   367 ;;      Params:         0       0       0       0
   368 ;;      Locals:         2       0       0       0
   369 ;;      Temps:          0       0       0       0
   370 ;;      Totals:         2       0       0       0
   371 ;;Total ram usage:        2 bytes
   372 ;; Hardware stack levels used: 1
   373 ;; Hardware stack levels required when called: 3
   374 ;; This function calls:
   375 ;;		_ADC_Read
   376 ;;		_set_state
   377 ;; This function is called by:
   378 ;;		_FSM_begin
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           	psect	text3
   383   0000BC                     __ptext3:
   384                           	callstack 0
   385   0000BC                     _SMS_read_and_set_state:
   386                           	callstack 26
   387   0000BC                     
   388                           ;SoilMoistureSensor.c: 15:     uint16_t moisture = ADC_Read();
   389   0000BC  EC8E  F000         	call	_ADC_Read	;wreg free
   390   0000C0  C001  F003         	movff	?_ADC_Read,SMS_read_and_set_state@moisture
   391   0000C4  C002  F004         	movff	?_ADC_Read+1,SMS_read_and_set_state@moisture+1
   392   0000C8                     
   393                           ;SoilMoistureSensor.c: 16:     if(moisture >= (595))
   394   0000C8  0E53               	movlw	83
   395   0000CA  5C03               	subwf	SMS_read_and_set_state@moisture^0,w,c
   396   0000CC  0E02               	movlw	2
   397   0000CE  5804               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   398   0000D0  A0D8               	btfss	status,0,c
   399   0000D2  EF6D  F000         	goto	u101
   400   0000D6  EF6F  F000         	goto	u100
   401   0000DA                     u101:
   402   0000DA  EF74  F000         	goto	l899
   403   0000DE                     u100:
   404   0000DE                     
   405                           ;SoilMoistureSensor.c: 17:     {;SoilMoistureSensor.c: 18:         set_state(WATER_PLANT
      +                          S);
   406   0000DE  0E02               	movlw	2
   407   0000E0  ECCD  F000         	call	_set_state
   408                           
   409                           ;SoilMoistureSensor.c: 19:     }
   410   0000E4  EF8D  F000         	goto	l82
   411   0000E8                     l899:
   412   0000E8  5004               	movf	(SMS_read_and_set_state@moisture+1)^0,w,c
   413   0000EA  E109               	bnz	u110
   414   0000EC  0EEF               	movlw	239
   415   0000EE  5C03               	subwf	SMS_read_and_set_state@moisture^0,w,c
   416   0000F0  A0D8               	btfss	status,0,c
   417   0000F2  EF7D  F000         	goto	u111
   418   0000F6  EF7F  F000         	goto	u110
   419   0000FA                     u111:
   420   0000FA  EF8D  F000         	goto	l82
   421   0000FE                     u110:
   422   0000FE  0E53               	movlw	83
   423   000100  5C03               	subwf	SMS_read_and_set_state@moisture^0,w,c
   424   000102  0E02               	movlw	2
   425   000104  5804               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   426   000106  B0D8               	btfsc	status,0,c
   427   000108  EF88  F000         	goto	u121
   428   00010C  EF8A  F000         	goto	u120
   429   000110                     u121:
   430   000110  EF8D  F000         	goto	l82
   431   000114                     u120:
   432   000114                     
   433                           ;SoilMoistureSensor.c: 21:     {;SoilMoistureSensor.c: 23:         set_state(IDLE_STATE)
      +                          ;
   434   000114  0E01               	movlw	1
   435   000116  ECCD  F000         	call	_set_state
   436   00011A                     l82:
   437   00011A  0012               	return		;funcret
   438   00011C                     __end_of_SMS_read_and_set_state:
   439                           	callstack 0
   440                           
   441 ;; *************** function _set_state *****************
   442 ;; Defined at:
   443 ;;		line 9 in file "FSM_states.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;  state_to_set    1    wreg     enum E2813
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  state_to_set    1    0[COMRAM] enum E2813
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   457 ;;      Params:         0       0       0       0
   458 ;;      Locals:         1       0       0       0
   459 ;;      Temps:          0       0       0       0
   460 ;;      Totals:         1       0       0       0
   461 ;;Total ram usage:        1 bytes
   462 ;; Hardware stack levels used: 1
   463 ;; Hardware stack levels required when called: 1
   464 ;; This function calls:
   465 ;;		Nothing
   466 ;; This function is called by:
   467 ;;		_main
   468 ;;		_SMS_read_and_set_state
   469 ;;		_FSM_begin
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text4
   474   00019A                     __ptext4:
   475                           	callstack 0
   476   00019A                     _set_state:
   477                           	callstack 29
   478                           
   479                           ;incstack = 0
   480                           ;set_state@state_to_set stored from wreg
   481   00019A  6E01               	movwf	set_state@state_to_set^0,c
   482   00019C                     
   483                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
   484   00019C  C001  F00B         	movff	set_state@state_to_set,_FSM_state
   485   0001A0  0012               	return		;funcret
   486   0001A2                     __end_of_set_state:
   487                           	callstack 0
   488                           
   489 ;; *************** function _ADC_Read *****************
   490 ;; Defined at:
   491 ;;		line 60 in file "PIC18F4331_ADC.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;		None
   496 ;; Return value:  Size  Location     Type
   497 ;;                  2    0[COMRAM] unsigned short 
   498 ;; Registers used:
   499 ;;		wreg, status,2, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   505 ;;      Params:         2       0       0       0
   506 ;;      Locals:         0       0       0       0
   507 ;;      Temps:          0       0       0       0
   508 ;;      Totals:         2       0       0       0
   509 ;;Total ram usage:        2 bytes
   510 ;; Hardware stack levels used: 1
   511 ;; Hardware stack levels required when called: 2
   512 ;; This function calls:
   513 ;;		_ADC_in_progress
   514 ;;		_ADC_start
   515 ;; This function is called by:
   516 ;;		_SMS_read_and_set_state
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           	psect	text5
   521   00011C                     __ptext5:
   522                           	callstack 0
   523   00011C                     _ADC_Read:
   524                           	callstack 26
   525   00011C                     
   526                           ;PIC18F4331_ADC.c: 62:     ADC_start();
   527   00011C  ECD1  F000         	call	_ADC_start	;wreg free
   528   000120                     l891:
   529   000120  ECBC  F000         	call	_ADC_in_progress	;wreg free
   530   000124  0900               	iorlw	0
   531   000126  A4D8               	btfss	status,2,c
   532   000128  EF98  F000         	goto	u91
   533   00012C  EF9A  F000         	goto	u90
   534   000130                     u91:
   535   000130  EF90  F000         	goto	l891
   536   000134                     u90:
   537   000134                     
   538                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
   539   000134  CFC4 F008          	movff	4036,_ADC+1	;volatile
   540                           
   541                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
   542   000138  CFC3 F007          	movff	4035,_ADC	;volatile
   543                           
   544                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
   545   00013C  C007  F001         	movff	_ADC,?_ADC_Read
   546   000140  C008  F002         	movff	_ADC+1,?_ADC_Read+1
   547   000144  0012               	return		;funcret
   548   000146                     __end_of_ADC_Read:
   549                           	callstack 0
   550                           
   551 ;; *************** function _ADC_start *****************
   552 ;; Defined at:
   553 ;;		line 13 in file "PIC18F4331_ADC.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;		None
   558 ;; Return value:  Size  Location     Type
   559 ;;                  1    wreg      void 
   560 ;; Registers used:
   561 ;;		None
   562 ;; Tracked objects:
   563 ;;		On entry : 0/0
   564 ;;		On exit  : 0/0
   565 ;;		Unchanged: 0/0
   566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   567 ;;      Params:         0       0       0       0
   568 ;;      Locals:         0       0       0       0
   569 ;;      Temps:          0       0       0       0
   570 ;;      Totals:         0       0       0       0
   571 ;;Total ram usage:        0 bytes
   572 ;; Hardware stack levels used: 1
   573 ;; Hardware stack levels required when called: 1
   574 ;; This function calls:
   575 ;;		Nothing
   576 ;; This function is called by:
   577 ;;		_ADC_Read
   578 ;; This function uses a non-reentrant model
   579 ;;
   580                           
   581                           	psect	text6
   582   0001A2                     __ptext6:
   583                           	callstack 0
   584   0001A2                     _ADC_start:
   585                           	callstack 26
   586   0001A2                     
   587                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
   588   0001A2  80C2               	bsf	194,0,c	;volatile
   589                           
   590                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
   591   0001A4  82C2               	bsf	194,1,c	;volatile
   592   0001A6  0012               	return		;funcret
   593   0001A8                     __end_of_ADC_start:
   594                           	callstack 0
   595                           
   596 ;; *************** function _ADC_in_progress *****************
   597 ;; Defined at:
   598 ;;		line 53 in file "PIC18F4331_ADC.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;		None
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      unsigned char 
   605 ;; Registers used:
   606 ;;		wreg
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   612 ;;      Params:         0       0       0       0
   613 ;;      Locals:         0       0       0       0
   614 ;;      Temps:          0       0       0       0
   615 ;;      Totals:         0       0       0       0
   616 ;;Total ram usage:        0 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; Hardware stack levels required when called: 1
   619 ;; This function calls:
   620 ;;		Nothing
   621 ;; This function is called by:
   622 ;;		_ADC_Read
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text7
   627   000178                     __ptext7:
   628                           	callstack 0
   629   000178                     _ADC_in_progress:
   630                           	callstack 26
   631   000178                     
   632                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
   633   000178  B2C2               	btfsc	194,1,c	;volatile
   634   00017A  EFC1  F000         	goto	u11
   635   00017E  EFC4  F000         	goto	u10
   636   000182                     u11:
   637   000182  0E01               	movlw	1
   638   000184  EFC5  F000         	goto	u16
   639   000188                     u10:
   640   000188  0E00               	movlw	0
   641   00018A                     u16:
   642   00018A  0012               	return		;funcret
   643   00018C                     __end_of_ADC_in_progress:
   644                           	callstack 0
   645                           
   646 ;; *************** function _SMS_init *****************
   647 ;; Defined at:
   648 ;;		line 8 in file "SoilMoistureSensor.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   662 ;;      Params:         0       0       0       0
   663 ;;      Locals:         0       0       0       0
   664 ;;      Temps:          0       0       0       0
   665 ;;      Totals:         0       0       0       0
   666 ;;Total ram usage:        0 bytes
   667 ;; Hardware stack levels used: 1
   668 ;; Hardware stack levels required when called: 3
   669 ;; This function calls:
   670 ;;		_ADC_init
   671 ;; This function is called by:
   672 ;;		_FSM_begin
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text8
   677   0001A8                     __ptext8:
   678                           	callstack 0
   679   0001A8                     _SMS_init:
   680                           	callstack 26
   681   0001A8                     
   682                           ;SoilMoistureSensor.c: 10:     ADC_init();
   683   0001A8  ECA3  F000         	call	_ADC_init	;wreg free
   684   0001AC  0012               	return		;funcret
   685   0001AE                     __end_of_SMS_init:
   686                           	callstack 0
   687                           
   688 ;; *************** function _ADC_init *****************
   689 ;; Defined at:
   690 ;;		line 24 in file "PIC18F4331_ADC.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   704 ;;      Params:         0       0       0       0
   705 ;;      Locals:         0       0       0       0
   706 ;;      Temps:          0       0       0       0
   707 ;;      Totals:         0       0       0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; Hardware stack levels required when called: 2
   711 ;; This function calls:
   712 ;;		_ADC_stop
   713 ;; This function is called by:
   714 ;;		_SMS_init
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text9
   719   000146                     __ptext9:
   720                           	callstack 0
   721   000146                     _ADC_init:
   722                           	callstack 26
   723   000146                     
   724                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
   725   000146  ECD9  F000         	call	_ADC_stop	;wreg free
   726   00014A                     
   727                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
   728   00014A  0E3F               	movlw	-193
   729   00014C  16C1               	andwf	193,f,c	;volatile
   730   00014E                     
   731                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
   732   00014E  9099               	bcf	153,0,c	;volatile
   733   000150                     
   734                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
   735   000150  9299               	bcf	153,1,c	;volatile
   736   000152                     
   737                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
   738   000152  9AC2               	bcf	194,5,c	;volatile
   739   000154                     
   740                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
   741   000154  0EF8               	movlw	-8
   742   000156  16C0               	andwf	192,f,c	;volatile
   743   000158                     
   744                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
   745   000158  8EC0               	bsf	192,7,c	;volatile
   746   00015A                     
   747                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
   748   00015A  0E87               	movlw	-121
   749   00015C  16C0               	andwf	192,f,c	;volatile
   750   00015E                     
   751                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
   752   00015E  80B8               	bsf	184,0,c	;volatile
   753   000160  0012               	return		;funcret
   754   000162                     __end_of_ADC_init:
   755                           	callstack 0
   756                           
   757 ;; *************** function _ADC_stop *****************
   758 ;; Defined at:
   759 ;;		line 19 in file "PIC18F4331_ADC.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		None
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   773 ;;      Params:         0       0       0       0
   774 ;;      Locals:         0       0       0       0
   775 ;;      Temps:          0       0       0       0
   776 ;;      Totals:         0       0       0       0
   777 ;;Total ram usage:        0 bytes
   778 ;; Hardware stack levels used: 1
   779 ;; Hardware stack levels required when called: 1
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_ADC_init
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text10
   788   0001B2                     __ptext10:
   789                           	callstack 0
   790   0001B2                     _ADC_stop:
   791                           	callstack 26
   792   0001B2                     
   793                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
   794   0001B2  90C2               	bcf	194,0,c	;volatile
   795   0001B4  0012               	return		;funcret
   796   0001B6                     __end_of_ADC_stop:
   797                           	callstack 0
   798                           
   799 ;; *************** function _timer_overflow_isr *****************
   800 ;; Defined at:
   801 ;;		line 5 in file "PIC18F4331_Timer.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   815 ;;      Params:         0       0       0       0
   816 ;;      Locals:         0       0       0       0
   817 ;;      Temps:          0       0       0       0
   818 ;;      Totals:         0       0       0       0
   819 ;;Total ram usage:        0 bytes
   820 ;; Hardware stack levels used: 1
   821 ;; This function calls:
   822 ;;		Nothing
   823 ;; This function is called by:
   824 ;;		Interrupt level 2
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828                           	psect	intcode
   829   000008                     __pintcode:
   830                           	callstack 0
   831   000008                     _timer_overflow_isr:
   832                           	callstack 26
   833                           
   834                           ;incstack = 0
   835   000008  820C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   836   00000A                     
   837                           ;PIC18F4331_Timer.c: 8:     INTCONbits.GIEH = 0;
   838   00000A  9EF2               	bcf	242,7,c	;volatile
   839                           
   840                           ;PIC18F4331_Timer.c: 9:     INTCONbits.GIEL = 1;
   841   00000C  8CF2               	bsf	242,6,c	;volatile
   842   00000E                     
   843                           ;PIC18F4331_Timer.c: 25:     if(TMR0L < 6)
   844   00000E  0E06               	movlw	6
   845   000010  60D6               	cpfslt	214,c	;volatile
   846   000012  EF0D  F000         	goto	i2u7_41
   847   000016  EF0F  F000         	goto	i2u7_40
   848   00001A                     i2u7_41:
   849   00001A  EF11  F000         	goto	i2l869
   850   00001E                     i2u7_40:
   851   00001E                     
   852                           ;PIC18F4331_Timer.c: 26:     {;PIC18F4331_Timer.c: 27:         TMR0L = 6;
   853   00001E  0E06               	movlw	6
   854   000020  6ED6               	movwf	214,c	;volatile
   855   000022                     i2l869:
   856                           
   857                           ;PIC18F4331_Timer.c: 31:     if(INTCONbits.TMR0IF)
   858   000022  A4F2               	btfss	242,2,c	;volatile
   859   000024  EF16  F000         	goto	i2u8_41
   860   000028  EF18  F000         	goto	i2u8_40
   861   00002C                     i2u8_41:
   862   00002C  EF1B  F000         	goto	i2l875
   863   000030                     i2u8_40:
   864   000030                     
   865                           ;PIC18F4331_Timer.c: 32:     {;PIC18F4331_Timer.c: 34:         tmr0Counter++;
   866   000030  4A09               	infsnz	_tmr0Counter^0,f,c	;volatile
   867   000032  2A0A               	incf	(_tmr0Counter+1)^0,f,c	;volatile
   868   000034                     
   869                           ;PIC18F4331_Timer.c: 37:         INTCONbits.TMR0IF = 0;
   870   000034  94F2               	bcf	242,2,c	;volatile
   871   000036                     i2l875:
   872                           
   873                           ;PIC18F4331_Timer.c: 41:     INTCONbits.GIEH = 1;
   874   000036  8EF2               	bsf	242,7,c	;volatile
   875   000038                     
   876                           ;PIC18F4331_Timer.c: 42:     INTCONbits.GIEL = 1;
   877   000038  8CF2               	bsf	242,6,c	;volatile
   878   00003A  920C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   879   00003C  0011               	retfie		f
   880   00003E                     __end_of_timer_overflow_isr:
   881                           	callstack 0
   882   000000                     
   883                           	psect	rparam
   884   000000                     
   885                           	psect	temp
   886   00000C                     btemp:
   887                           	callstack 0
   888   00000C                     	ds	1
   889   000000                     int$flags	set	btemp
   890   000000                     wtemp8	set	btemp+1
   891   000000                     ttemp5	set	btemp+1
   892   000000                     ttemp6	set	btemp+4
   893   000000                     ttemp7	set	btemp+8
   894                           
   895                           	psect	idloc
   896                           
   897                           ;Config register IDLOC0 @ 0x200000
   898                           ;	unspecified, using default values
   899   200000                     	org	2097152
   900   200000  FF                 	db	255
   901                           
   902                           ;Config register IDLOC1 @ 0x200001
   903                           ;	unspecified, using default values
   904   200001                     	org	2097153
   905   200001  FF                 	db	255
   906                           
   907                           ;Config register IDLOC2 @ 0x200002
   908                           ;	unspecified, using default values
   909   200002                     	org	2097154
   910   200002  FF                 	db	255
   911                           
   912                           ;Config register IDLOC3 @ 0x200003
   913                           ;	unspecified, using default values
   914   200003                     	org	2097155
   915   200003  FF                 	db	255
   916                           
   917                           ;Config register IDLOC4 @ 0x200004
   918                           ;	unspecified, using default values
   919   200004                     	org	2097156
   920   200004  FF                 	db	255
   921                           
   922                           ;Config register IDLOC5 @ 0x200005
   923                           ;	unspecified, using default values
   924   200005                     	org	2097157
   925   200005  FF                 	db	255
   926                           
   927                           ;Config register IDLOC6 @ 0x200006
   928                           ;	unspecified, using default values
   929   200006                     	org	2097158
   930   200006  FF                 	db	255
   931                           
   932                           ;Config register IDLOC7 @ 0x200007
   933                           ;	unspecified, using default values
   934   200007                     	org	2097159
   935   200007  FF                 	db	255
   936                           
   937                           	psect	config
   938                           
   939                           ; Padding undefined space
   940   300000                     	org	3145728
   941   300000  FF                 	db	255
   942                           
   943                           ;Config register CONFIG1H @ 0x300001
   944                           ;	Oscillator Selection bits
   945                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
   946                           ;	Fail-Safe Clock Monitor Enable bit
   947                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
   948                           ;	Internal External Oscillator Switchover bit
   949                           ;	IESO = ON, Internal External Switchover mode enabled
   950   300001                     	org	3145729
   951   300001  C8                 	db	200
   952                           
   953                           ;Config register CONFIG2L @ 0x300002
   954                           ;	Power-up Timer Enable bit
   955                           ;	PWRTEN = OFF, PWRT disabled
   956                           ;	Brown-out Reset Enable bits
   957                           ;	BOREN = ON, Brown-out Reset enabled
   958                           ;	Brown Out Reset Voltage bits
   959                           ;	BORV = 0x3, unprogrammed default
   960   300002                     	org	3145730
   961   300002  0F                 	db	15
   962                           
   963                           ;Config register CONFIG2H @ 0x300003
   964                           ;	Watchdog Timer Enable bit
   965                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
   966                           ;	Watchdog Timer Postscale Select bits
   967                           ;	WDPS = 32768, 1:32768
   968                           ;	Watchdog Timer Window Enable bit
   969                           ;	WINEN = OFF, WDT window disabled
   970   300003                     	org	3145731
   971   300003  3E                 	db	62
   972                           
   973                           ;Config register CONFIG3L @ 0x300004
   974                           ;	PWM output pins Reset state control
   975                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
   976                           ;	Low-Side Transistors Polarity
   977                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
   978                           ;	High-Side Transistors Polarity
   979                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
   980                           ;	Timer1 Oscillator MUX
   981                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
   982   300004                     	org	3145732
   983   300004  3C                 	db	60
   984                           
   985                           ;Config register CONFIG3H @ 0x300005
   986                           ;	FLTA MUX bit
   987                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
   988                           ;	SSP I/O MUX bit
   989                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
   990                           ;	PWM4 MUX bit
   991                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
   992                           ;	TMR0/T5CKI External clock MUX bit
   993                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
   994                           ;	MCLR Pin Enable bit
   995                           ;	MCLRE = ON, Enabled
   996   300005                     	org	3145733
   997   300005  9D                 	db	157
   998                           
   999                           ;Config register CONFIG4L @ 0x300006
  1000                           ;	Stack Full/Underflow Reset Enable bit
  1001                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1002                           ;	Low-Voltage ICSP Enable bit
  1003                           ;	LVP = ON, Low-voltage ICSP enabled
  1004                           ;	Background Debugger Enable bit
  1005                           ;	DEBUG = 0x1, unprogrammed default
  1006   300006                     	org	3145734
  1007   300006  85                 	db	133
  1008                           
  1009                           ; Padding undefined space
  1010   300007                     	org	3145735
  1011   300007  FF                 	db	255
  1012                           
  1013                           ;Config register CONFIG5L @ 0x300008
  1014                           ;	Code Protection bit
  1015                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  1016                           ;	Code Protection bit
  1017                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  1018   300008                     	org	3145736
  1019   300008  0F                 	db	15
  1020                           
  1021                           ;Config register CONFIG5H @ 0x300009
  1022                           ;	Boot Block Code Protection bit
  1023                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1024                           ;	Data EEPROM Code Protection bit
  1025                           ;	CPD = OFF, Data EEPROM not code-protected
  1026   300009                     	org	3145737
  1027   300009  C0                 	db	192
  1028                           
  1029                           ;Config register CONFIG6L @ 0x30000A
  1030                           ;	Write Protection bit
  1031                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  1032                           ;	Write Protection bit
  1033                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  1034   30000A                     	org	3145738
  1035   30000A  0F                 	db	15
  1036                           
  1037                           ;Config register CONFIG6H @ 0x30000B
  1038                           ;	Configuration Register Write Protection bit
  1039                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1040                           ;	Boot Block Write Protection bit
  1041                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1042                           ;	Data EEPROM Write Protection bit
  1043                           ;	WRTD = OFF, Data EEPROM not write-protected
  1044   30000B                     	org	3145739
  1045   30000B  E0                 	db	224
  1046                           
  1047                           ;Config register CONFIG7L @ 0x30000C
  1048                           ;	Table Read Protection bit
  1049                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  1050                           ;	Table Read Protection bit
  1051                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  1052   30000C                     	org	3145740
  1053   30000C  0F                 	db	15
  1054                           
  1055                           ;Config register CONFIG7H @ 0x30000D
  1056                           ;	Boot Block Table Read Protection bit
  1057                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1058   30000D                     	org	3145741
  1059   30000D  40                 	db	64
  1060                           tosu	equ	0xFFF
  1061                           tosh	equ	0xFFE
  1062                           tosl	equ	0xFFD
  1063                           stkptr	equ	0xFFC
  1064                           pclatu	equ	0xFFB
  1065                           pclath	equ	0xFFA
  1066                           pcl	equ	0xFF9
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           prodh	equ	0xFF4
  1072                           prodl	equ	0xFF3
  1073                           indf0	equ	0xFEF
  1074                           postinc0	equ	0xFEE
  1075                           postdec0	equ	0xFED
  1076                           preinc0	equ	0xFEC
  1077                           plusw0	equ	0xFEB
  1078                           fsr0h	equ	0xFEA
  1079                           fsr0l	equ	0xFE9
  1080                           wreg	equ	0xFE8
  1081                           indf1	equ	0xFE7
  1082                           postinc1	equ	0xFE6
  1083                           postdec1	equ	0xFE5
  1084                           preinc1	equ	0xFE4
  1085                           plusw1	equ	0xFE3
  1086                           fsr1h	equ	0xFE2
  1087                           fsr1l	equ	0xFE1
  1088                           bsr	equ	0xFE0
  1089                           indf2	equ	0xFDF
  1090                           postinc2	equ	0xFDE
  1091                           postdec2	equ	0xFDD
  1092                           preinc2	equ	0xFDC
  1093                           plusw2	equ	0xFDB
  1094                           fsr2h	equ	0xFDA
  1095                           fsr2l	equ	0xFD9
  1096                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      6      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_SMS_read_and_set_state
    _SMS_read_and_set_state->_ADC_Read

Critical Paths under _timer_overflow_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     112
                          _FSM_begin
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                            2     2      0      97
                                              4 COMRAM     2     2      0
                           _SMS_init
             _SMS_read_and_set_state
                  _get_current_state
                          _set_state
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_read_and_set_state                               2     2      0      82
                                              2 COMRAM     2     2      0
                           _ADC_Read
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                              0 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _SMS_init
       _ADC_init
         _ADC_stop
     _SMS_read_and_set_state
       _ADC_Read
         _ADC_in_progress
         _ADC_start
       _set_state
     _get_current_state
     _set_state
   _set_state

 _timer_overflow_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      6       B       1       11.7%
BITBIGSFRllll       39      0       0      14        0.0%
BITBIGSFRlllhl      1E      0       0      13        0.0%
BITBIGSFRlh         1B      0       0      10        0.0%
BITBIGSFRllhh       10      0       0      11        0.0%
BITBIGSFRh           D      0       0       9        0.0%
BITBIGSFRlllhh       7      0       0      12        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       B      15        0.0%
DATA                 0      0       B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Feb 27 14:38:07 2023

                             l9 0196                              l52 01A6                              l61 018A  
                            l55 01B4                              l58 0160                              l66 0134  
                            l90 01A0                              l82 011A                              l67 0144  
                            l76 01AC                              l87 01B0                              u10 0188  
                            u11 0182                              u16 018A                              u90 0134  
                            u91 0130                             l111 00BA                             _ADC 0007  
                           l801 014E                             l811 015A                             l803 0150  
                           l813 015E                             l805 0152                             l901 00FE  
                           l807 0154                             l903 0114                             l911 0054  
                           l809 0158                             l833 01AE                             l913 006C  
                           l905 0042                             l819 01A8                             l915 0074  
                           l907 0046                             l909 004A                             l925 018C  
                           l791 0178                             l935 0094                             l919 007E  
                           l927 0192                             l787 01A2                             l891 0120  
                           l795 019C                             l789 01B2                             l797 0146  
                           l893 00BC                             l799 014A                             l895 00C8  
                           l889 011C                             l897 00DE                             l899 00E8  
                           u100 00DE                             u101 00DA                             u110 00FE  
                           u111 00FA                             u120 0114                             u121 0110  
                           u130 0068                             u131 0064                             wreg 000FE8  
                          i2l24 003A                            _main 018C                            btemp 000C  
              __end_of_ADC_Read 0146                            start 003E                __end_of_ADC_init 0162  
              __end_of_ADC_stop 01B6                    ___param_bank 000000                           ?_main 0001  
                         i2l871 0030                           i2l863 000A                           i2l873 0034  
                         i2l865 000E                           i2l875 0036                           i2l867 001E  
                         i2l877 0038                           i2l869 0022                           _TMR0L 000FD6  
              __end_of_SMS_init 01AE                           ttemp5 000D                           ttemp6 0010  
                         ttemp7 0014                           status 000FD8                           wtemp8 000D  
             __end_of_ADC_start 01A8                 __initialization 0162                    __end_of_main 019A  
                        ??_main 0007                   __activetblptr 000002                          _ADRESH 000FC4  
                        _ADRESL 000FC3               __end_of_FSM_begin 00BC                          i2u7_40 001E  
                        i2u7_41 001A                          i2u8_40 0030                          i2u8_41 002C  
SMS_read_and_set_state@moisture 0003                          isa$std 000001                       ?_ADC_Read 0001  
                        tblptru 000FF8                       ?_ADC_init 0001                       ?_ADC_stop 0001  
                    __accesstop 0060         __end_of__initialization 016A                   ___rparam_used 000001  
                __pcstackCOMRAM 0001      __end_of_timer_overflow_isr 003E                       ?_SMS_init 0001  
                    ??_ADC_Read 0003                      ??_ADC_init 0001                      ??_ADC_stop 0001  
                    __pnvCOMRAM 000B                      ??_SMS_init 0001               ??_ADC_in_progress 0001  
                     _ADCHSbits 000F99                         __Hparam 0000                         __Lparam 0000  
                     _ADC_start 01A2                         __pcinit 0162                         __ramtop 0300  
                       __ptext0 018C                         __ptext1 0042                         __ptext2 01AE  
                       __ptext3 00BC                         __ptext4 019A                         __ptext5 011C  
                       __ptext6 01A2                         __ptext7 0178                         __ptext8 01A8  
                       __ptext9 0146                       _T0CONbits 000FD5        ??_SMS_read_and_set_state 0003  
          end_of_initialization 016A                   __Lmediumconst 0000               __end_of_set_state 01A2  
                     _FSM_begin 0042                       _FSM_state 000B                      ?_ADC_start 0001  
                    ?_FSM_begin 0001             start_initialization 0162              _timer_overflow_isr 0008  
           ?_timer_overflow_isr 0001                     ??_ADC_start 0001                 _ADC_in_progress 0178  
                   __pbssCOMRAM 0007            ??_timer_overflow_isr 0001          _SMS_read_and_set_state 00BC  
                   ??_FSM_begin 0005                       __pintcode 0008                        _ADC_Read 011C  
                      _ADC_init 0146                        _ADC_stop 01B2         __end_of_ADC_in_progress 018C  
                     _set_state 019A                      _ADCON0bits 000FC2                      _ADCON1bits 000FC1  
                    _ADCON2bits 000FC0                        _SMS_init 01A8                        __Hrparam 0000  
                      __Lrparam 0000                      ?_set_state 0001                      _ANSEL0bits 000FB8  
                      __ptext10 01B2                ?_ADC_in_progress 0001                        isa$xinst 000000  
             _get_current_state 01AE                        int$flags 000C                     _tmr0Counter 0009  
            ?_get_current_state 0001             ??_get_current_state 0001                      _INTCONbits 000FF2  
       ?_SMS_read_and_set_state 0001                        intlevel2 0000       __end_of_get_current_state 01B2  
                   ??_set_state 0001           set_state@state_to_set 0001  __end_of_SMS_read_and_set_state 011C  
