

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Mar 30 18:01:09 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.40
    61                           ; Generated 17/11/2021 GMT
    62                           ; 
    63                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F4331 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95   000000                     
    96                           	psect	idataCOMRAM
    97   000ADC                     __pidataCOMRAM:
    98                           	callstack 0
    99                           
   100                           ;initializer for FSM_begin@F2893
   101   000ADC  0002               	dw	2
   102   000ADE  3C                 	db	low _Watering_Done_cb
   103   000ADF  0A                 	db	high _Watering_Done_cb
   104   000AE0  00                 	db	0
   105   000AE1  00                 	db	0
   106   000AE2  00                 	db	0
   107   000AE3  00                 	db	0
   108                           
   109                           ;initializer for FSM_begin@F2890
   110   000AE4  0004               	dw	4
   111   000AE6  20                 	db	low _Check_Moisture_cb
   112   000AE7  0A                 	db	high _Check_Moisture_cb
   113   000AE8  00                 	db	0
   114   000AE9  00                 	db	0
   115   000AEA  00                 	db	0
   116   000AEB  00                 	db	0
   117   000000                     _RCREG	set	4014
   118   000000                     _TXREG	set	4013
   119   000000                     _TXSTAbits	set	4012
   120   000000                     _SPBRG	set	4015
   121   000000                     _SPBRGH	set	4016
   122   000000                     _ADRESL	set	4035
   123   000000                     _ADRESH	set	4036
   124                           
   125                           	psect	nvCOMRAM
   126   000047                     __pnvCOMRAM:
   127                           	callstack 0
   128   000047                     _FSM_state:
   129                           	callstack 0
   130   000047                     	ds	1
   131   000000                     _TRISC	set	3988
   132   000000                     _TRISBbits	set	3987
   133   000000                     _PORTBbits	set	3969
   134   000000                     _TRISB	set	3987
   135   000000                     _ADCHSbits	set	3993
   136   000000                     _ADCON1bits	set	4033
   137   000000                     _ADCON0bits	set	4034
   138   000000                     _PIR1bits	set	3998
   139   000000                     _RCSTAbits	set	4011
   140   000000                     _ANSEL0bits	set	4024
   141   000000                     _ADCON2bits	set	4032
   142   000000                     _RCONbits	set	4048
   143   000000                     _OSCCONbits	set	4051
   144   000000                     _T0CONbits	set	4053
   145   000000                     _INTCON2bits	set	4081
   146   000000                     _INTCONbits	set	4082
   147   000000                     _TMR0H	set	4055
   148   000000                     _TMR0L	set	4054
   149   000000                     _TRISD	set	3989
   150   000000                     _TRISCbits	set	3988
   151   000000                     _LATC	set	3979
   152   000000                     _LATD	set	3980
   153                           
   154                           	psect	smallconst
   155   000300                     __psmallconst:
   156                           	callstack 0
   157   000300  00                 	db	0
   158   000301                     STR_4:
   159   000301  20                 	db	32
   160   000302  3E                 	db	62	;'>'
   161   000303  57                 	db	87	;'W'
   162   000304  41                 	db	65	;'A'
   163   000305  54                 	db	84	;'T'
   164   000306  45                 	db	69	;'E'
   165   000307  52                 	db	82	;'R'
   166   000308  49                 	db	73	;'I'
   167   000309  4E                 	db	78	;'N'
   168   00030A  47                 	db	71	;'G'
   169   00030B  20                 	db	32
   170   00030C  50                 	db	80	;'P'
   171   00030D  4C                 	db	76	;'L'
   172   00030E  41                 	db	65	;'A'
   173   00030F  4E                 	db	78	;'N'
   174   000310  54                 	db	84	;'T'
   175   000311  53                 	db	83	;'S'
   176   000312  3C                 	db	60	;'<'
   177   000313  00                 	db	0
   178   000314  00                 	db	0
   179   000315                     STR_2:
   180   000315  53                 	db	83	;'S'
   181   000316  79                 	db	121	;'y'
   182   000317  73                 	db	115	;'s'
   183   000318  74                 	db	116	;'t'
   184   000319  65                 	db	101	;'e'
   185   00031A  6D                 	db	109	;'m'
   186   00031B  20                 	db	32
   187   00031C  49                 	db	73	;'I'
   188   00031D  6E                 	db	110	;'n'
   189   00031E  69                 	db	105	;'i'
   190   00031F  74                 	db	116	;'t'
   191   000320  69                 	db	105	;'i'
   192   000321  61                 	db	97	;'a'
   193   000322  6C                 	db	108	;'l'
   194   000323  2E                 	db	46
   195   000324  2E                 	db	46
   196   000325  2E                 	db	46
   197   000326  00                 	db	0
   198   000327  00                 	db	0
   199   000328                     STR_5:
   200   000328  20                 	db	32
   201   000329  3E                 	db	62	;'>'
   202   00032A  43                 	db	67	;'C'
   203   00032B  48                 	db	72	;'H'
   204   00032C  45                 	db	69	;'E'
   205   00032D  43                 	db	67	;'C'
   206   00032E  4B                 	db	75	;'K'
   207   00032F  49                 	db	73	;'I'
   208   000330  4E                 	db	78	;'N'
   209   000331  47                 	db	71	;'G'
   210   000332  20                 	db	32
   211   000333  4D                 	db	77	;'M'
   212   000334  4F                 	db	79	;'O'
   213   000335  49                 	db	73	;'I'
   214   000336  53                 	db	83	;'S'
   215   000337  54                 	db	84	;'T'
   216   000338  3C                 	db	60	;'<'
   217   000339  00                 	db	0
   218   00033A  00                 	db	0
   219   00033B                     STR_1:
   220   00033B  20                 	db	32
   221   00033C  50                 	db	80	;'P'
   222   00033D  6C                 	db	108	;'l'
   223   00033E  61                 	db	97	;'a'
   224   00033F  6E                 	db	110	;'n'
   225   000340  74                 	db	116	;'t'
   226   000341  20                 	db	32
   227   000342  57                 	db	87	;'W'
   228   000343  61                 	db	97	;'a'
   229   000344  74                 	db	116	;'t'
   230   000345  65                 	db	101	;'e'
   231   000346  72                 	db	114	;'r'
   232   000347  69                 	db	105	;'i'
   233   000348  6E                 	db	110	;'n'
   234   000349  67                 	db	103	;'g'
   235   00034A  00                 	db	0
   236   00034B  00                 	db	0
   237   00034C                     STR_3:
   238   00034C  20                 	db	32
   239   00034D  3E                 	db	62	;'>'
   240   00034E  49                 	db	73	;'I'
   241   00034F  44                 	db	68	;'D'
   242   000350  4C                 	db	76	;'L'
   243   000351  45                 	db	69	;'E'
   244   000352  20                 	db	32
   245   000353  53                 	db	83	;'S'
   246   000354  54                 	db	84	;'T'
   247   000355  41                 	db	65	;'A'
   248   000356  54                 	db	84	;'T'
   249   000357  45                 	db	69	;'E'
   250   000358  3C                 	db	60	;'<'
   251   000359  00                 	db	0
   252   00035A  00                 	db	0
   253   00035B  00                 	db	0	; dummy byte at the end
   254   000000                     
   255                           ; #config settings
   256                           
   257                           	psect	cinit
   258   00090E                     __pcinit:
   259                           	callstack 0
   260   00090E                     start_initialization:
   261                           	callstack 0
   262   00090E                     __initialization:
   263                           	callstack 0
   264                           
   265                           ; Initialize objects allocated to COMRAM (16 bytes)
   266                           ; load TBLPTR registers with __pidataCOMRAM
   267   00090E  0EDC               	movlw	low __pidataCOMRAM
   268   000910  6EF6               	movwf	tblptrl,c
   269   000912  0E0A               	movlw	high __pidataCOMRAM
   270   000914  6EF7               	movwf	tblptrh,c
   271   000916  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   272   000918  6EF8               	movwf	tblptru,c
   273   00091A  EE00  F02D         	lfsr	0,__pdataCOMRAM
   274   00091E  EE10 F010          	lfsr	1,16
   275   000922                     copy_data0:
   276   000922  0009               	tblrd		*+
   277   000924  CFF5 FFEE          	movff	tablat,postinc0
   278   000928  50E5               	movf	postdec1,w,c
   279   00092A  50E1               	movf	fsr1l,w,c
   280   00092C  E1FA               	bnz	copy_data0
   281                           
   282                           ; Clear objects allocated to BANK0 (40 bytes)
   283   00092E  EE00  F060         	lfsr	0,__pbssBANK0
   284   000932  0E28               	movlw	40
   285   000934                     clear_0:
   286   000934  6AEE               	clrf	postinc0,c
   287   000936  06E8               	decf	wreg,f,c
   288   000938  E1FD               	bnz	clear_0
   289                           
   290                           ; Clear objects allocated to COMRAM (10 bytes)
   291   00093A  EE00  F03D         	lfsr	0,__pbssCOMRAM
   292   00093E  0E0A               	movlw	10
   293   000940                     clear_1:
   294   000940  6AEE               	clrf	postinc0,c
   295   000942  06E8               	decf	wreg,f,c
   296   000944  E1FD               	bnz	clear_1
   297   000946                     end_of_initialization:
   298                           	callstack 0
   299   000946                     __end_of__initialization:
   300                           	callstack 0
   301   000946  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   302   000948  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   303   00094A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   304   00094C  6EF8               	movwf	tblptru,c
   305   00094E  0100               	movlb	0
   306   000950  EFAA  F004         	goto	_main	;jump to C main() function
   307                           
   308                           	psect	bssCOMRAM
   309   00003D                     __pbssCOMRAM:
   310                           	callstack 0
   311   00003D                     _tmr0Counter@SystemInterrupts$F995:
   312                           	callstack 0
   313   00003D                     	ds	2
   314   00003F                     _tmr0Counter:
   315                           	callstack 0
   316   00003F                     	ds	2
   317   000041                     _ADC:
   318                           	callstack 0
   319   000041                     	ds	2
   320   000043                     _rx_data:
   321                           	callstack 0
   322   000043                     	ds	1
   323   000044                     _rx_flag:
   324                           	callstack 0
   325   000044                     	ds	1
   326   000045                     _pump_status:
   327                           	callstack 0
   328   000045                     	ds	1
   329   000046                     _callback_count:
   330                           	callstack 0
   331   000046                     	ds	1
   332                           
   333                           	psect	dataCOMRAM
   334   00002D                     __pdataCOMRAM:
   335                           	callstack 0
   336   00002D                     FSM_begin@F2893:
   337                           	callstack 0
   338   00002D                     	ds	8
   339   000035                     FSM_begin@F2890:
   340                           	callstack 0
   341   000035                     	ds	8
   342                           
   343                           	psect	bssBANK0
   344   000060                     __pbssBANK0:
   345                           	callstack 0
   346   000060                     _registered_callbacks:
   347                           	callstack 0
   348   000060                     	ds	40
   349                           
   350                           	psect	cstackCOMRAM
   351   000001                     __pcstackCOMRAM:
   352                           	callstack 0
   353   000001                     i2set_state@state_to_set:
   354                           	callstack 0
   355                           
   356                           ; 1 bytes @ 0x0
   357   000001                     	ds	1
   358   000002                     
   359                           ; 1 bytes @ 0x1
   360   000002                     	ds	4
   361   000006                     Callbacks_Manager@callbacks:
   362                           	callstack 0
   363                           
   364                           ; 1 bytes @ 0x5
   365   000006                     	ds	1
   366   000007                     ??_timer_overflow_isr:
   367                           
   368                           ; 1 bytes @ 0x6
   369   000007                     	ds	8
   370   00000F                     ??_init_leds:
   371   00000F                     ?_ADC_Read:
   372                           	callstack 0
   373   00000F                     LCD_DATA@Data:
   374                           	callstack 0
   375   00000F                     set_state@state_to_set:
   376                           	callstack 0
   377   00000F                     Callbacks_Init@callback:
   378                           	callstack 0
   379   00000F                     UART2_send@data:
   380                           	callstack 0
   381   00000F                     Reset_Counter@config:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0xE
   385   00000F                     	ds	1
   386   000010                     LCD_CMD@CMD:
   387                           	callstack 0
   388   000010                     LCD_Write_Char@Low4:
   389                           	callstack 0
   390   000010                     SMS_Set_State@moisture:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0xF
   394   000010                     	ds	1
   395   000011                     ??_LCD_Init:
   396   000011                     ?_SMS_Read_Moisture_Value:
   397                           	callstack 0
   398   000011                     LCD_Set_Cursor@c:
   399                           	callstack 0
   400   000011                     LCD_Write_Char@High4:
   401                           	callstack 0
   402   000011                     Register_Callback@config:
   403                           	callstack 0
   404                           
   405                           ; 2 bytes @ 0x10
   406   000011                     	ds	1
   407   000012                     LCD_Set_Cursor@r:
   408                           	callstack 0
   409   000012                     LCD_Write_Char@Data:
   410                           	callstack 0
   411                           
   412                           ; 1 bytes @ 0x11
   413   000012                     	ds	1
   414   000013                     LCD_Set_Cursor@Low4:
   415                           	callstack 0
   416   000013                     LCD_Write_String@str:
   417                           	callstack 0
   418   000013                     SMS_Read_Moisture_Value@moisture:
   419                           	callstack 0
   420                           
   421                           ; 2 bytes @ 0x12
   422   000013                     	ds	1
   423   000014                     LCD_Set_Cursor@High4:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0x13
   427   000014                     	ds	1
   428   000015                     ??_LCD_Write_String:
   429   000015                     LCD_Set_Cursor@Temp:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0x14
   433   000015                     	ds	2
   434   000017                     LCD_Write_String@i:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x16
   438   000017                     	ds	2
   439   000019                     ??_FSM_begin:
   440                           
   441                           ; 1 bytes @ 0x18
   442   000019                     	ds	2
   443   00001B                     FSM_begin@MoistureCB_Config:
   444                           	callstack 0
   445                           
   446                           ; 8 bytes @ 0x1A
   447   00001B                     	ds	8
   448   000023                     FSM_begin@WateringDoneCB_Config:
   449                           	callstack 0
   450                           
   451                           ; 8 bytes @ 0x22
   452   000023                     	ds	8
   453   00002B                     FSM_begin@moisture:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x2A
   457   00002B                     	ds	2
   458   00002D                     
   459                           ; 1 bytes @ 0x2C
   460 ;;
   461 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   462 ;;
   463 ;; *************** function _main *****************
   464 ;; Defined at:
   465 ;;		line 17 in file "main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   474 ;; Tracked objects:
   475 ;;		On entry : 0/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   479 ;;      Params:         0       0       0       0
   480 ;;      Locals:         0       0       0       0
   481 ;;      Temps:          0       0       0       0
   482 ;;      Totals:         0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels required when called: 8
   485 ;; This function calls:
   486 ;;		_FSM_begin
   487 ;;		_Timer0_init
   488 ;;		_Timer0_stop
   489 ;;		_UART2_init
   490 ;;		_UART2_send
   491 ;;		_set_state
   492 ;; This function is called by:
   493 ;;		Startup code after reset
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           	psect	text0
   498   000954                     __ptext0:
   499                           	callstack 0
   500   000954                     _main:
   501                           	callstack 23
   502   000954                     
   503                           ;main.c: 20:     OSCCONbits.IRCF0 = 1;
   504   000954  88D3               	bsf	211,4,c	;volatile
   505                           
   506                           ;main.c: 21:     OSCCONbits.IRCF1 = 1;
   507   000956  8AD3               	bsf	211,5,c	;volatile
   508                           
   509                           ;main.c: 22:     OSCCONbits.IRCF2 = 1;
   510   000958  8CD3               	bsf	211,6,c	;volatile
   511                           
   512                           ;main.c: 25:     TRISCbits.RC3 = 1;
   513   00095A  8694               	bsf	148,3,c	;volatile
   514   00095C                     
   515                           ;main.c: 28:     Timer0_stop();
   516   00095C  ECA7  F005         	call	_Timer0_stop	;wreg free
   517   000960                     
   518                           ;main.c: 31:     RCONbits.IPEN = 1;
   519   000960  8ED0               	bsf	208,7,c	;volatile
   520   000962                     
   521                           ;main.c: 34:     INTCONbits.TMR0IE = 1;
   522   000962  8AF2               	bsf	242,5,c	;volatile
   523   000964                     
   524                           ;main.c: 37:     INTCONbits.INT0IE = 1;
   525   000964  88F2               	bsf	242,4,c	;volatile
   526   000966                     
   527                           ;main.c: 40:     INTCON2bits.TMR0IP = 1;
   528   000966  84F1               	bsf	241,2,c	;volatile
   529   000968                     
   530                           ;main.c: 43:     Timer0_init();
   531   000968  EC38  F005         	call	_Timer0_init	;wreg free
   532   00096C                     
   533                           ;main.c: 46:     INTCON2bits.INTEDG0 = 1;
   534   00096C  8CF1               	bsf	241,6,c	;volatile
   535   00096E                     
   536                           ;main.c: 52:     UART2_init();
   537   00096E  ECF4  F004         	call	_UART2_init	;wreg free
   538   000972                     
   539                           ;main.c: 55:     INTCONbits.GIEH = 1;
   540   000972  8EF2               	bsf	242,7,c	;volatile
   541   000974                     
   542                           ;main.c: 56:     INTCONbits.GIEL = 1;
   543   000974  8CF2               	bsf	242,6,c	;volatile
   544   000976                     
   545                           ;main.c: 59:     set_state(INIT_STATE);
   546   000976  0E00               	movlw	0
   547   000978  EC99  F005         	call	_set_state
   548   00097C                     
   549                           ;main.c: 60:     UART2_send('S');
   550   00097C  0E53               	movlw	83
   551   00097E  EC43  F005         	call	_UART2_send
   552   000982                     l1730:
   553                           
   554                           ;main.c: 62:     {;main.c: 63:      FSM_begin();
   555   000982  ECAE  F001         	call	_FSM_begin	;wreg free
   556   000986  EFC1  F004         	goto	l1730
   557   00098A  EF5E  F000         	goto	start
   558   00098E                     __end_of_main:
   559                           	callstack 0
   560                           
   561 ;; *************** function _UART2_init *****************
   562 ;; Defined at:
   563 ;;		line 14 in file "PIC18F4331_UART2.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, status,2
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   577 ;;      Params:         0       0       0       0
   578 ;;      Locals:         0       0       0       0
   579 ;;      Temps:          0       0       0       0
   580 ;;      Totals:         0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used: 1
   583 ;; Hardware stack levels required when called: 4
   584 ;; This function calls:
   585 ;;		Nothing
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text1
   592   0009E8                     __ptext1:
   593                           	callstack 0
   594   0009E8                     _UART2_init:
   595                           	callstack 26
   596   0009E8                     
   597                           ;PIC18F4331_UART2.c: 16:     TRISCbits.RC6 = 0;
   598   0009E8  9C94               	bcf	148,6,c	;volatile
   599                           
   600                           ;PIC18F4331_UART2.c: 17:     TRISCbits.RC7 = 1;
   601   0009EA  8E94               	bsf	148,7,c	;volatile
   602                           
   603                           ;PIC18F4331_UART2.c: 20:     RCSTAbits.SPEN = 1;
   604   0009EC  8EAB               	bsf	171,7,c	;volatile
   605   0009EE                     
   606                           ;PIC18F4331_UART2.c: 23:     SPBRGH = 0;
   607   0009EE  0E00               	movlw	0
   608   0009F0  6EB0               	movwf	176,c	;volatile
   609                           
   610                           ;PIC18F4331_UART2.c: 24:     SPBRG = 51;
   611   0009F2  0E33               	movlw	51
   612   0009F4  6EAF               	movwf	175,c	;volatile
   613   0009F6                     
   614                           ;PIC18F4331_UART2.c: 27:     TXSTAbits.TX9 = 0;
   615   0009F6  9CAC               	bcf	172,6,c	;volatile
   616   0009F8                     
   617                           ;PIC18F4331_UART2.c: 28:     TXSTAbits.TXEN = 1;
   618   0009F8  8AAC               	bsf	172,5,c	;volatile
   619   0009FA                     
   620                           ;PIC18F4331_UART2.c: 29:     TXSTAbits.SYNC = 0;
   621   0009FA  98AC               	bcf	172,4,c	;volatile
   622   0009FC                     
   623                           ;PIC18F4331_UART2.c: 30:     TXSTAbits.BRGH = 1;
   624   0009FC  84AC               	bsf	172,2,c	;volatile
   625   0009FE                     
   626                           ;PIC18F4331_UART2.c: 31:     RCSTAbits.RX9 = 0;
   627   0009FE  9CAB               	bcf	171,6,c	;volatile
   628   000A00                     
   629                           ;PIC18F4331_UART2.c: 32:     RCSTAbits.CREN = 1;
   630   000A00  88AB               	bsf	171,4,c	;volatile
   631   000A02  0012               	return		;funcret
   632   000A04                     __end_of_UART2_init:
   633                           	callstack 0
   634                           
   635 ;; *************** function _Timer0_stop *****************
   636 ;; Defined at:
   637 ;;		line 92 in file "PIC18F4331_Timer.c"
   638 ;; Parameters:    Size  Location     Type
   639 ;;		None
   640 ;; Auto vars:     Size  Location     Type
   641 ;;		None
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		None
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   651 ;;      Params:         0       0       0       0
   652 ;;      Locals:         0       0       0       0
   653 ;;      Temps:          0       0       0       0
   654 ;;      Totals:         0       0       0       0
   655 ;;Total ram usage:        0 bytes
   656 ;; Hardware stack levels used: 1
   657 ;; Hardware stack levels required when called: 4
   658 ;; This function calls:
   659 ;;		Nothing
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text2
   666   000B4E                     __ptext2:
   667                           	callstack 0
   668   000B4E                     _Timer0_stop:
   669                           	callstack 26
   670   000B4E                     
   671                           ;PIC18F4331_Timer.c: 94:     T0CONbits.TMR0ON = 0;
   672   000B4E  9ED5               	bcf	213,7,c	;volatile
   673   000B50  0012               	return		;funcret
   674   000B52                     __end_of_Timer0_stop:
   675                           	callstack 0
   676                           
   677 ;; *************** function _Timer0_init *****************
   678 ;; Defined at:
   679 ;;		line 56 in file "PIC18F4331_Timer.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, status,2
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   693 ;;      Params:         0       0       0       0
   694 ;;      Locals:         0       0       0       0
   695 ;;      Temps:          0       0       0       0
   696 ;;      Totals:         0       0       0       0
   697 ;;Total ram usage:        0 bytes
   698 ;; Hardware stack levels used: 1
   699 ;; Hardware stack levels required when called: 4
   700 ;; This function calls:
   701 ;;		Nothing
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text3
   708   000A70                     __ptext3:
   709                           	callstack 0
   710   000A70                     _Timer0_init:
   711                           	callstack 26
   712   000A70                     
   713                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   714   000A70  80D5               	bsf	213,0,c	;volatile
   715                           
   716                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 0;
   717   000A72  92D5               	bcf	213,1,c	;volatile
   718                           
   719                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   720   000A74  84D5               	bsf	213,2,c	;volatile
   721                           
   722                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   723   000A76  96D5               	bcf	213,3,c	;volatile
   724                           
   725                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   726   000A78  9AD5               	bcf	213,5,c	;volatile
   727                           
   728                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   729   000A7A  9CD5               	bcf	213,6,c	;volatile
   730   000A7C                     
   731                           ;PIC18F4331_Timer.c: 80:     TMR0L = (0x7C);
   732   000A7C  0E7C               	movlw	124
   733   000A7E  6ED6               	movwf	214,c	;volatile
   734                           
   735                           ;PIC18F4331_Timer.c: 81:     TMR0H = (0xE1);
   736   000A80  0EE1               	movlw	225
   737   000A82  6ED7               	movwf	215,c	;volatile
   738   000A84  0012               	return		;funcret
   739   000A86                     __end_of_Timer0_init:
   740                           	callstack 0
   741                           
   742 ;; *************** function _FSM_begin *****************
   743 ;; Defined at:
   744 ;;		line 37 in file "System_FSM.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;		None
   747 ;; Auto vars:     Size  Location     Type
   748 ;;  moisture        2   42[COMRAM] unsigned short 
   749 ;;  WateringDone    8   34[COMRAM] struct .
   750 ;;  MoistureCB_C    8   26[COMRAM] struct .
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   760 ;;      Params:         0       0       0       0
   761 ;;      Locals:        18       0       0       0
   762 ;;      Temps:          2       0       0       0
   763 ;;      Totals:        20       0       0       0
   764 ;;Total ram usage:       20 bytes
   765 ;; Hardware stack levels used: 1
   766 ;; Hardware stack levels required when called: 7
   767 ;; This function calls:
   768 ;;		_Callbacks_Init
   769 ;;		_LCD_Clear
   770 ;;		_LCD_Init
   771 ;;		_LCD_Set_Cursor
   772 ;;		_LCD_Write_String
   773 ;;		_Register_Callback
   774 ;;		_SMS_Read_Moisture_Value
   775 ;;		_SMS_Set_State
   776 ;;		_SMS_init
   777 ;;		_Timer0_start
   778 ;;		_UART2_send
   779 ;;		_WaterPump_Init
   780 ;;		_WaterPump_OFF
   781 ;;		_WaterPump_ON
   782 ;;		_checking_moisture_status_led
   783 ;;		_get_current_state
   784 ;;		_idle_status_led
   785 ;;		_init_leds
   786 ;;		_set_state
   787 ;;		_watering_status_led
   788 ;; This function is called by:
   789 ;;		_main
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793                           	psect	text4
   794   00035C                     __ptext4:
   795                           	callstack 0
   796   00035C                     _FSM_begin:
   797                           	callstack 23
   798   00035C                     
   799                           ;System_FSM.c: 39:     switch(get_current_state())
   800   00035C  EF88  F002         	goto	l1678
   801   000360                     l1588:
   802                           
   803                           ;System_FSM.c: 42:         {;System_FSM.c: 43:             SMS_init();
   804   000360  ECA1  F005         	call	_SMS_init	;wreg free
   805   000364                     
   806                           ;System_FSM.c: 44:             Callbacks_Init();
   807   000364  EC3D  F004         	call	_Callbacks_Init	;wreg free
   808   000368                     
   809                           ;System_FSM.c: 45:             WaterPump_Init();
   810   000368  EC8C  F005         	call	_WaterPump_Init	;wreg free
   811   00036C                     
   812                           ;System_FSM.c: 47:             Callback_Config_t MoistureCB_Config =
   813   00036C  EE20  F035         	lfsr	2,FSM_begin@F2890
   814   000370  EE10  F01B         	lfsr	1,FSM_begin@MoistureCB_Config
   815   000374  0E07               	movlw	7
   816   000376                     u511:
   817   000376  CFDB FFE3          	movff	plusw2,plusw1
   818   00037A  06E8               	decf	wreg,f,c
   819   00037C  E2FC               	bc	u511
   820   00037E                     
   821                           ;System_FSM.c: 53:             Callback_Config_t WateringDoneCB_Config =
   822   00037E  EE20  F02D         	lfsr	2,FSM_begin@F2893
   823   000382  EE10  F023         	lfsr	1,FSM_begin@WateringDoneCB_Config
   824   000386  0E07               	movlw	7
   825   000388                     u521:
   826   000388  CFDB FFE3          	movff	plusw2,plusw1
   827   00038C  06E8               	decf	wreg,f,c
   828   00038E  E2FC               	bc	u521
   829   000390                     
   830                           ;System_FSM.c: 59:             Register_Callback(&MoistureCB_Config);
   831   000390  0E1B               	movlw	low FSM_begin@MoistureCB_Config
   832   000392  6E11               	movwf	Register_Callback@config^0,c
   833   000394  0E00               	movlw	high FSM_begin@MoistureCB_Config
   834   000396  6E12               	movwf	(Register_Callback@config+1)^0,c
   835   000398  EC0B  F003         	call	_Register_Callback	;wreg free
   836   00039C                     
   837                           ;System_FSM.c: 60:             Register_Callback(&WateringDoneCB_Config);
   838   00039C  0E23               	movlw	low FSM_begin@WateringDoneCB_Config
   839   00039E  6E11               	movwf	Register_Callback@config^0,c
   840   0003A0  0E00               	movlw	high FSM_begin@WateringDoneCB_Config
   841   0003A2  6E12               	movwf	(Register_Callback@config+1)^0,c
   842   0003A4  EC0B  F003         	call	_Register_Callback	;wreg free
   843   0003A8                     
   844                           ;System_FSM.c: 62:             init_leds();
   845   0003A8  ECC7  F004         	call	_init_leds	;wreg free
   846   0003AC                     
   847                           ;System_FSM.c: 64:             LCD_Init();
   848   0003AC  EC48  F003         	call	_LCD_Init	;wreg free
   849   0003B0                     
   850                           ;System_FSM.c: 66:             LCD_Clear();
   851   0003B0  EC76  F005         	call	_LCD_Clear	;wreg free
   852   0003B4                     
   853                           ;System_FSM.c: 67:             LCD_Set_Cursor(1,1);
   854   0003B4  0E01               	movlw	1
   855   0003B6  6E11               	movwf	LCD_Set_Cursor@c^0,c
   856   0003B8  0E01               	movlw	1
   857   0003BA  EC84  F003         	call	_LCD_Set_Cursor
   858   0003BE                     
   859                           ;System_FSM.c: 68:             LCD_Write_String(" Plant Watering\0");
   860   0003BE  0E3B               	movlw	low STR_1
   861   0003C0  6E13               	movwf	LCD_Write_String@str^0,c
   862   0003C2  0E03               	movlw	high STR_1
   863   0003C4  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   864   0003C6  EC12  F004         	call	_LCD_Write_String	;wreg free
   865   0003CA                     
   866                           ;System_FSM.c: 69:             LCD_Set_Cursor(2,1);
   867   0003CA  0E01               	movlw	1
   868   0003CC  6E11               	movwf	LCD_Set_Cursor@c^0,c
   869   0003CE  0E02               	movlw	2
   870   0003D0  EC84  F003         	call	_LCD_Set_Cursor
   871   0003D4                     
   872                           ;System_FSM.c: 70:             LCD_Write_String("System Initial...\0");
   873   0003D4  0E15               	movlw	low STR_2
   874   0003D6  6E13               	movwf	LCD_Write_String@str^0,c
   875   0003D8  0E03               	movlw	high STR_2
   876   0003DA  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   877   0003DC  EC12  F004         	call	_LCD_Write_String	;wreg free
   878   0003E0                     
   879                           ;System_FSM.c: 72:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   880   0003E0  0E0B               	movlw	11
   881   0003E2  6E1A               	movwf	(??_FSM_begin+1)^0,c
   882   0003E4  0E26               	movlw	38
   883   0003E6  6E19               	movwf	??_FSM_begin^0,c
   884   0003E8  0E5E               	movlw	94
   885   0003EA                     u657:
   886   0003EA  2EE8               	decfsz	wreg,f,c
   887   0003EC  D7FE               	bra	u657
   888   0003EE  2E19               	decfsz	??_FSM_begin^0,f,c
   889   0003F0  D7FC               	bra	u657
   890   0003F2  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   891   0003F4  D7FA               	bra	u657
   892   0003F6                     
   893                           ;System_FSM.c: 74:             Timer0_start();
   894   0003F6  ECAB  F005         	call	_Timer0_start	;wreg free
   895   0003FA                     
   896                           ;System_FSM.c: 76:             set_state(IDLE_STATE);
   897   0003FA  0E01               	movlw	1
   898   0003FC  EC99  F005         	call	_set_state
   899                           
   900                           ;System_FSM.c: 78:             break;
   901   000400  EFA6  F002         	goto	l231
   902   000404                     l1622:
   903                           
   904                           ;System_FSM.c: 82:         {;System_FSM.c: 84:             UART2_send('S');
   905   000404  0E53               	movlw	83
   906   000406  EC43  F005         	call	_UART2_send
   907   00040A                     
   908                           ;System_FSM.c: 86:             LCD_Clear();
   909   00040A  EC76  F005         	call	_LCD_Clear	;wreg free
   910   00040E                     
   911                           ;System_FSM.c: 87:             LCD_Set_Cursor(1,1);
   912   00040E  0E01               	movlw	1
   913   000410  6E11               	movwf	LCD_Set_Cursor@c^0,c
   914   000412  0E01               	movlw	1
   915   000414  EC84  F003         	call	_LCD_Set_Cursor
   916   000418                     
   917                           ;System_FSM.c: 88:             LCD_Write_String(" >IDLE STATE<\0");
   918   000418  0E4C               	movlw	low STR_3
   919   00041A  6E13               	movwf	LCD_Write_String@str^0,c
   920   00041C  0E03               	movlw	high STR_3
   921   00041E  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   922   000420  EC12  F004         	call	_LCD_Write_String	;wreg free
   923   000424                     
   924                           ;System_FSM.c: 90:             WaterPump_OFF();
   925   000424  EC95  F005         	call	_WaterPump_OFF	;wreg free
   926   000428                     
   927                           ;System_FSM.c: 91:             idle_status_led();
   928   000428  EC82  F005         	call	_idle_status_led	;wreg free
   929   00042C                     l1634:
   930                           
   931                           ;System_FSM.c: 94:             while(get_current_state() == IDLE_STATE)
   932   00042C  ECA9  F005         	call	_get_current_state	;wreg free
   933   000430  06E8               	decf	wreg,f,c
   934   000432  B4D8               	btfsc	status,2,c
   935   000434  EF1E  F002         	goto	u531
   936   000438  EF20  F002         	goto	u530
   937   00043C                     u531:
   938   00043C  EF16  F002         	goto	l1634
   939   000440                     u530:
   940   000440  EFA6  F002         	goto	l231
   941   000444                     l1636:
   942                           
   943                           ;System_FSM.c: 105:         {;System_FSM.c: 107:             UART2_send('W');
   944   000444  0E57               	movlw	87
   945   000446  EC43  F005         	call	_UART2_send
   946   00044A                     
   947                           ;System_FSM.c: 109:             WaterPump_ON();
   948   00044A  EC91  F005         	call	_WaterPump_ON	;wreg free
   949   00044E                     
   950                           ;System_FSM.c: 110:             LCD_Clear();
   951   00044E  EC76  F005         	call	_LCD_Clear	;wreg free
   952   000452                     
   953                           ;System_FSM.c: 111:             LCD_Set_Cursor(1,1);
   954   000452  0E01               	movlw	1
   955   000454  6E11               	movwf	LCD_Set_Cursor@c^0,c
   956   000456  0E01               	movlw	1
   957   000458  EC84  F003         	call	_LCD_Set_Cursor
   958   00045C                     
   959                           ;System_FSM.c: 112:             LCD_Write_String(" >WATERING PLANTS<\0");
   960   00045C  0E01               	movlw	low STR_4
   961   00045E  6E13               	movwf	LCD_Write_String@str^0,c
   962   000460  0E03               	movlw	high STR_4
   963   000462  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   964   000464  EC12  F004         	call	_LCD_Write_String	;wreg free
   965                           
   966                           ;System_FSM.c: 116:             while(get_current_state() == WATER_PLANTS)
   967   000468  EF38  F002         	goto	l1648
   968   00046C                     l1646:
   969                           
   970                           ;System_FSM.c: 117:             {;System_FSM.c: 121:               watering_status_led()
      +                          ;
   971   00046C  EC7D  F005         	call	_watering_status_led	;wreg free
   972   000470                     l1648:
   973                           
   974                           ;System_FSM.c: 116:             while(get_current_state() == WATER_PLANTS)
   975   000470  ECA9  F005         	call	_get_current_state	;wreg free
   976   000474  0A02               	xorlw	2
   977   000476  B4D8               	btfsc	status,2,c
   978   000478  EF40  F002         	goto	u541
   979   00047C  EF42  F002         	goto	u540
   980   000480                     u541:
   981   000480  EF36  F002         	goto	l1646
   982   000484                     u540:
   983   000484  EFA6  F002         	goto	l231
   984   000488                     l1650:
   985                           
   986                           ;System_FSM.c: 129:         {;System_FSM.c: 133:             UART2_send('M');
   987   000488  0E4D               	movlw	77
   988   00048A  EC43  F005         	call	_UART2_send
   989   00048E                     
   990                           ;System_FSM.c: 136:             LCD_Clear();
   991   00048E  EC76  F005         	call	_LCD_Clear	;wreg free
   992   000492                     
   993                           ;System_FSM.c: 137:             LCD_Set_Cursor(1,1);
   994   000492  0E01               	movlw	1
   995   000494  6E11               	movwf	LCD_Set_Cursor@c^0,c
   996   000496  0E01               	movlw	1
   997   000498  EC84  F003         	call	_LCD_Set_Cursor
   998   00049C                     
   999                           ;System_FSM.c: 138:             LCD_Write_String(" >CHECKING MOIST<\0");
  1000   00049C  0E28               	movlw	low STR_5
  1001   00049E  6E13               	movwf	LCD_Write_String@str^0,c
  1002   0004A0  0E03               	movlw	high STR_5
  1003   0004A2  6E14               	movwf	(LCD_Write_String@str+1)^0,c
  1004   0004A4  EC12  F004         	call	_LCD_Write_String	;wreg free
  1005   0004A8                     
  1006                           ;System_FSM.c: 139:             WaterPump_OFF();
  1007   0004A8  EC95  F005         	call	_WaterPump_OFF	;wreg free
  1008   0004AC                     
  1009                           ;System_FSM.c: 141:             checking_moisture_status_led();
  1010   0004AC  EC87  F005         	call	_checking_moisture_status_led	;wreg free
  1011   0004B0                     
  1012                           ;System_FSM.c: 142:             _delay((unsigned long)((1000)*(8000000/4000.0)));
  1013   0004B0  0E0B               	movlw	11
  1014   0004B2  6E1A               	movwf	(??_FSM_begin+1)^0,c
  1015   0004B4  0E26               	movlw	38
  1016   0004B6  6E19               	movwf	??_FSM_begin^0,c
  1017   0004B8  0E5E               	movlw	94
  1018   0004BA                     u667:
  1019   0004BA  2EE8               	decfsz	wreg,f,c
  1020   0004BC  D7FE               	bra	u667
  1021   0004BE  2E19               	decfsz	??_FSM_begin^0,f,c
  1022   0004C0  D7FC               	bra	u667
  1023   0004C2  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
  1024   0004C4  D7FA               	bra	u667
  1025   0004C6                     
  1026                           ;System_FSM.c: 144:             U16 moisture = SMS_Read_Moisture_Value();
  1027   0004C6  EC4E  F005         	call	_SMS_Read_Moisture_Value	;wreg free
  1028   0004CA  C011  F02B         	movff	?_SMS_Read_Moisture_Value,FSM_begin@moisture
  1029   0004CE  C012  F02C         	movff	?_SMS_Read_Moisture_Value+1,FSM_begin@moisture+1
  1030   0004D2                     
  1031                           ;System_FSM.c: 146:             if(moisture > 65000)
  1032   0004D2  0EE9               	movlw	233
  1033   0004D4  5C2B               	subwf	FSM_begin@moisture^0,w,c
  1034   0004D6  0EFD               	movlw	253
  1035   0004D8  582C               	subwfb	(FSM_begin@moisture+1)^0,w,c
  1036   0004DA  A0D8               	btfss	status,0,c
  1037   0004DC  EF72  F002         	goto	u551
  1038   0004E0  EF74  F002         	goto	u550
  1039   0004E4                     u551:
  1040   0004E4  EF78  F002         	goto	l1670
  1041   0004E8                     u550:
  1042   0004E8                     
  1043                           ;System_FSM.c: 147:                 moisture = 1000;
  1044   0004E8  0E03               	movlw	3
  1045   0004EA  6E2C               	movwf	(FSM_begin@moisture+1)^0,c
  1046   0004EC  0EE8               	movlw	232
  1047   0004EE  6E2B               	movwf	FSM_begin@moisture^0,c
  1048   0004F0                     l1670:
  1049                           
  1050                           ;System_FSM.c: 149:             UART2_send((U8)moisture);
  1051   0004F0  502B               	movf	FSM_begin@moisture^0,w,c
  1052   0004F2  EC43  F005         	call	_UART2_send
  1053   0004F6                     
  1054                           ;System_FSM.c: 150:             SMS_Set_State(moisture);
  1055   0004F6  C02B  F010         	movff	FSM_begin@moisture,SMS_Set_State@moisture
  1056   0004FA  C02C  F011         	movff	FSM_begin@moisture+1,SMS_Set_State@moisture+1
  1057   0004FE  ECB5  F003         	call	_SMS_Set_State	;wreg free
  1058                           
  1059                           ;System_FSM.c: 154:             break;
  1060   000502  EFA6  F002         	goto	l231
  1061   000506                     l1674:
  1062                           
  1063                           ;System_FSM.c: 158:         {;System_FSM.c: 159:             set_state(INIT_STATE);
  1064   000506  0E00               	movlw	0
  1065   000508  EC99  F005         	call	_set_state
  1066                           
  1067                           ;System_FSM.c: 160:             break;
  1068   00050C  EFA6  F002         	goto	l231
  1069   000510                     l1678:
  1070   000510  ECA9  F005         	call	_get_current_state	;wreg free
  1071   000514  6E19               	movwf	??_FSM_begin^0,c
  1072   000516  6A1A               	clrf	(??_FSM_begin+1)^0,c
  1073                           
  1074                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1075                           ; Switch size 1, requested type "simple"
  1076                           ; Number of cases is 1, Range of values is 0 to 0
  1077                           ; switch strategies available:
  1078                           ; Name         Instructions Cycles
  1079                           ; simple_byte            4     3 (average)
  1080                           ;	Chosen strategy is simple_byte
  1081   000518  501A               	movf	(??_FSM_begin+1)^0,w,c
  1082   00051A  0A00               	xorlw	0	; case 0
  1083   00051C  B4D8               	btfsc	status,2,c
  1084   00051E  EF93  F002         	goto	l1764
  1085   000522  EF83  F002         	goto	l1674
  1086   000526                     l1764:
  1087                           
  1088                           ; Switch size 1, requested type "simple"
  1089                           ; Number of cases is 4, Range of values is 0 to 3
  1090                           ; switch strategies available:
  1091                           ; Name         Instructions Cycles
  1092                           ; simple_byte           13     7 (average)
  1093                           ;	Chosen strategy is simple_byte
  1094   000526  5019               	movf	??_FSM_begin^0,w,c
  1095   000528  0A00               	xorlw	0	; case 0
  1096   00052A  B4D8               	btfsc	status,2,c
  1097   00052C  EFB0  F001         	goto	l1588
  1098   000530  0A01               	xorlw	1	; case 1
  1099   000532  B4D8               	btfsc	status,2,c
  1100   000534  EF02  F002         	goto	l1622
  1101   000538  0A03               	xorlw	3	; case 2
  1102   00053A  B4D8               	btfsc	status,2,c
  1103   00053C  EF22  F002         	goto	l1636
  1104   000540  0A01               	xorlw	1	; case 3
  1105   000542  B4D8               	btfsc	status,2,c
  1106   000544  EF44  F002         	goto	l1650
  1107   000548  EF83  F002         	goto	l1674
  1108   00054C                     l231:
  1109   00054C  0012               	return		;funcret
  1110   00054E                     __end_of_FSM_begin:
  1111                           	callstack 0
  1112                           
  1113 ;; *************** function _watering_status_led *****************
  1114 ;; Defined at:
  1115 ;;		line 40 in file "LedDriver.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		status,2, status,0
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1129 ;;      Params:         0       0       0       0
  1130 ;;      Locals:         0       0       0       0
  1131 ;;      Temps:          0       0       0       0
  1132 ;;      Totals:         0       0       0       0
  1133 ;;Total ram usage:        0 bytes
  1134 ;; Hardware stack levels used: 1
  1135 ;; Hardware stack levels required when called: 4
  1136 ;; This function calls:
  1137 ;;		Nothing
  1138 ;; This function is called by:
  1139 ;;		_FSM_begin
  1140 ;; This function uses a non-reentrant model
  1141 ;;
  1142                           
  1143                           	psect	text5
  1144   000AFA                     __ptext5:
  1145                           	callstack 0
  1146   000AFA                     _watering_status_led:
  1147                           	callstack 25
  1148   000AFA                     
  1149                           ;LedDriver.c: 42:     (((LATD))|=((0x01)));
  1150   000AFA  808C               	bsf	140,0,c	;volatile
  1151                           
  1152                           ;LedDriver.c: 44:     (((LATC))&=(~((0x02))));
  1153   000AFC  928B               	bcf	139,1,c	;volatile
  1154                           
  1155                           ;LedDriver.c: 45:     (((LATC))&=(~((0x04))));
  1156   000AFE  948B               	bcf	139,2,c	;volatile
  1157                           
  1158                           ;LedDriver.c: 46:     (((LATD))&=(~((0x02))));
  1159   000B00  928C               	bcf	140,1,c	;volatile
  1160   000B02  0012               	return		;funcret
  1161   000B04                     __end_of_watering_status_led:
  1162                           	callstack 0
  1163                           
  1164 ;; *************** function _init_leds *****************
  1165 ;; Defined at:
  1166 ;;		line 12 in file "LedDriver.c"
  1167 ;; Parameters:    Size  Location     Type
  1168 ;;		None
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;		None
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg, status,2, status,0
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1180 ;;      Params:         0       0       0       0
  1181 ;;      Locals:         0       0       0       0
  1182 ;;      Temps:          2       0       0       0
  1183 ;;      Totals:         2       0       0       0
  1184 ;;Total ram usage:        2 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; Hardware stack levels required when called: 4
  1187 ;; This function calls:
  1188 ;;		Nothing
  1189 ;; This function is called by:
  1190 ;;		_FSM_begin
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           	psect	text6
  1195   00098E                     __ptext6:
  1196                           	callstack 0
  1197   00098E                     _init_leds:
  1198                           	callstack 25
  1199   00098E                     
  1200                           ;LedDriver.c: 14:     (((TRISC))&=(~((0x02))));
  1201   00098E  9294               	bcf	148,1,c	;volatile
  1202                           
  1203                           ;LedDriver.c: 15:     (((TRISC))&=(~((0x04))));
  1204   000990  9494               	bcf	148,2,c	;volatile
  1205                           
  1206                           ;LedDriver.c: 16:     (((TRISD))&=(~((0x02))));
  1207   000992  9295               	bcf	149,1,c	;volatile
  1208                           
  1209                           ;LedDriver.c: 17:     (((TRISD))&=(~((0x01))));
  1210   000994  9095               	bcf	149,0,c	;volatile
  1211                           
  1212                           ;LedDriver.c: 19:     (((LATC))|=((0x02)));
  1213   000996  828B               	bsf	139,1,c	;volatile
  1214                           
  1215                           ;LedDriver.c: 20:     (((LATC))|=((0x04)));
  1216   000998  848B               	bsf	139,2,c	;volatile
  1217                           
  1218                           ;LedDriver.c: 21:     (((LATD))|=((0x02)));
  1219   00099A  828C               	bsf	140,1,c	;volatile
  1220                           
  1221                           ;LedDriver.c: 22:     (((LATD))|=((0x01)));
  1222   00099C  808C               	bsf	140,0,c	;volatile
  1223   00099E                     
  1224                           ;LedDriver.c: 24:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1225   00099E  0E0B               	movlw	11
  1226   0009A0  6E10               	movwf	(??_init_leds+1)^0,c
  1227   0009A2  0E26               	movlw	38
  1228   0009A4  6E0F               	movwf	??_init_leds^0,c
  1229   0009A6  0E5E               	movlw	94
  1230   0009A8                     u677:
  1231   0009A8  2EE8               	decfsz	wreg,f,c
  1232   0009AA  D7FE               	bra	u677
  1233   0009AC  2E0F               	decfsz	??_init_leds^0,f,c
  1234   0009AE  D7FC               	bra	u677
  1235   0009B0  2E10               	decfsz	(??_init_leds+1)^0,f,c
  1236   0009B2  D7FA               	bra	u677
  1237   0009B4                     
  1238                           ;LedDriver.c: 26:     (((LATC))&=(~((0x02))));
  1239   0009B4  928B               	bcf	139,1,c	;volatile
  1240   0009B6                     
  1241                           ;LedDriver.c: 27:     (((LATC))&=(~((0x04))));
  1242   0009B6  948B               	bcf	139,2,c	;volatile
  1243   0009B8                     
  1244                           ;LedDriver.c: 28:     (((LATD))&=(~((0x02))));
  1245   0009B8  928C               	bcf	140,1,c	;volatile
  1246   0009BA                     
  1247                           ;LedDriver.c: 29:     (((LATD))&=(~((0x01))));
  1248   0009BA  908C               	bcf	140,0,c	;volatile
  1249   0009BC  0012               	return		;funcret
  1250   0009BE                     __end_of_init_leds:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _idle_status_led *****************
  1254 ;; Defined at:
  1255 ;;		line 32 in file "LedDriver.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;		None
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;		None
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      void 
  1262 ;; Registers used:
  1263 ;;		status,2, status,0
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1269 ;;      Params:         0       0       0       0
  1270 ;;      Locals:         0       0       0       0
  1271 ;;      Temps:          0       0       0       0
  1272 ;;      Totals:         0       0       0       0
  1273 ;;Total ram usage:        0 bytes
  1274 ;; Hardware stack levels used: 1
  1275 ;; Hardware stack levels required when called: 4
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_FSM_begin
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text7
  1284   000B04                     __ptext7:
  1285                           	callstack 0
  1286   000B04                     _idle_status_led:
  1287                           	callstack 25
  1288   000B04                     
  1289                           ;LedDriver.c: 34:     (((LATC))|=((0x04)));
  1290   000B04  848B               	bsf	139,2,c	;volatile
  1291                           
  1292                           ;LedDriver.c: 36:     (((LATC))&=(~((0x02))));
  1293   000B06  928B               	bcf	139,1,c	;volatile
  1294                           
  1295                           ;LedDriver.c: 37:     (((LATD))&=(~((0x01))));
  1296   000B08  908C               	bcf	140,0,c	;volatile
  1297                           
  1298                           ;LedDriver.c: 38:     (((LATD))&=(~((0x02))));
  1299   000B0A  928C               	bcf	140,1,c	;volatile
  1300   000B0C  0012               	return		;funcret
  1301   000B0E                     __end_of_idle_status_led:
  1302                           	callstack 0
  1303                           
  1304 ;; *************** function _get_current_state *****************
  1305 ;; Defined at:
  1306 ;;		line 5 in file "FSM_states.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;		None
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      enum E2
  1313 ;; Registers used:
  1314 ;;		wreg, status,2
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1320 ;;      Params:         0       0       0       0
  1321 ;;      Locals:         0       0       0       0
  1322 ;;      Temps:          0       0       0       0
  1323 ;;      Totals:         0       0       0       0
  1324 ;;Total ram usage:        0 bytes
  1325 ;; Hardware stack levels used: 1
  1326 ;; Hardware stack levels required when called: 4
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_FSM_begin
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text8
  1335   000B52                     __ptext8:
  1336                           	callstack 0
  1337   000B52                     _get_current_state:
  1338                           	callstack 25
  1339   000B52                     
  1340                           ;FSM_states.c: 7:     return FSM_state;
  1341   000B52  5047               	movf	_FSM_state^0,w,c
  1342   000B54  0012               	return		;funcret
  1343   000B56                     __end_of_get_current_state:
  1344                           	callstack 0
  1345                           
  1346 ;; *************** function _checking_moisture_status_led *****************
  1347 ;; Defined at:
  1348 ;;		line 49 in file "LedDriver.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      void 
  1355 ;; Registers used:
  1356 ;;		status,2, status,0
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1362 ;;      Params:         0       0       0       0
  1363 ;;      Locals:         0       0       0       0
  1364 ;;      Temps:          0       0       0       0
  1365 ;;      Totals:         0       0       0       0
  1366 ;;Total ram usage:        0 bytes
  1367 ;; Hardware stack levels used: 1
  1368 ;; Hardware stack levels required when called: 4
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		_FSM_begin
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           	psect	text9
  1377   000B0E                     __ptext9:
  1378                           	callstack 0
  1379   000B0E                     _checking_moisture_status_led:
  1380                           	callstack 25
  1381   000B0E                     
  1382                           ;LedDriver.c: 51:     (((LATD))|=((0x02)));
  1383   000B0E  828C               	bsf	140,1,c	;volatile
  1384                           
  1385                           ;LedDriver.c: 53:     (((LATC))&=(~((0x02))));
  1386   000B10  928B               	bcf	139,1,c	;volatile
  1387                           
  1388                           ;LedDriver.c: 54:     (((LATC))&=(~((0x04))));
  1389   000B12  948B               	bcf	139,2,c	;volatile
  1390                           
  1391                           ;LedDriver.c: 55:     (((LATD))&=(~((0x01))));
  1392   000B14  908C               	bcf	140,0,c	;volatile
  1393   000B16  0012               	return		;funcret
  1394   000B18                     __end_of_checking_moisture_status_led:
  1395                           	callstack 0
  1396                           
  1397 ;; *************** function _WaterPump_ON *****************
  1398 ;; Defined at:
  1399 ;;		line 25 in file "WaterPump_Driver.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1413 ;;      Params:         0       0       0       0
  1414 ;;      Locals:         0       0       0       0
  1415 ;;      Temps:          0       0       0       0
  1416 ;;      Totals:         0       0       0       0
  1417 ;;Total ram usage:        0 bytes
  1418 ;; Hardware stack levels used: 1
  1419 ;; Hardware stack levels required when called: 4
  1420 ;; This function calls:
  1421 ;;		Nothing
  1422 ;; This function is called by:
  1423 ;;		_FSM_begin
  1424 ;;		_WaterPump_Toggle
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text10
  1429   000B22                     __ptext10:
  1430                           	callstack 0
  1431   000B22                     _WaterPump_ON:
  1432                           	callstack 25
  1433   000B22                     
  1434                           ;WaterPump_Driver.c: 27:     (((LATD))|=((0x04)));
  1435   000B22  848C               	bsf	140,2,c	;volatile
  1436   000B24                     
  1437                           ;WaterPump_Driver.c: 28:     pump_status = PUMP_ON;
  1438   000B24  0E00               	movlw	0
  1439   000B26  6E45               	movwf	_pump_status^0,c
  1440   000B28  0012               	return		;funcret
  1441   000B2A                     __end_of_WaterPump_ON:
  1442                           	callstack 0
  1443                           
  1444 ;; *************** function _WaterPump_OFF *****************
  1445 ;; Defined at:
  1446 ;;		line 31 in file "WaterPump_Driver.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;		None
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;		None
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      void 
  1453 ;; Registers used:
  1454 ;;		wreg, status,2, status,0
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1460 ;;      Params:         0       0       0       0
  1461 ;;      Locals:         0       0       0       0
  1462 ;;      Temps:          0       0       0       0
  1463 ;;      Totals:         0       0       0       0
  1464 ;;Total ram usage:        0 bytes
  1465 ;; Hardware stack levels used: 1
  1466 ;; Hardware stack levels required when called: 4
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_FSM_begin
  1471 ;;		_WaterPump_Toggle
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text11
  1476   000B2A                     __ptext11:
  1477                           	callstack 0
  1478   000B2A                     _WaterPump_OFF:
  1479                           	callstack 25
  1480   000B2A                     
  1481                           ;WaterPump_Driver.c: 33:     (((LATD))&=(~((0x04))));
  1482   000B2A  948C               	bcf	140,2,c	;volatile
  1483   000B2C                     
  1484                           ;WaterPump_Driver.c: 34:     pump_status = PUMP_OFF;
  1485   000B2C  0E01               	movlw	1
  1486   000B2E  6E45               	movwf	_pump_status^0,c
  1487   000B30  0012               	return		;funcret
  1488   000B32                     __end_of_WaterPump_OFF:
  1489                           	callstack 0
  1490                           
  1491 ;; *************** function _WaterPump_Init *****************
  1492 ;; Defined at:
  1493 ;;		line 17 in file "WaterPump_Driver.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1507 ;;      Params:         0       0       0       0
  1508 ;;      Locals:         0       0       0       0
  1509 ;;      Temps:          0       0       0       0
  1510 ;;      Totals:         0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used: 1
  1513 ;; Hardware stack levels required when called: 4
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_FSM_begin
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text12
  1522   000B18                     __ptext12:
  1523                           	callstack 0
  1524   000B18                     _WaterPump_Init:
  1525                           	callstack 25
  1526   000B18                     
  1527                           ;WaterPump_Driver.c: 19:     (((TRISD))&=(~((0x04))));
  1528   000B18  9495               	bcf	149,2,c	;volatile
  1529                           
  1530                           ;WaterPump_Driver.c: 20:     (((LATD))&=(~((0x04))));
  1531   000B1A  948C               	bcf	140,2,c	;volatile
  1532   000B1C                     
  1533                           ;WaterPump_Driver.c: 21:     pump_status = PUMP_OFF;
  1534   000B1C  0E01               	movlw	1
  1535   000B1E  6E45               	movwf	_pump_status^0,c
  1536   000B20  0012               	return		;funcret
  1537   000B22                     __end_of_WaterPump_Init:
  1538                           	callstack 0
  1539                           
  1540 ;; *************** function _UART2_send *****************
  1541 ;; Defined at:
  1542 ;;		line 35 in file "PIC18F4331_UART2.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  data            1    wreg     unsigned char 
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;  data            1   14[COMRAM] unsigned char 
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  1    wreg      void 
  1549 ;; Registers used:
  1550 ;;		wreg
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1556 ;;      Params:         0       0       0       0
  1557 ;;      Locals:         1       0       0       0
  1558 ;;      Temps:          0       0       0       0
  1559 ;;      Totals:         1       0       0       0
  1560 ;;Total ram usage:        1 bytes
  1561 ;; Hardware stack levels used: 1
  1562 ;; Hardware stack levels required when called: 4
  1563 ;; This function calls:
  1564 ;;		Nothing
  1565 ;; This function is called by:
  1566 ;;		_main
  1567 ;;		_FSM_begin
  1568 ;;		_putch
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text13
  1573   000A86                     __ptext13:
  1574                           	callstack 0
  1575   000A86                     _UART2_send:
  1576                           	callstack 26
  1577                           
  1578                           ;incstack = 0
  1579                           ;UART2_send@data stored from wreg
  1580   000A86  6E0F               	movwf	UART2_send@data^0,c
  1581   000A88                     l353:
  1582                           
  1583                           ;PIC18F4331_UART2.c: 37:     while(0 == PIR1bits.TXIF)
  1584   000A88  A89E               	btfss	158,4,c	;volatile
  1585   000A8A  EF49  F005         	goto	u101
  1586   000A8E  EF4B  F005         	goto	u100
  1587   000A92                     u101:
  1588   000A92  EF44  F005         	goto	l353
  1589   000A96                     u100:
  1590   000A96                     
  1591                           ;PIC18F4331_UART2.c: 42:     TXREG = data;
  1592   000A96  C00F  FFAD         	movff	UART2_send@data,4013	;volatile
  1593   000A9A  0012               	return		;funcret
  1594   000A9C                     __end_of_UART2_send:
  1595                           	callstack 0
  1596                           
  1597 ;; *************** function _Timer0_start *****************
  1598 ;; Defined at:
  1599 ;;		line 86 in file "PIC18F4331_Timer.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		None
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1613 ;;      Params:         0       0       0       0
  1614 ;;      Locals:         0       0       0       0
  1615 ;;      Temps:          0       0       0       0
  1616 ;;      Totals:         0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 4
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_FSM_begin
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           	psect	text14
  1628   000B56                     __ptext14:
  1629                           	callstack 0
  1630   000B56                     _Timer0_start:
  1631                           	callstack 25
  1632   000B56                     
  1633                           ;PIC18F4331_Timer.c: 88:     T0CONbits.TMR0ON = 1;
  1634   000B56  8ED5               	bsf	213,7,c	;volatile
  1635   000B58  0012               	return		;funcret
  1636   000B5A                     __end_of_Timer0_start:
  1637                           	callstack 0
  1638                           
  1639 ;; *************** function _SMS_init *****************
  1640 ;; Defined at:
  1641 ;;		line 8 in file "SoilMoistureSensor.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;		None
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1655 ;;      Params:         0       0       0       0
  1656 ;;      Locals:         0       0       0       0
  1657 ;;      Temps:          0       0       0       0
  1658 ;;      Totals:         0       0       0       0
  1659 ;;Total ram usage:        0 bytes
  1660 ;; Hardware stack levels used: 1
  1661 ;; Hardware stack levels required when called: 6
  1662 ;; This function calls:
  1663 ;;		_ADC_init
  1664 ;; This function is called by:
  1665 ;;		_FSM_begin
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text15
  1670   000B42                     __ptext15:
  1671                           	callstack 0
  1672   000B42                     _SMS_init:
  1673                           	callstack 23
  1674   000B42                     
  1675                           ;SoilMoistureSensor.c: 10:     ADC_init();
  1676   000B42  EC02  F005         	call	_ADC_init	;wreg free
  1677   000B46  0012               	return		;funcret
  1678   000B48                     __end_of_SMS_init:
  1679                           	callstack 0
  1680                           
  1681 ;; *************** function _ADC_init *****************
  1682 ;; Defined at:
  1683 ;;		line 24 in file "PIC18F4331_ADC.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;		None
  1686 ;; Auto vars:     Size  Location     Type
  1687 ;;		None
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1697 ;;      Params:         0       0       0       0
  1698 ;;      Locals:         0       0       0       0
  1699 ;;      Temps:          0       0       0       0
  1700 ;;      Totals:         0       0       0       0
  1701 ;;Total ram usage:        0 bytes
  1702 ;; Hardware stack levels used: 1
  1703 ;; Hardware stack levels required when called: 5
  1704 ;; This function calls:
  1705 ;;		_ADC_stop
  1706 ;; This function is called by:
  1707 ;;		_SMS_init
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text16
  1712   000A04                     __ptext16:
  1713                           	callstack 0
  1714   000A04                     _ADC_init:
  1715                           	callstack 23
  1716   000A04                     
  1717                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
  1718   000A04  ECAD  F005         	call	_ADC_stop	;wreg free
  1719   000A08                     
  1720                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
  1721   000A08  0E3F               	movlw	-193
  1722   000A0A  16C1               	andwf	193,f,c	;volatile
  1723   000A0C                     
  1724                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
  1725   000A0C  9099               	bcf	153,0,c	;volatile
  1726   000A0E                     
  1727                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
  1728   000A0E  9299               	bcf	153,1,c	;volatile
  1729   000A10                     
  1730                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
  1731   000A10  9AC2               	bcf	194,5,c	;volatile
  1732   000A12                     
  1733                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
  1734   000A12  0EF8               	movlw	-8
  1735   000A14  16C0               	andwf	192,f,c	;volatile
  1736   000A16                     
  1737                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
  1738   000A16  8EC0               	bsf	192,7,c	;volatile
  1739   000A18                     
  1740                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
  1741   000A18  0E87               	movlw	-121
  1742   000A1A  16C0               	andwf	192,f,c	;volatile
  1743   000A1C                     
  1744                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
  1745   000A1C  80B8               	bsf	184,0,c	;volatile
  1746   000A1E  0012               	return		;funcret
  1747   000A20                     __end_of_ADC_init:
  1748                           	callstack 0
  1749                           
  1750 ;; *************** function _ADC_stop *****************
  1751 ;; Defined at:
  1752 ;;		line 19 in file "PIC18F4331_ADC.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		None
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1766 ;;      Params:         0       0       0       0
  1767 ;;      Locals:         0       0       0       0
  1768 ;;      Temps:          0       0       0       0
  1769 ;;      Totals:         0       0       0       0
  1770 ;;Total ram usage:        0 bytes
  1771 ;; Hardware stack levels used: 1
  1772 ;; Hardware stack levels required when called: 4
  1773 ;; This function calls:
  1774 ;;		Nothing
  1775 ;; This function is called by:
  1776 ;;		_ADC_init
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text17
  1781   000B5A                     __ptext17:
  1782                           	callstack 0
  1783   000B5A                     _ADC_stop:
  1784                           	callstack 23
  1785   000B5A                     
  1786                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1787   000B5A  90C2               	bcf	194,0,c	;volatile
  1788   000B5C  0012               	return		;funcret
  1789   000B5E                     __end_of_ADC_stop:
  1790                           	callstack 0
  1791                           
  1792 ;; *************** function _SMS_Set_State *****************
  1793 ;; Defined at:
  1794 ;;		line 19 in file "SoilMoistureSensor.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  moisture        2   15[COMRAM] unsigned short 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;		None
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  1    wreg      void 
  1801 ;; Registers used:
  1802 ;;		wreg, status,2, status,0, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1808 ;;      Params:         2       0       0       0
  1809 ;;      Locals:         0       0       0       0
  1810 ;;      Temps:          0       0       0       0
  1811 ;;      Totals:         2       0       0       0
  1812 ;;Total ram usage:        2 bytes
  1813 ;; Hardware stack levels used: 1
  1814 ;; Hardware stack levels required when called: 5
  1815 ;; This function calls:
  1816 ;;		_set_state
  1817 ;; This function is called by:
  1818 ;;		_FSM_begin
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text18
  1823   00076A                     __ptext18:
  1824                           	callstack 0
  1825   00076A                     _SMS_Set_State:
  1826                           	callstack 24
  1827   00076A                     
  1828                           ;SoilMoistureSensor.c: 19: void SMS_Set_State(U16 moisture);SoilMoistureSensor.c: 20: {;
      +                          SoilMoistureSensor.c: 21:     if(moisture >= (595))
  1829   00076A  0E53               	movlw	83
  1830   00076C  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1831   00076E  0E02               	movlw	2
  1832   000770  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1833   000772  A0D8               	btfss	status,0,c
  1834   000774  EFBE  F003         	goto	u411
  1835   000778  EFC0  F003         	goto	u410
  1836   00077C                     u411:
  1837   00077C  EFC5  F003         	goto	l1542
  1838   000780                     u410:
  1839   000780                     
  1840                           ;SoilMoistureSensor.c: 22:     {;SoilMoistureSensor.c: 23:         set_state(WATER_PLANT
      +                          S);
  1841   000780  0E02               	movlw	2
  1842   000782  EC99  F005         	call	_set_state
  1843                           
  1844                           ;SoilMoistureSensor.c: 24:     }
  1845   000786  EFE3  F003         	goto	l152
  1846   00078A                     l1542:
  1847   00078A  5011               	movf	(SMS_Set_State@moisture+1)^0,w,c
  1848   00078C  E109               	bnz	u420
  1849   00078E  0EEF               	movlw	239
  1850   000790  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1851   000792  A0D8               	btfss	status,0,c
  1852   000794  EFCE  F003         	goto	u421
  1853   000798  EFD0  F003         	goto	u420
  1854   00079C                     u421:
  1855   00079C  EFE0  F003         	goto	l1548
  1856   0007A0                     u420:
  1857   0007A0  0E53               	movlw	83
  1858   0007A2  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1859   0007A4  0E02               	movlw	2
  1860   0007A6  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1861   0007A8  B0D8               	btfsc	status,0,c
  1862   0007AA  EFD9  F003         	goto	u431
  1863   0007AE  EFDB  F003         	goto	u430
  1864   0007B2                     u431:
  1865   0007B2  EFE0  F003         	goto	l1548
  1866   0007B6                     u430:
  1867   0007B6                     
  1868                           ;SoilMoistureSensor.c: 26:     {;SoilMoistureSensor.c: 28:         set_state(IDLE_STATE)
      +                          ;
  1869   0007B6  0E01               	movlw	1
  1870   0007B8  EC99  F005         	call	_set_state
  1871                           
  1872                           ;SoilMoistureSensor.c: 29:     }
  1873   0007BC  EFE3  F003         	goto	l152
  1874   0007C0                     l1548:
  1875                           
  1876                           ;SoilMoistureSensor.c: 31:     {;SoilMoistureSensor.c: 32:         set_state(IDLE_STATE)
      +                          ;
  1877   0007C0  0E01               	movlw	1
  1878   0007C2  EC99  F005         	call	_set_state
  1879   0007C6                     l152:
  1880   0007C6  0012               	return		;funcret
  1881   0007C8                     __end_of_SMS_Set_State:
  1882                           	callstack 0
  1883                           
  1884 ;; *************** function _set_state *****************
  1885 ;; Defined at:
  1886 ;;		line 9 in file "FSM_states.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;  state_to_set    1    wreg     enum E2
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  state_to_set    1   14[COMRAM] enum E2
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1900 ;;      Params:         0       0       0       0
  1901 ;;      Locals:         1       0       0       0
  1902 ;;      Temps:          0       0       0       0
  1903 ;;      Totals:         1       0       0       0
  1904 ;;Total ram usage:        1 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 4
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;;		_SMS_Set_State
  1912 ;;		_FSM_begin
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text19
  1917   000B32                     __ptext19:
  1918                           	callstack 0
  1919   000B32                     _set_state:
  1920                           	callstack 26
  1921                           
  1922                           ;incstack = 0
  1923                           ;set_state@state_to_set stored from wreg
  1924   000B32  6E0F               	movwf	set_state@state_to_set^0,c
  1925   000B34                     
  1926                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  1927   000B34  C00F  F047         	movff	set_state@state_to_set,_FSM_state
  1928   000B38  0012               	return		;funcret
  1929   000B3A                     __end_of_set_state:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function _SMS_Read_Moisture_Value *****************
  1933 ;; Defined at:
  1934 ;;		line 13 in file "SoilMoistureSensor.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  moisture        2   18[COMRAM] unsigned short 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  2   16[COMRAM] unsigned short 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1948 ;;      Params:         2       0       0       0
  1949 ;;      Locals:         2       0       0       0
  1950 ;;      Temps:          0       0       0       0
  1951 ;;      Totals:         4       0       0       0
  1952 ;;Total ram usage:        4 bytes
  1953 ;; Hardware stack levels used: 1
  1954 ;; Hardware stack levels required when called: 6
  1955 ;; This function calls:
  1956 ;;		_ADC_Read
  1957 ;; This function is called by:
  1958 ;;		_FSM_begin
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text20
  1963   000A9C                     __ptext20:
  1964                           	callstack 0
  1965   000A9C                     _SMS_Read_Moisture_Value:
  1966                           	callstack 23
  1967   000A9C                     
  1968                           ;SoilMoistureSensor.c: 15:     U16 moisture = ADC_Read();
  1969   000A9C  ECDF  F004         	call	_ADC_Read	;wreg free
  1970   000AA0  C00F  F013         	movff	?_ADC_Read,SMS_Read_Moisture_Value@moisture
  1971   000AA4  C010  F014         	movff	?_ADC_Read+1,SMS_Read_Moisture_Value@moisture+1
  1972   000AA8                     
  1973                           ;SoilMoistureSensor.c: 16:     return moisture;
  1974   000AA8  C013  F011         	movff	SMS_Read_Moisture_Value@moisture,?_SMS_Read_Moisture_Value
  1975   000AAC  C014  F012         	movff	SMS_Read_Moisture_Value@moisture+1,?_SMS_Read_Moisture_Value+1
  1976   000AB0  0012               	return		;funcret
  1977   000AB2                     __end_of_SMS_Read_Moisture_Value:
  1978                           	callstack 0
  1979                           
  1980 ;; *************** function _ADC_Read *****************
  1981 ;; Defined at:
  1982 ;;		line 60 in file "PIC18F4331_ADC.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  2   14[COMRAM] unsigned short 
  1989 ;; Registers used:
  1990 ;;		wreg, status,2, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1996 ;;      Params:         2       0       0       0
  1997 ;;      Locals:         0       0       0       0
  1998 ;;      Temps:          0       0       0       0
  1999 ;;      Totals:         2       0       0       0
  2000 ;;Total ram usage:        2 bytes
  2001 ;; Hardware stack levels used: 1
  2002 ;; Hardware stack levels required when called: 5
  2003 ;; This function calls:
  2004 ;;		_ADC_in_progress
  2005 ;;		_ADC_start
  2006 ;; This function is called by:
  2007 ;;		_SMS_Read_Moisture_Value
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text21
  2012   0009BE                     __ptext21:
  2013                           	callstack 0
  2014   0009BE                     _ADC_Read:
  2015                           	callstack 23
  2016   0009BE                     
  2017                           ;PIC18F4331_ADC.c: 62:     ADC_start();
  2018   0009BE  ECA4  F005         	call	_ADC_start	;wreg free
  2019   0009C2                     l1500:
  2020   0009C2  EC64  F005         	call	_ADC_in_progress	;wreg free
  2021   0009C6  0900               	iorlw	0
  2022   0009C8  A4D8               	btfss	status,2,c
  2023   0009CA  EFE9  F004         	goto	u371
  2024   0009CE  EFEB  F004         	goto	u370
  2025   0009D2                     u371:
  2026   0009D2  EFE1  F004         	goto	l1500
  2027   0009D6                     u370:
  2028   0009D6                     
  2029                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
  2030   0009D6  CFC4 F042          	movff	4036,_ADC+1	;volatile
  2031                           
  2032                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
  2033   0009DA  CFC3 F041          	movff	4035,_ADC	;volatile
  2034                           
  2035                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
  2036   0009DE  C041  F00F         	movff	_ADC,?_ADC_Read
  2037   0009E2  C042  F010         	movff	_ADC+1,?_ADC_Read+1
  2038   0009E6  0012               	return		;funcret
  2039   0009E8                     __end_of_ADC_Read:
  2040                           	callstack 0
  2041                           
  2042 ;; *************** function _ADC_start *****************
  2043 ;; Defined at:
  2044 ;;		line 13 in file "PIC18F4331_ADC.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      void 
  2051 ;; Registers used:
  2052 ;;		None
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2058 ;;      Params:         0       0       0       0
  2059 ;;      Locals:         0       0       0       0
  2060 ;;      Temps:          0       0       0       0
  2061 ;;      Totals:         0       0       0       0
  2062 ;;Total ram usage:        0 bytes
  2063 ;; Hardware stack levels used: 1
  2064 ;; Hardware stack levels required when called: 4
  2065 ;; This function calls:
  2066 ;;		Nothing
  2067 ;; This function is called by:
  2068 ;;		_ADC_Read
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text22
  2073   000B48                     __ptext22:
  2074                           	callstack 0
  2075   000B48                     _ADC_start:
  2076                           	callstack 23
  2077   000B48                     
  2078                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
  2079   000B48  80C2               	bsf	194,0,c	;volatile
  2080                           
  2081                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
  2082   000B4A  82C2               	bsf	194,1,c	;volatile
  2083   000B4C  0012               	return		;funcret
  2084   000B4E                     __end_of_ADC_start:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function _ADC_in_progress *****************
  2088 ;; Defined at:
  2089 ;;		line 53 in file "PIC18F4331_ADC.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      unsigned char 
  2096 ;; Registers used:
  2097 ;;		wreg
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2103 ;;      Params:         0       0       0       0
  2104 ;;      Locals:         0       0       0       0
  2105 ;;      Temps:          0       0       0       0
  2106 ;;      Totals:         0       0       0       0
  2107 ;;Total ram usage:        0 bytes
  2108 ;; Hardware stack levels used: 1
  2109 ;; Hardware stack levels required when called: 4
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_ADC_Read
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text23
  2118   000AC8                     __ptext23:
  2119                           	callstack 0
  2120   000AC8                     _ADC_in_progress:
  2121                           	callstack 23
  2122   000AC8                     
  2123                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
  2124   000AC8  B2C2               	btfsc	194,1,c	;volatile
  2125   000ACA  EF69  F005         	goto	u11
  2126   000ACE  EF6C  F005         	goto	u10
  2127   000AD2                     u11:
  2128   000AD2  0E01               	movlw	1
  2129   000AD4  EF6D  F005         	goto	u16
  2130   000AD8                     u10:
  2131   000AD8  0E00               	movlw	0
  2132   000ADA                     u16:
  2133   000ADA  0012               	return		;funcret
  2134   000ADC                     __end_of_ADC_in_progress:
  2135                           	callstack 0
  2136                           
  2137 ;; *************** function _Register_Callback *****************
  2138 ;; Defined at:
  2139 ;;		line 47 in file "SystemCallbacks.c"
  2140 ;; Parameters:    Size  Location     Type
  2141 ;;  config          2   16[COMRAM] PTR struct .
  2142 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      unsigned char 
  2147 ;; Registers used:
  2148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2154 ;;      Params:         2       0       0       0
  2155 ;;      Locals:         0       0       0       0
  2156 ;;      Temps:          2       0       0       0
  2157 ;;      Totals:         4       0       0       0
  2158 ;;Total ram usage:        4 bytes
  2159 ;; Hardware stack levels used: 1
  2160 ;; Hardware stack levels required when called: 5
  2161 ;; This function calls:
  2162 ;;		_Reset_Counter
  2163 ;; This function is called by:
  2164 ;;		_FSM_begin
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           	psect	text24
  2169   000616                     __ptext24:
  2170                           	callstack 0
  2171   000616                     _Register_Callback:
  2172                           	callstack 24
  2173   000616                     
  2174                           ;SystemCallbacks.c: 47: U8 Register_Callback(Callback_Config_t *config);SystemCallbacks.
      +                          c: 48: {;SystemCallbacks.c: 49:     if(callback_count < (5))
  2175   000616  0E05               	movlw	5
  2176   000618  6046               	cpfslt	_callback_count^0,c
  2177   00061A  EF11  F003         	goto	u471
  2178   00061E  EF13  F003         	goto	u470
  2179   000622                     u471:
  2180   000622  EF47  F003         	goto	l258
  2181   000626                     u470:
  2182   000626                     
  2183                           ;SystemCallbacks.c: 50:     {;SystemCallbacks.c: 51:         if(config->callback != ((vo
      +                          id*)0) && config->expiry_time > 0)
  2184   000626  EE20 F002          	lfsr	2,2
  2185   00062A  5011               	movf	Register_Callback@config^0,w,c
  2186   00062C  26D9               	addwf	fsr2l,f,c
  2187   00062E  5012               	movf	(Register_Callback@config+1)^0,w,c
  2188   000630  22DA               	addwfc	fsr2h,f,c
  2189   000632  50DE               	movf	postinc2,w,c
  2190   000634  10DE               	iorwf	postinc2,w,c
  2191   000636  B4D8               	btfsc	status,2,c
  2192   000638  EF20  F003         	goto	u481
  2193   00063C  EF22  F003         	goto	u480
  2194   000640                     u481:
  2195   000640  EF47  F003         	goto	l258
  2196   000644                     u480:
  2197   000644  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2198   000648  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2199   00064C  50DE               	movf	postinc2,w,c
  2200   00064E  10DE               	iorwf	postinc2,w,c
  2201   000650  B4D8               	btfsc	status,2,c
  2202   000652  EF2D  F003         	goto	u491
  2203   000656  EF2F  F003         	goto	u490
  2204   00065A                     u491:
  2205   00065A  EF47  F003         	goto	l258
  2206   00065E                     u490:
  2207   00065E                     
  2208                           ;SystemCallbacks.c: 52:         {;SystemCallbacks.c: 54:             registered_callback
      +                          s[callback_count] = (*config);
  2209   00065E  C011  FFD9         	movff	Register_Callback@config,fsr2l
  2210   000662  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  2211   000666  5046               	movf	_callback_count^0,w,c
  2212   000668  0D08               	mullw	8
  2213   00066A  0E60               	movlw	low _registered_callbacks
  2214   00066C  24F3               	addwf	243,w,c
  2215   00066E  6EE1               	movwf	fsr1l,c
  2216   000670  0E00               	movlw	high _registered_callbacks
  2217   000672  20F4               	addwfc	prodh,w,c
  2218   000674  6EE2               	movwf	fsr1h,c
  2219   000676  0E07               	movlw	7
  2220   000678                     u501:
  2221   000678  CFDB FFE3          	movff	plusw2,plusw1
  2222   00067C  06E8               	decf	wreg,f,c
  2223   00067E  E2FC               	bc	u501
  2224   000680                     
  2225                           ;SystemCallbacks.c: 55:             Reset_Counter(config);
  2226   000680  C011  F00F         	movff	Register_Callback@config,Reset_Counter@config
  2227   000684  C012  F010         	movff	Register_Callback@config+1,Reset_Counter@config+1
  2228   000688  EC59  F005         	call	_Reset_Counter	;wreg free
  2229   00068C                     
  2230                           ;SystemCallbacks.c: 57:             callback_count++;
  2231   00068C  2A46               	incf	_callback_count^0,f,c
  2232   00068E                     l258:
  2233   00068E  0012               	return		;funcret
  2234   000690                     __end_of_Register_Callback:
  2235                           	callstack 0
  2236                           
  2237 ;; *************** function _Reset_Counter *****************
  2238 ;; Defined at:
  2239 ;;		line 42 in file "SystemCallbacks.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  config          2   14[COMRAM] PTR struct .
  2242 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;		None
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2254 ;;      Params:         2       0       0       0
  2255 ;;      Locals:         0       0       0       0
  2256 ;;      Temps:          0       0       0       0
  2257 ;;      Totals:         2       0       0       0
  2258 ;;Total ram usage:        2 bytes
  2259 ;; Hardware stack levels used: 1
  2260 ;; Hardware stack levels required when called: 4
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_Register_Callback
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text25
  2269   000AB2                     __ptext25:
  2270                           	callstack 0
  2271   000AB2                     _Reset_Counter:
  2272                           	callstack 24
  2273   000AB2                     
  2274                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  2275   000AB2  EE20 F005          	lfsr	2,5
  2276   000AB6  500F               	movf	Reset_Counter@config^0,w,c
  2277   000AB8  26D9               	addwf	fsr2l,f,c
  2278   000ABA  5010               	movf	(Reset_Counter@config+1)^0,w,c
  2279   000ABC  22DA               	addwfc	fsr2h,f,c
  2280   000ABE  0E00               	movlw	0
  2281   000AC0  6EDE               	movwf	postinc2,c
  2282   000AC2  0E00               	movlw	0
  2283   000AC4  6EDD               	movwf	postdec2,c
  2284   000AC6  0012               	return		;funcret
  2285   000AC8                     __end_of_Reset_Counter:
  2286                           	callstack 0
  2287                           
  2288 ;; *************** function _LCD_Write_String *****************
  2289 ;; Defined at:
  2290 ;;		line 120 in file "LCD.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  str             2   18[COMRAM] PTR unsigned char 
  2293 ;;		 -> STR_5(19), STR_4(20), STR_3(15), STR_2(19), 
  2294 ;;		 -> STR_1(17), 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  i               2   22[COMRAM] int 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  1    wreg      void 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2306 ;;      Params:         2       0       0       0
  2307 ;;      Locals:         2       0       0       0
  2308 ;;      Temps:          2       0       0       0
  2309 ;;      Totals:         6       0       0       0
  2310 ;;Total ram usage:        6 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; Hardware stack levels required when called: 6
  2313 ;; This function calls:
  2314 ;;		_LCD_Write_Char
  2315 ;; This function is called by:
  2316 ;;		_FSM_begin
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text26
  2321   000824                     __ptext26:
  2322                           	callstack 0
  2323   000824                     _LCD_Write_String:
  2324                           	callstack 23
  2325   000824                     
  2326                           ;LCD.c: 120: void LCD_Write_String(char *str);LCD.c: 121: {;LCD.c: 122:   int i;;LCD.c: 
      +                          123:   for(i=0;str[i]!='\0';i++)
  2327   000824  0E00               	movlw	0
  2328   000826  6E18               	movwf	(LCD_Write_String@i+1)^0,c
  2329   000828  0E00               	movlw	0
  2330   00082A  6E17               	movwf	LCD_Write_String@i^0,c
  2331   00082C  EF28  F004         	goto	l1530
  2332   000830                     l1526:
  2333                           
  2334                           ;LCD.c: 124:     LCD_Write_Char(str[i]);
  2335   000830  5017               	movf	LCD_Write_String@i^0,w,c
  2336   000832  2413               	addwf	LCD_Write_String@str^0,w,c
  2337   000834  6E15               	movwf	??_LCD_Write_String^0,c
  2338   000836  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2339   000838  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2340   00083A  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2341   00083C  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2342   000840  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2343   000844                     	if	0	;tblptru may be non-zero
  2344   000844                     	endif
  2345   000844                     	if	0	;tblptru may be non-zero
  2346   000844                     	endif
  2347   000844  0008               	tblrd		*
  2348   000846  50F5               	movf	tablat,w,c
  2349   000848  EC63  F004         	call	_LCD_Write_Char
  2350   00084C  4A17               	infsnz	LCD_Write_String@i^0,f,c
  2351   00084E  2A18               	incf	(LCD_Write_String@i+1)^0,f,c
  2352   000850                     l1530:
  2353   000850  5017               	movf	LCD_Write_String@i^0,w,c
  2354   000852  2413               	addwf	LCD_Write_String@str^0,w,c
  2355   000854  6E15               	movwf	??_LCD_Write_String^0,c
  2356   000856  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2357   000858  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2358   00085A  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2359   00085C  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2360   000860  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2361   000864                     	if	0	;tblptru may be non-zero
  2362   000864                     	endif
  2363   000864                     	if	0	;tblptru may be non-zero
  2364   000864                     	endif
  2365   000864  0008               	tblrd		*
  2366   000866  50F5               	movf	tablat,w,c
  2367   000868  0900               	iorlw	0
  2368   00086A  A4D8               	btfss	status,2,c
  2369   00086C  EF3A  F004         	goto	u401
  2370   000870  EF3C  F004         	goto	u400
  2371   000874                     u401:
  2372   000874  EF18  F004         	goto	l1526
  2373   000878                     u400:
  2374   000878  0012               	return		;funcret
  2375   00087A                     __end_of_LCD_Write_String:
  2376                           	callstack 0
  2377                           
  2378 ;; *************** function _LCD_Write_Char *****************
  2379 ;; Defined at:
  2380 ;;		line 102 in file "LCD.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  Data            1    wreg     unsigned char 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  Data            1   17[COMRAM] unsigned char 
  2385 ;;  High4           1   16[COMRAM] unsigned char 
  2386 ;;  Low4            1   15[COMRAM] unsigned char 
  2387 ;; Return value:  Size  Location     Type
  2388 ;;                  1    wreg      void 
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0, cstack
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2396 ;;      Params:         0       0       0       0
  2397 ;;      Locals:         3       0       0       0
  2398 ;;      Temps:          0       0       0       0
  2399 ;;      Totals:         3       0       0       0
  2400 ;;Total ram usage:        3 bytes
  2401 ;; Hardware stack levels used: 1
  2402 ;; Hardware stack levels required when called: 5
  2403 ;; This function calls:
  2404 ;;		_LCD_DATA
  2405 ;; This function is called by:
  2406 ;;		_LCD_Write_String
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text27
  2411   0008C6                     __ptext27:
  2412                           	callstack 0
  2413   0008C6                     _LCD_Write_Char:
  2414                           	callstack 23
  2415                           
  2416                           ;incstack = 0
  2417                           ;LCD_Write_Char@Data stored from wreg
  2418   0008C6  6E12               	movwf	LCD_Write_Char@Data^0,c
  2419   0008C8                     
  2420                           ;LCD.c: 102: void LCD_Write_Char(char Data);LCD.c: 103: {;LCD.c: 104:   char Low4,High4;
      +                          ;LCD.c: 105:   Low4 = Data & 0x0F;
  2421   0008C8  5012               	movf	LCD_Write_Char@Data^0,w,c
  2422   0008CA  0B0F               	andlw	15
  2423   0008CC  6E10               	movwf	LCD_Write_Char@Low4^0,c
  2424                           
  2425                           ;LCD.c: 106:   High4 = Data & 0xF0;
  2426   0008CE  5012               	movf	LCD_Write_Char@Data^0,w,c
  2427   0008D0  0BF0               	andlw	240
  2428   0008D2  6E11               	movwf	LCD_Write_Char@High4^0,c
  2429   0008D4                     
  2430                           ;LCD.c: 107:   PORTBbits.RB5 = 1;
  2431   0008D4  8A81               	bsf	129,5,c	;volatile
  2432   0008D6                     
  2433                           ;LCD.c: 108:   LCD_DATA(High4>>4);
  2434   0008D6  3811               	swapf	LCD_Write_Char@High4^0,w,c
  2435   0008D8  0B0F               	andlw	15
  2436   0008DA  ECE4  F003         	call	_LCD_DATA
  2437   0008DE                     
  2438                           ;LCD.c: 109:   PORTBbits.RB4 = 1;
  2439   0008DE  8881               	bsf	129,4,c	;volatile
  2440   0008E0                     
  2441                           ;LCD.c: 110:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2442   0008E0  0EA6               	movlw	166
  2443   0008E2                     u687:
  2444   0008E2  2EE8               	decfsz	wreg,f,c
  2445   0008E4  D7FE               	bra	u687
  2446   0008E6  D000               	nop2	
  2447   0008E8                     
  2448                           ;LCD.c: 111:   PORTBbits.RB4 = 0;
  2449   0008E8  9881               	bcf	129,4,c	;volatile
  2450   0008EA                     
  2451                           ;LCD.c: 112:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2452   0008EA  0EA6               	movlw	166
  2453   0008EC                     u697:
  2454   0008EC  2EE8               	decfsz	wreg,f,c
  2455   0008EE  D7FE               	bra	u697
  2456   0008F0  D000               	nop2	
  2457   0008F2                     
  2458                           ;LCD.c: 113:   LCD_DATA(Low4);
  2459   0008F2  5010               	movf	LCD_Write_Char@Low4^0,w,c
  2460   0008F4  ECE4  F003         	call	_LCD_DATA
  2461   0008F8                     
  2462                           ;LCD.c: 114:   PORTBbits.RB4 = 1;
  2463   0008F8  8881               	bsf	129,4,c	;volatile
  2464   0008FA                     
  2465                           ;LCD.c: 115:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2466   0008FA  0EA6               	movlw	166
  2467   0008FC                     u707:
  2468   0008FC  2EE8               	decfsz	wreg,f,c
  2469   0008FE  D7FE               	bra	u707
  2470   000900  D000               	nop2	
  2471   000902                     
  2472                           ;LCD.c: 116:   PORTBbits.RB4 = 0;
  2473   000902  9881               	bcf	129,4,c	;volatile
  2474   000904                     
  2475                           ;LCD.c: 117:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2476   000904  0EA6               	movlw	166
  2477   000906                     u717:
  2478   000906  2EE8               	decfsz	wreg,f,c
  2479   000908  D7FE               	bra	u717
  2480   00090A  D000               	nop2	
  2481   00090C  0012               	return		;funcret
  2482   00090E                     __end_of_LCD_Write_Char:
  2483                           	callstack 0
  2484                           
  2485 ;; *************** function _LCD_Set_Cursor *****************
  2486 ;; Defined at:
  2487 ;;		line 81 in file "LCD.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  r               1    wreg     unsigned char 
  2490 ;;  c               1   16[COMRAM] unsigned char 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  r               1   17[COMRAM] unsigned char 
  2493 ;;  Temp            1   20[COMRAM] unsigned char 
  2494 ;;  High4           1   19[COMRAM] unsigned char 
  2495 ;;  Low4            1   18[COMRAM] unsigned char 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  1    wreg      void 
  2498 ;; Registers used:
  2499 ;;		wreg, status,2, status,0, cstack
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2505 ;;      Params:         1       0       0       0
  2506 ;;      Locals:         4       0       0       0
  2507 ;;      Temps:          0       0       0       0
  2508 ;;      Totals:         5       0       0       0
  2509 ;;Total ram usage:        5 bytes
  2510 ;; Hardware stack levels used: 1
  2511 ;; Hardware stack levels required when called: 6
  2512 ;; This function calls:
  2513 ;;		_LCD_CMD
  2514 ;; This function is called by:
  2515 ;;		_FSM_begin
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519                           	psect	text28
  2520   000708                     __ptext28:
  2521                           	callstack 0
  2522   000708                     _LCD_Set_Cursor:
  2523                           	callstack 23
  2524                           
  2525                           ;incstack = 0
  2526                           ;LCD_Set_Cursor@r stored from wreg
  2527   000708  6E12               	movwf	LCD_Set_Cursor@r^0,c
  2528   00070A                     
  2529                           ;LCD.c: 81: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 82: {;LCD.c: 83
      +                          :   unsigned char Temp,Low4,High4;;LCD.c: 84:   if(r == 1)
  2530   00070A  0412               	decf	LCD_Set_Cursor@r^0,w,c
  2531   00070C  A4D8               	btfss	status,2,c
  2532   00070E  EF8B  F003         	goto	u381
  2533   000712  EF8D  F003         	goto	u380
  2534   000716                     u381:
  2535   000716  EF9C  F003         	goto	l92
  2536   00071A                     u380:
  2537   00071A                     
  2538                           ;LCD.c: 85:   {;LCD.c: 86:     Temp = 0x80 + c - 1;
  2539   00071A  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2540   00071C  0F7F               	addlw	127
  2541   00071E  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2542                           
  2543                           ;LCD.c: 87:     High4 = Temp >> 4;
  2544   000720  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2545   000722  0B0F               	andlw	15
  2546   000724  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2547                           
  2548                           ;LCD.c: 88:     Low4 = Temp & 0x0F;
  2549   000726  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2550   000728  0B0F               	andlw	15
  2551   00072A  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2552   00072C                     
  2553                           ;LCD.c: 89:     LCD_CMD(High4);
  2554   00072C  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2555   00072E  EC2C  F005         	call	_LCD_CMD
  2556   000732                     
  2557                           ;LCD.c: 90:     LCD_CMD(Low4);
  2558   000732  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2559   000734  EC2C  F005         	call	_LCD_CMD
  2560   000738                     l92:
  2561                           
  2562                           ;LCD.c: 92:   if(r == 2)
  2563   000738  0E02               	movlw	2
  2564   00073A  1812               	xorwf	LCD_Set_Cursor@r^0,w,c
  2565   00073C  A4D8               	btfss	status,2,c
  2566   00073E  EFA3  F003         	goto	u391
  2567   000742  EFA5  F003         	goto	u390
  2568   000746                     u391:
  2569   000746  EFB4  F003         	goto	l94
  2570   00074A                     u390:
  2571   00074A                     
  2572                           ;LCD.c: 93:   {;LCD.c: 94:     Temp = 0xC0 + c - 1;
  2573   00074A  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2574   00074C  0FBF               	addlw	191
  2575   00074E  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2576                           
  2577                           ;LCD.c: 95:     High4 = Temp >> 4;
  2578   000750  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2579   000752  0B0F               	andlw	15
  2580   000754  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2581                           
  2582                           ;LCD.c: 96:     Low4 = Temp & 0x0F;
  2583   000756  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2584   000758  0B0F               	andlw	15
  2585   00075A  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2586   00075C                     
  2587                           ;LCD.c: 97:     LCD_CMD(High4);
  2588   00075C  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2589   00075E  EC2C  F005         	call	_LCD_CMD
  2590   000762                     
  2591                           ;LCD.c: 98:     LCD_CMD(Low4);
  2592   000762  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2593   000764  EC2C  F005         	call	_LCD_CMD
  2594   000768                     l94:
  2595   000768  0012               	return		;funcret
  2596   00076A                     __end_of_LCD_Set_Cursor:
  2597                           	callstack 0
  2598                           
  2599 ;; *************** function _LCD_Init *****************
  2600 ;; Defined at:
  2601 ;;		line 5 in file "LCD.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2615 ;;      Params:         0       0       0       0
  2616 ;;      Locals:         0       0       0       0
  2617 ;;      Temps:          1       0       0       0
  2618 ;;      Totals:         1       0       0       0
  2619 ;;Total ram usage:        1 bytes
  2620 ;; Hardware stack levels used: 1
  2621 ;; Hardware stack levels required when called: 6
  2622 ;; This function calls:
  2623 ;;		_LCD_CMD
  2624 ;;		_LCD_DATA
  2625 ;; This function is called by:
  2626 ;;		_FSM_begin
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text29
  2631   000690                     __ptext29:
  2632                           	callstack 0
  2633   000690                     _LCD_Init:
  2634                           	callstack 23
  2635   000690                     
  2636                           ;LCD.c: 8:   TRISB = 0x00;
  2637   000690  0E00               	movlw	0
  2638   000692  6E93               	movwf	147,c	;volatile
  2639   000694                     
  2640                           ;LCD.c: 9:   TRISBbits.RB5 = 0;
  2641   000694  9A93               	bcf	147,5,c	;volatile
  2642   000696                     
  2643                           ;LCD.c: 10:   TRISBbits.RB4 = 0;
  2644   000696  9893               	bcf	147,4,c	;volatile
  2645   000698                     
  2646                           ;LCD.c: 13:   LCD_DATA(0x00);
  2647   000698  0E00               	movlw	0
  2648   00069A  ECE4  F003         	call	_LCD_DATA
  2649   00069E                     
  2650                           ;LCD.c: 14:   _delay((unsigned long)((30)*(8000000/4000.0)));
  2651   00069E  0E4E               	movlw	78
  2652   0006A0  6E11               	movwf	??_LCD_Init^0,c
  2653   0006A2  0EEB               	movlw	235
  2654   0006A4                     u727:
  2655   0006A4  2EE8               	decfsz	wreg,f,c
  2656   0006A6  D7FE               	bra	u727
  2657   0006A8  2E11               	decfsz	??_LCD_Init^0,f,c
  2658   0006AA  D7FC               	bra	u727
  2659   0006AC  F000               	nop	
  2660   0006AE                     
  2661                           ;LCD.c: 15:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2662   0006AE  0EA6               	movlw	166
  2663   0006B0                     u737:
  2664   0006B0  2EE8               	decfsz	wreg,f,c
  2665   0006B2  D7FE               	bra	u737
  2666   0006B4  D000               	nop2	
  2667   0006B6                     
  2668                           ;LCD.c: 16:   LCD_CMD(0x03);
  2669   0006B6  0E03               	movlw	3
  2670   0006B8  EC2C  F005         	call	_LCD_CMD
  2671                           
  2672                           ;LCD.c: 17:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2673   0006BC  0E0D               	movlw	13
  2674   0006BE  6E11               	movwf	??_LCD_Init^0,c
  2675   0006C0  0EFC               	movlw	252
  2676   0006C2                     u747:
  2677   0006C2  2EE8               	decfsz	wreg,f,c
  2678   0006C4  D7FE               	bra	u747
  2679   0006C6  2E11               	decfsz	??_LCD_Init^0,f,c
  2680   0006C8  D7FC               	bra	u747
  2681   0006CA                     
  2682                           ;LCD.c: 18:   LCD_CMD(0x03);
  2683   0006CA  0E03               	movlw	3
  2684   0006CC  EC2C  F005         	call	_LCD_CMD
  2685   0006D0                     
  2686                           ;LCD.c: 19:   _delay((unsigned long)((150)*(8000000/4000000.0)));
  2687   0006D0  0E64               	movlw	100
  2688   0006D2                     u757:
  2689   0006D2  2EE8               	decfsz	wreg,f,c
  2690   0006D4  D7FE               	bra	u757
  2691                           
  2692                           ;LCD.c: 20:   LCD_CMD(0x03);
  2693   0006D6  0E03               	movlw	3
  2694   0006D8  EC2C  F005         	call	_LCD_CMD
  2695                           
  2696                           ;LCD.c: 21:   LCD_CMD(0x02);
  2697   0006DC  0E02               	movlw	2
  2698   0006DE  EC2C  F005         	call	_LCD_CMD
  2699                           
  2700                           ;LCD.c: 22:   LCD_CMD(0x02);
  2701   0006E2  0E02               	movlw	2
  2702   0006E4  EC2C  F005         	call	_LCD_CMD
  2703                           
  2704                           ;LCD.c: 23:   LCD_CMD(0x08);
  2705   0006E8  0E08               	movlw	8
  2706   0006EA  EC2C  F005         	call	_LCD_CMD
  2707                           
  2708                           ;LCD.c: 24:   LCD_CMD(0x00);
  2709   0006EE  0E00               	movlw	0
  2710   0006F0  EC2C  F005         	call	_LCD_CMD
  2711                           
  2712                           ;LCD.c: 25:   LCD_CMD(0x0C);
  2713   0006F4  0E0C               	movlw	12
  2714   0006F6  EC2C  F005         	call	_LCD_CMD
  2715                           
  2716                           ;LCD.c: 26:   LCD_CMD(0x00);
  2717   0006FA  0E00               	movlw	0
  2718   0006FC  EC2C  F005         	call	_LCD_CMD
  2719                           
  2720                           ;LCD.c: 27:   LCD_CMD(0x06);
  2721   000700  0E06               	movlw	6
  2722   000702  EC2C  F005         	call	_LCD_CMD
  2723   000706  0012               	return		;funcret
  2724   000708                     __end_of_LCD_Init:
  2725                           	callstack 0
  2726                           
  2727 ;; *************** function _LCD_Clear *****************
  2728 ;; Defined at:
  2729 ;;		line 30 in file "LCD.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;		None
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      void 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2743 ;;      Params:         0       0       0       0
  2744 ;;      Locals:         0       0       0       0
  2745 ;;      Temps:          0       0       0       0
  2746 ;;      Totals:         0       0       0       0
  2747 ;;Total ram usage:        0 bytes
  2748 ;; Hardware stack levels used: 1
  2749 ;; Hardware stack levels required when called: 6
  2750 ;; This function calls:
  2751 ;;		_LCD_CMD
  2752 ;; This function is called by:
  2753 ;;		_FSM_begin
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text30
  2758   000AEC                     __ptext30:
  2759                           	callstack 0
  2760   000AEC                     _LCD_Clear:
  2761                           	callstack 23
  2762   000AEC                     
  2763                           ;LCD.c: 32:   LCD_CMD(0);
  2764   000AEC  0E00               	movlw	0
  2765   000AEE  EC2C  F005         	call	_LCD_CMD
  2766                           
  2767                           ;LCD.c: 33:   LCD_CMD(1);
  2768   000AF2  0E01               	movlw	1
  2769   000AF4  EC2C  F005         	call	_LCD_CMD
  2770   000AF8  0012               	return		;funcret
  2771   000AFA                     __end_of_LCD_Clear:
  2772                           	callstack 0
  2773                           
  2774 ;; *************** function _LCD_CMD *****************
  2775 ;; Defined at:
  2776 ;;		line 49 in file "LCD.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;  CMD             1    wreg     unsigned char 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  CMD             1   15[COMRAM] unsigned char 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, status,2, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2790 ;;      Params:         0       0       0       0
  2791 ;;      Locals:         1       0       0       0
  2792 ;;      Temps:          0       0       0       0
  2793 ;;      Totals:         1       0       0       0
  2794 ;;Total ram usage:        1 bytes
  2795 ;; Hardware stack levels used: 1
  2796 ;; Hardware stack levels required when called: 5
  2797 ;; This function calls:
  2798 ;;		_LCD_DATA
  2799 ;; This function is called by:
  2800 ;;		_LCD_Init
  2801 ;;		_LCD_Clear
  2802 ;;		_LCD_Set_Cursor
  2803 ;;		_LCD_SL
  2804 ;;		_LCD_SR
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text31
  2809   000A58                     __ptext31:
  2810                           	callstack 0
  2811   000A58                     _LCD_CMD:
  2812                           	callstack 23
  2813                           
  2814                           ;incstack = 0
  2815                           ;LCD_CMD@CMD stored from wreg
  2816   000A58  6E10               	movwf	LCD_CMD@CMD^0,c
  2817   000A5A                     
  2818                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:   PORTBbits.RB5 = 0;
  2819   000A5A  9A81               	bcf	129,5,c	;volatile
  2820   000A5C                     
  2821                           ;LCD.c: 54:   LCD_DATA(CMD);
  2822   000A5C  5010               	movf	LCD_CMD@CMD^0,w,c
  2823   000A5E  ECE4  F003         	call	_LCD_DATA
  2824   000A62                     
  2825                           ;LCD.c: 56:   PORTBbits.RB4 = 1;
  2826   000A62  8881               	bsf	129,4,c	;volatile
  2827   000A64                     
  2828                           ;LCD.c: 57:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2829   000A64  0EA6               	movlw	166
  2830   000A66                     u767:
  2831   000A66  2EE8               	decfsz	wreg,f,c
  2832   000A68  D7FE               	bra	u767
  2833   000A6A  D000               	nop2	
  2834   000A6C                     
  2835                           ;LCD.c: 58:   PORTBbits.RB4 = 0;
  2836   000A6C  9881               	bcf	129,4,c	;volatile
  2837   000A6E  0012               	return		;funcret
  2838   000A70                     __end_of_LCD_CMD:
  2839                           	callstack 0
  2840                           
  2841 ;; *************** function _LCD_DATA *****************
  2842 ;; Defined at:
  2843 ;;		line 61 in file "LCD.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  Data            1    wreg     unsigned char 
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  Data            1   14[COMRAM] unsigned char 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2857 ;;      Params:         0       0       0       0
  2858 ;;      Locals:         1       0       0       0
  2859 ;;      Temps:          0       0       0       0
  2860 ;;      Totals:         1       0       0       0
  2861 ;;Total ram usage:        1 bytes
  2862 ;; Hardware stack levels used: 1
  2863 ;; Hardware stack levels required when called: 4
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_LCD_Init
  2868 ;;		_LCD_CMD
  2869 ;;		_LCD_Write_Char
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text32
  2874   0007C8                     __ptext32:
  2875                           	callstack 0
  2876   0007C8                     _LCD_DATA:
  2877                           	callstack 23
  2878                           
  2879                           ;incstack = 0
  2880                           ;LCD_DATA@Data stored from wreg
  2881   0007C8  6E0F               	movwf	LCD_DATA@Data^0,c
  2882   0007CA                     
  2883                           ;LCD.c: 61: void LCD_DATA(unsigned char Data);LCD.c: 62: {;LCD.c: 63:   if(Data & 1)
  2884   0007CA  A00F               	btfss	LCD_DATA@Data^0,0,c
  2885   0007CC  EFEA  F003         	goto	u21
  2886   0007D0  EFEC  F003         	goto	u20
  2887   0007D4                     u21:
  2888   0007D4  EFEF  F003         	goto	l81
  2889   0007D8                     u20:
  2890   0007D8                     
  2891                           ;LCD.c: 64:     PORTBbits.RB0 = 1;
  2892   0007D8  8081               	bsf	129,0,c	;volatile
  2893   0007DA  EFF0  F003         	goto	l1056
  2894   0007DE                     l81:
  2895                           
  2896                           ;LCD.c: 66:     PORTBbits.RB0 = 0;
  2897   0007DE  9081               	bcf	129,0,c	;volatile
  2898   0007E0                     l1056:
  2899                           
  2900                           ;LCD.c: 67:   if(Data & 2)
  2901   0007E0  A20F               	btfss	LCD_DATA@Data^0,1,c
  2902   0007E2  EFF5  F003         	goto	u31
  2903   0007E6  EFF7  F003         	goto	u30
  2904   0007EA                     u31:
  2905   0007EA  EFFA  F003         	goto	l83
  2906   0007EE                     u30:
  2907   0007EE                     
  2908                           ;LCD.c: 68:     PORTBbits.RB1 = 1;
  2909   0007EE  8281               	bsf	129,1,c	;volatile
  2910   0007F0  EFFB  F003         	goto	l1060
  2911   0007F4                     l83:
  2912                           
  2913                           ;LCD.c: 70:     PORTBbits.RB1 = 0;
  2914   0007F4  9281               	bcf	129,1,c	;volatile
  2915   0007F6                     l1060:
  2916                           
  2917                           ;LCD.c: 71:   if(Data & 4)
  2918   0007F6  A40F               	btfss	LCD_DATA@Data^0,2,c
  2919   0007F8  EF00  F004         	goto	u41
  2920   0007FC  EF02  F004         	goto	u40
  2921   000800                     u41:
  2922   000800  EF05  F004         	goto	l85
  2923   000804                     u40:
  2924   000804                     
  2925                           ;LCD.c: 72:     PORTBbits.RB2 = 1;
  2926   000804  8481               	bsf	129,2,c	;volatile
  2927   000806  EF06  F004         	goto	l1064
  2928   00080A                     l85:
  2929                           
  2930                           ;LCD.c: 74:     PORTBbits.RB2 = 0;
  2931   00080A  9481               	bcf	129,2,c	;volatile
  2932   00080C                     l1064:
  2933                           
  2934                           ;LCD.c: 75:   if(Data & 8)
  2935   00080C  A60F               	btfss	LCD_DATA@Data^0,3,c
  2936   00080E  EF0B  F004         	goto	u51
  2937   000812  EF0D  F004         	goto	u50
  2938   000816                     u51:
  2939   000816  EF10  F004         	goto	l87
  2940   00081A                     u50:
  2941   00081A                     
  2942                           ;LCD.c: 76:     PORTBbits.RB3 = 1;
  2943   00081A  8681               	bsf	129,3,c	;volatile
  2944   00081C  EF11  F004         	goto	l89
  2945   000820                     l87:
  2946                           
  2947                           ;LCD.c: 78:     PORTBbits.RB3 = 0;
  2948   000820  9681               	bcf	129,3,c	;volatile
  2949   000822                     l89:
  2950   000822  0012               	return		;funcret
  2951   000824                     __end_of_LCD_DATA:
  2952                           	callstack 0
  2953                           
  2954 ;; *************** function _Callbacks_Init *****************
  2955 ;; Defined at:
  2956 ;;		line 9 in file "SystemCallbacks.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  callback        1   14[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2970 ;;      Params:         0       0       0       0
  2971 ;;      Locals:         1       0       0       0
  2972 ;;      Temps:          0       0       0       0
  2973 ;;      Totals:         1       0       0       0
  2974 ;;Total ram usage:        1 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 4
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_FSM_begin
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text33
  2985   00087A                     __ptext33:
  2986                           	callstack 0
  2987   00087A                     _Callbacks_Init:
  2988                           	callstack 25
  2989   00087A                     
  2990                           ;SystemCallbacks.c: 11:     for(U8 callback=0; callback<(5); callback++)
  2991   00087A  0E00               	movlw	0
  2992   00087C  6E0F               	movwf	Callbacks_Init@callback^0,c
  2993   00087E                     l1564:
  2994                           
  2995                           ;SystemCallbacks.c: 12:     {;SystemCallbacks.c: 13:         registered_callbacks[callba
      +                          ck].callback = ((void*)0);
  2996   00087E  500F               	movf	Callbacks_Init@callback^0,w,c
  2997   000880  0D08               	mullw	8
  2998   000882  0E62               	movlw	low (_registered_callbacks+2)
  2999   000884  24F3               	addwf	243,w,c
  3000   000886  6ED9               	movwf	fsr2l,c
  3001   000888  0E00               	movlw	high (_registered_callbacks+2)
  3002   00088A  20F4               	addwfc	prodh,w,c
  3003   00088C  6EDA               	movwf	fsr2h,c
  3004   00088E  0E00               	movlw	0
  3005   000890  6EDE               	movwf	postinc2,c
  3006   000892  0E00               	movlw	0
  3007   000894  6EDD               	movwf	postdec2,c
  3008                           
  3009                           ;SystemCallbacks.c: 14:         registered_callbacks[callback].count = 0;
  3010   000896  500F               	movf	Callbacks_Init@callback^0,w,c
  3011   000898  0D08               	mullw	8
  3012   00089A  0E65               	movlw	low (_registered_callbacks+5)
  3013   00089C  24F3               	addwf	243,w,c
  3014   00089E  6ED9               	movwf	fsr2l,c
  3015   0008A0  0E00               	movlw	high (_registered_callbacks+5)
  3016   0008A2  20F4               	addwfc	prodh,w,c
  3017   0008A4  6EDA               	movwf	fsr2h,c
  3018   0008A6  0E00               	movlw	0
  3019   0008A8  6EDE               	movwf	postinc2,c
  3020   0008AA  0E00               	movlw	0
  3021   0008AC  6EDD               	movwf	postdec2,c
  3022   0008AE                     
  3023                           ;SystemCallbacks.c: 15:         callback_count = 0;
  3024   0008AE  0E00               	movlw	0
  3025   0008B0  6E46               	movwf	_callback_count^0,c
  3026   0008B2                     
  3027                           ;SystemCallbacks.c: 16:     }
  3028   0008B2  2A0F               	incf	Callbacks_Init@callback^0,f,c
  3029   0008B4  0E04               	movlw	4
  3030   0008B6  640F               	cpfsgt	Callbacks_Init@callback^0,c
  3031   0008B8  EF60  F004         	goto	u461
  3032   0008BC  EF62  F004         	goto	u460
  3033   0008C0                     u461:
  3034   0008C0  EF3F  F004         	goto	l1564
  3035   0008C4                     u460:
  3036   0008C4  0012               	return		;funcret
  3037   0008C6                     __end_of_Callbacks_Init:
  3038                           	callstack 0
  3039                           
  3040 ;; *************** function _timer_overflow_isr *****************
  3041 ;; Defined at:
  3042 ;;		line 11 in file "SystemInterrupts.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;		None
  3045 ;; Auto vars:     Size  Location     Type
  3046 ;;		None
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3056 ;;      Params:         0       0       0       0
  3057 ;;      Locals:         0       0       0       0
  3058 ;;      Temps:          8       0       0       0
  3059 ;;      Totals:         8       0       0       0
  3060 ;;Total ram usage:        8 bytes
  3061 ;; Hardware stack levels used: 1
  3062 ;; Hardware stack levels required when called: 3
  3063 ;; This function calls:
  3064 ;;		_Callbacks_Manager
  3065 ;;		i2_get_current_state
  3066 ;;		i2_set_state
  3067 ;; This function is called by:
  3068 ;;		Interrupt level 2
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	intcode
  3073   000008                     __pintcode:
  3074                           	callstack 0
  3075   000008                     _timer_overflow_isr:
  3076                           	callstack 23
  3077                           
  3078                           ;incstack = 0
  3079   000008  8248               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3080   00000A  CFFA F007          	movff	pclath,??_timer_overflow_isr
  3081   00000E  CFFB F008          	movff	pclatu,??_timer_overflow_isr+1
  3082   000012  CFE1 F009          	movff	fsr1l,??_timer_overflow_isr+2
  3083   000016  CFE2 F00A          	movff	fsr1h,??_timer_overflow_isr+3
  3084   00001A  CFD9 F00B          	movff	fsr2l,??_timer_overflow_isr+4
  3085   00001E  CFDA F00C          	movff	fsr2h,??_timer_overflow_isr+5
  3086   000022  CFF3 F00D          	movff	prodl,??_timer_overflow_isr+6
  3087   000026  CFF4 F00E          	movff	prodh,??_timer_overflow_isr+7
  3088   00002A                     
  3089                           ;SystemInterrupts.c: 14:     INTCONbits.GIEH = 0;
  3090   00002A  9EF2               	bcf	242,7,c	;volatile
  3091                           
  3092                           ;SystemInterrupts.c: 15:     INTCONbits.GIEL = 1;
  3093   00002C  8CF2               	bsf	242,6,c	;volatile
  3094   00002E                     
  3095                           ;SystemInterrupts.c: 29:     if(TMR0L < (0x7C))
  3096   00002E  0E7C               	movlw	124
  3097   000030  60D6               	cpfslt	214,c	;volatile
  3098   000032  EF1D  F000         	goto	i2u60_41
  3099   000036  EF1F  F000         	goto	i2u60_40
  3100   00003A                     i2u60_41:
  3101   00003A  EF21  F000         	goto	i2l1738
  3102   00003E                     i2u60_40:
  3103   00003E                     
  3104                           ;SystemInterrupts.c: 30:     {;SystemInterrupts.c: 31:         TMR0L = (0x7C);
  3105   00003E  0E7C               	movlw	124
  3106   000040  6ED6               	movwf	214,c	;volatile
  3107   000042                     i2l1738:
  3108                           
  3109                           ;SystemInterrupts.c: 33:     if(TMR0H < (0xE1))
  3110   000042  0EE1               	movlw	225
  3111   000044  60D7               	cpfslt	215,c	;volatile
  3112   000046  EF27  F000         	goto	i2u61_41
  3113   00004A  EF29  F000         	goto	i2u61_40
  3114   00004E                     i2u61_41:
  3115   00004E  EF2B  F000         	goto	i2l1742
  3116   000052                     i2u61_40:
  3117   000052                     
  3118                           ;SystemInterrupts.c: 34:     {;SystemInterrupts.c: 35:         TMR0H = (0xE1);
  3119   000052  0EE1               	movlw	225
  3120   000054  6ED7               	movwf	215,c	;volatile
  3121   000056                     i2l1742:
  3122                           
  3123                           ;SystemInterrupts.c: 39:     if(INTCONbits.TMR0IF)
  3124   000056  A4F2               	btfss	242,2,c	;volatile
  3125   000058  EF30  F000         	goto	i2u62_41
  3126   00005C  EF32  F000         	goto	i2u62_40
  3127   000060                     i2u62_41:
  3128   000060  EF35  F000         	goto	i2l1748
  3129   000064                     i2u62_40:
  3130   000064                     
  3131                           ;SystemInterrupts.c: 40:     {;SystemInterrupts.c: 42:         Callbacks_Manager();
  3132   000064  ECA7  F002         	call	_Callbacks_Manager	;wreg free
  3133   000068                     
  3134                           ;SystemInterrupts.c: 45:         INTCONbits.TMR0IF = 0;
  3135   000068  94F2               	bcf	242,2,c	;volatile
  3136   00006A                     i2l1748:
  3137                           
  3138                           ;SystemInterrupts.c: 49:     if(INTCONbits.INT0IF)
  3139   00006A  A2F2               	btfss	242,1,c	;volatile
  3140   00006C  EF3A  F000         	goto	i2u63_41
  3141   000070  EF3C  F000         	goto	i2u63_40
  3142   000074                     i2u63_41:
  3143   000074  EF4A  F000         	goto	i2l1756
  3144   000078                     i2u63_40:
  3145   000078                     
  3146                           ;SystemInterrupts.c: 50:     {;SystemInterrupts.c: 52:         if(get_current_state() !=
      +                           WATER_PLANTS)
  3147   000078  ECAF  F005         	call	i2_get_current_state	;wreg free
  3148   00007C  0A02               	xorlw	2
  3149   00007E  B4D8               	btfsc	status,2,c
  3150   000080  EF44  F000         	goto	i2u64_41
  3151   000084  EF46  F000         	goto	i2u64_40
  3152   000088                     i2u64_41:
  3153   000088  EF49  F000         	goto	i2l1754
  3154   00008C                     i2u64_40:
  3155   00008C                     
  3156                           ;SystemInterrupts.c: 53:         {;SystemInterrupts.c: 54:           set_state(WATER_PLA
      +                          NTS);
  3157   00008C  0E02               	movlw	2
  3158   00008E  EC9D  F005         	call	i2_set_state
  3159   000092                     i2l1754:
  3160                           
  3161                           ;SystemInterrupts.c: 58:         INTCONbits.INT0IF = 0;
  3162   000092  92F2               	bcf	242,1,c	;volatile
  3163   000094                     i2l1756:
  3164                           
  3165                           ;SystemInterrupts.c: 62:     INTCONbits.GIEH = 1;
  3166   000094  8EF2               	bsf	242,7,c	;volatile
  3167   000096                     
  3168                           ;SystemInterrupts.c: 63:     INTCONbits.GIEL = 1;
  3169   000096  8CF2               	bsf	242,6,c	;volatile
  3170   000098  C00E  FFF4         	movff	??_timer_overflow_isr+7,prodh
  3171   00009C  C00D  FFF3         	movff	??_timer_overflow_isr+6,prodl
  3172   0000A0  C00C  FFDA         	movff	??_timer_overflow_isr+5,fsr2h
  3173   0000A4  C00B  FFD9         	movff	??_timer_overflow_isr+4,fsr2l
  3174   0000A8  C00A  FFE2         	movff	??_timer_overflow_isr+3,fsr1h
  3175   0000AC  C009  FFE1         	movff	??_timer_overflow_isr+2,fsr1l
  3176   0000B0  C008  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  3177   0000B4  C007  FFFA         	movff	??_timer_overflow_isr,pclath
  3178   0000B8  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3179   0000BA  0011               	retfie		f
  3180   0000BC                     __end_of_timer_overflow_isr:
  3181                           	callstack 0
  3182                           
  3183 ;; *************** function _Callbacks_Manager *****************
  3184 ;; Defined at:
  3185 ;;		line 24 in file "SystemCallbacks.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  callbacks       1    5[COMRAM] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3199 ;;      Params:         0       0       0       0
  3200 ;;      Locals:         1       0       0       0
  3201 ;;      Temps:          4       0       0       0
  3202 ;;      Totals:         5       0       0       0
  3203 ;;Total ram usage:        5 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; Hardware stack levels required when called: 2
  3206 ;; This function calls:
  3207 ;;		_Check_Moisture_cb
  3208 ;;		_Watering_Done_cb
  3209 ;; This function is called by:
  3210 ;;		_timer_overflow_isr
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text35
  3215   00054E                     __ptext35:
  3216                           	callstack 0
  3217   00054E                     _Callbacks_Manager:
  3218                           	callstack 23
  3219   00054E                     
  3220                           ;SystemCallbacks.c: 26:     for (U8 callbacks = 0; callbacks < (5); callbacks++)
  3221   00054E  0E00               	movlw	0
  3222   000550  6E06               	movwf	Callbacks_Manager@callbacks^0,c
  3223   000552                     i2l1690:
  3224                           
  3225                           ;SystemCallbacks.c: 27:     {;SystemCallbacks.c: 28:         (registered_callbacks[callb
      +                          acks].count)++;
  3226   000552  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3227   000554  0D08               	mullw	8
  3228   000556  0E65               	movlw	low (_registered_callbacks+5)
  3229   000558  24F3               	addwf	243,w,c
  3230   00055A  6ED9               	movwf	fsr2l,c
  3231   00055C  0E00               	movlw	high (_registered_callbacks+5)
  3232   00055E  20F4               	addwfc	prodh,w,c
  3233   000560  6EDA               	movwf	fsr2h,c
  3234   000562  2ADE               	incf	postinc2,f,c
  3235   000564  0E00               	movlw	0
  3236   000566  22DD               	addwfc	postdec2,f,c
  3237   000568                     
  3238                           ;SystemCallbacks.c: 29:         if(registered_callbacks[callbacks].count >=
  3239   000568  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3240   00056A  0D08               	mullw	8
  3241   00056C  0E60               	movlw	low _registered_callbacks
  3242   00056E  24F3               	addwf	243,w,c
  3243   000570  6ED9               	movwf	fsr2l,c
  3244   000572  0E00               	movlw	high _registered_callbacks
  3245   000574  20F4               	addwfc	prodh,w,c
  3246   000576  6EDA               	movwf	fsr2h,c
  3247   000578  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3248   00057A  0D08               	mullw	8
  3249   00057C  0E65               	movlw	low (_registered_callbacks+5)
  3250   00057E  24F3               	addwf	243,w,c
  3251   000580  6EE1               	movwf	fsr1l,c
  3252   000582  0E00               	movlw	high (_registered_callbacks+5)
  3253   000584  20F4               	addwfc	prodh,w,c
  3254   000586  6EE2               	movwf	fsr1h,c
  3255   000588  50DE               	movf	postinc2,w,c
  3256   00058A  5CE6               	subwf	postinc1,w,c
  3257   00058C  50DE               	movf	postinc2,w,c
  3258   00058E  58E6               	subwfb	postinc1,w,c
  3259   000590  A0D8               	btfss	status,0,c
  3260   000592  EFCD  F002         	goto	i2u56_41
  3261   000596  EFCF  F002         	goto	i2u56_40
  3262   00059A                     i2u56_41:
  3263   00059A  EF01  F003         	goto	i2l1700
  3264   00059E                     i2u56_40:
  3265   00059E                     
  3266                           ;SystemCallbacks.c: 31:         {;SystemCallbacks.c: 32:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  3267   00059E  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3268   0005A0  0D08               	mullw	8
  3269   0005A2  0E62               	movlw	low (_registered_callbacks+2)
  3270   0005A4  24F3               	addwf	243,w,c
  3271   0005A6  6ED9               	movwf	fsr2l,c
  3272   0005A8  0E00               	movlw	high (_registered_callbacks+2)
  3273   0005AA  20F4               	addwfc	prodh,w,c
  3274   0005AC  6EDA               	movwf	fsr2h,c
  3275   0005AE  50DE               	movf	postinc2,w,c
  3276   0005B0  10DE               	iorwf	postinc2,w,c
  3277   0005B2  B4D8               	btfsc	status,2,c
  3278   0005B4  EFDE  F002         	goto	i2u57_41
  3279   0005B8  EFE0  F002         	goto	i2u57_40
  3280   0005BC                     i2u57_41:
  3281   0005BC  EF01  F003         	goto	i2l1700
  3282   0005C0                     i2u57_40:
  3283   0005C0                     
  3284                           ;SystemCallbacks.c: 33:             {;SystemCallbacks.c: 34:                 registered_
      +                          callbacks[callbacks].count = 0;
  3285   0005C0  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3286   0005C2  0D08               	mullw	8
  3287   0005C4  0E65               	movlw	low (_registered_callbacks+5)
  3288   0005C6  24F3               	addwf	243,w,c
  3289   0005C8  6ED9               	movwf	fsr2l,c
  3290   0005CA  0E00               	movlw	high (_registered_callbacks+5)
  3291   0005CC  20F4               	addwfc	prodh,w,c
  3292   0005CE  6EDA               	movwf	fsr2h,c
  3293   0005D0  0E00               	movlw	0
  3294   0005D2  6EDE               	movwf	postinc2,c
  3295   0005D4  0E00               	movlw	0
  3296   0005D6  6EDD               	movwf	postdec2,c
  3297   0005D8                     
  3298                           ;SystemCallbacks.c: 35:                 registered_callbacks[callbacks].callback();
  3299   0005D8  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  3300   0005DA  0D08               	mullw	8
  3301   0005DC  0E62               	movlw	low (_registered_callbacks+2)
  3302   0005DE  24F3               	addwf	243,w,c
  3303   0005E0  6ED9               	movwf	fsr2l,c
  3304   0005E2  0E00               	movlw	high (_registered_callbacks+2)
  3305   0005E4  20F4               	addwfc	prodh,w,c
  3306   0005E6  6EDA               	movwf	fsr2h,c
  3307   0005E8  D802               	call	i2u58_48
  3308   0005EA  EF01  F003         	goto	i2u58_49
  3309   0005EE                     i2u58_48:
  3310   0005EE  0005               	push	
  3311   0005F0  6EFA               	movwf	pclath,c
  3312   0005F2  50DE               	movf	postinc2,w,c
  3313   0005F4  6EFD               	movwf	tosl,c
  3314   0005F6  50DE               	movf	postinc2,w,c
  3315   0005F8  6EFE               	movwf	tosh,c
  3316   0005FA  50F8               	movf	tblptru,w,c
  3317   0005FC  6EFF               	movwf	tosu,c
  3318   0005FE  50FA               	movf	pclath,w,c
  3319   000600  0012               	return		;indir
  3320   000602                     i2u58_49:
  3321   000602                     i2l1700:
  3322                           
  3323                           ;SystemCallbacks.c: 38:     }
  3324   000602  2A06               	incf	Callbacks_Manager@callbacks^0,f,c
  3325   000604  0E04               	movlw	4
  3326   000606  6406               	cpfsgt	Callbacks_Manager@callbacks^0,c
  3327   000608  EF08  F003         	goto	i2u59_41
  3328   00060C  EF0A  F003         	goto	i2u59_40
  3329   000610                     i2u59_41:
  3330   000610  EFA9  F002         	goto	i2l1690
  3331   000614                     i2u59_40:
  3332   000614  0012               	return		;funcret
  3333   000616                     __end_of_Callbacks_Manager:
  3334                           	callstack 0
  3335                           
  3336 ;; *************** function _Check_Moisture_cb *****************
  3337 ;; Defined at:
  3338 ;;		line 17 in file "System_FSM.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;		None
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3352 ;;      Params:         0       0       0       0
  3353 ;;      Locals:         0       0       0       0
  3354 ;;      Temps:          0       0       0       0
  3355 ;;      Totals:         0       0       0       0
  3356 ;;Total ram usage:        0 bytes
  3357 ;; Hardware stack levels used: 1
  3358 ;; Hardware stack levels required when called: 1
  3359 ;; This function calls:
  3360 ;;		i2_get_current_state
  3361 ;;		i2_set_state
  3362 ;; This function is called by:
  3363 ;;		_Callbacks_Manager
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           	psect	text36
  3368   000A20                     __ptext36:
  3369                           	callstack 0
  3370   000A20                     _Check_Moisture_cb:
  3371                           	callstack 23
  3372   000A20                     
  3373                           ;System_FSM.c: 22:     if(get_current_state() != WATER_PLANTS)
  3374   000A20  ECAF  F005         	call	i2_get_current_state	;wreg free
  3375   000A24  0A02               	xorlw	2
  3376   000A26  B4D8               	btfsc	status,2,c
  3377   000A28  EF18  F005         	goto	i2u44_41
  3378   000A2C  EF1A  F005         	goto	i2u44_40
  3379   000A30                     i2u44_41:
  3380   000A30  EF1D  F005         	goto	i2l206
  3381   000A34                     i2u44_40:
  3382   000A34                     
  3383                           ;System_FSM.c: 23:     {;System_FSM.c: 24:       set_state(CHECK_MOISTURE);
  3384   000A34  0E03               	movlw	3
  3385   000A36  EC9D  F005         	call	i2_set_state
  3386   000A3A                     i2l206:
  3387   000A3A  0012               	return		;funcret
  3388   000A3C                     __end_of_Check_Moisture_cb:
  3389                           	callstack 0
  3390                           
  3391 ;; *************** function _Watering_Done_cb *****************
  3392 ;; Defined at:
  3393 ;;		line 28 in file "System_FSM.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1    wreg      void 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3407 ;;      Params:         0       0       0       0
  3408 ;;      Locals:         0       0       0       0
  3409 ;;      Temps:          0       0       0       0
  3410 ;;      Totals:         0       0       0       0
  3411 ;;Total ram usage:        0 bytes
  3412 ;; Hardware stack levels used: 1
  3413 ;; Hardware stack levels required when called: 1
  3414 ;; This function calls:
  3415 ;;		i2_get_current_state
  3416 ;;		i2_set_state
  3417 ;; This function is called by:
  3418 ;;		_Callbacks_Manager
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           	psect	text37
  3423   000A3C                     __ptext37:
  3424                           	callstack 0
  3425   000A3C                     _Watering_Done_cb:
  3426                           	callstack 23
  3427   000A3C                     
  3428                           ;System_FSM.c: 31:     if(get_current_state() == WATER_PLANTS)
  3429   000A3C  ECAF  F005         	call	i2_get_current_state	;wreg free
  3430   000A40  0A02               	xorlw	2
  3431   000A42  A4D8               	btfss	status,2,c
  3432   000A44  EF26  F005         	goto	i2u45_41
  3433   000A48  EF28  F005         	goto	i2u45_40
  3434   000A4C                     i2u45_41:
  3435   000A4C  EF2B  F005         	goto	i2l210
  3436   000A50                     i2u45_40:
  3437   000A50                     
  3438                           ;System_FSM.c: 32:     {;System_FSM.c: 33:         set_state(IDLE_STATE);
  3439   000A50  0E01               	movlw	1
  3440   000A52  EC9D  F005         	call	i2_set_state
  3441   000A56                     i2l210:
  3442   000A56  0012               	return		;funcret
  3443   000A58                     __end_of_Watering_Done_cb:
  3444                           	callstack 0
  3445                           
  3446 ;; *************** function i2_set_state *****************
  3447 ;; Defined at:
  3448 ;;		line 9 in file "FSM_states.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  state_to_set    1    wreg     enum E2
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  state_to_set    1    0[COMRAM] enum E2
  3453 ;; Return value:  Size  Location     Type
  3454 ;;                  1    wreg      void 
  3455 ;; Registers used:
  3456 ;;		wreg
  3457 ;; Tracked objects:
  3458 ;;		On entry : 0/0
  3459 ;;		On exit  : 0/0
  3460 ;;		Unchanged: 0/0
  3461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3462 ;;      Params:         0       0       0       0
  3463 ;;      Locals:         1       0       0       0
  3464 ;;      Temps:          0       0       0       0
  3465 ;;      Totals:         1       0       0       0
  3466 ;;Total ram usage:        1 bytes
  3467 ;; Hardware stack levels used: 1
  3468 ;; This function calls:
  3469 ;;		Nothing
  3470 ;; This function is called by:
  3471 ;;		_Check_Moisture_cb
  3472 ;;		_Watering_Done_cb
  3473 ;;		_timer_overflow_isr
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           	psect	text38
  3478   000B3A                     __ptext38:
  3479                           	callstack 0
  3480   000B3A                     i2_set_state:
  3481                           	callstack 25
  3482                           
  3483                           ;incstack = 0
  3484                           ;i2set_state@state_to_set stored from wreg
  3485   000B3A  6E01               	movwf	i2set_state@state_to_set^0,c
  3486   000B3C                     
  3487                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  3488   000B3C  C001  F047         	movff	i2set_state@state_to_set,_FSM_state
  3489   000B40  0012               	return		;funcret
  3490   000B42                     __end_ofi2_set_state:
  3491                           	callstack 0
  3492                           
  3493 ;; *************** function i2_get_current_state *****************
  3494 ;; Defined at:
  3495 ;;		line 5 in file "FSM_states.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      enum E2
  3502 ;; Registers used:
  3503 ;;		wreg, status,2
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3509 ;;      Params:         0       0       0       0
  3510 ;;      Locals:         0       0       0       0
  3511 ;;      Temps:          0       0       0       0
  3512 ;;      Totals:         0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used: 1
  3515 ;; This function calls:
  3516 ;;		Nothing
  3517 ;; This function is called by:
  3518 ;;		_Check_Moisture_cb
  3519 ;;		_Watering_Done_cb
  3520 ;;		_timer_overflow_isr
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text39
  3525   000B5E                     __ptext39:
  3526                           	callstack 0
  3527   000B5E                     i2_get_current_state:
  3528                           	callstack 25
  3529   000B5E                     
  3530                           ;FSM_states.c: 7:     return FSM_state;
  3531   000B5E  5047               	movf	_FSM_state^0,w,c
  3532   000B60  0012               	return		;funcret
  3533   000B62                     __end_ofi2_get_current_state:
  3534                           	callstack 0
  3535                           
  3536                           	psect	text40
  3537   000000                     __ptext40:
  3538                           	callstack 0
  3539   000000                     
  3540                           	psect	rparam
  3541   000000                     
  3542                           	psect	temp
  3543   000048                     btemp:
  3544                           	callstack 0
  3545   000048                     	ds	1
  3546   000000                     int$flags	set	btemp
  3547   000000                     wtemp8	set	btemp+1
  3548   000000                     ttemp5	set	btemp+1
  3549   000000                     ttemp6	set	btemp+4
  3550   000000                     ttemp7	set	btemp+8
  3551                           
  3552                           	psect	idloc
  3553                           
  3554                           ;Config register IDLOC0 @ 0x200000
  3555                           ;	unspecified, using default values
  3556   200000                     	org	2097152
  3557   200000  FF                 	db	255
  3558                           
  3559                           ;Config register IDLOC1 @ 0x200001
  3560                           ;	unspecified, using default values
  3561   200001                     	org	2097153
  3562   200001  FF                 	db	255
  3563                           
  3564                           ;Config register IDLOC2 @ 0x200002
  3565                           ;	unspecified, using default values
  3566   200002                     	org	2097154
  3567   200002  FF                 	db	255
  3568                           
  3569                           ;Config register IDLOC3 @ 0x200003
  3570                           ;	unspecified, using default values
  3571   200003                     	org	2097155
  3572   200003  FF                 	db	255
  3573                           
  3574                           ;Config register IDLOC4 @ 0x200004
  3575                           ;	unspecified, using default values
  3576   200004                     	org	2097156
  3577   200004  FF                 	db	255
  3578                           
  3579                           ;Config register IDLOC5 @ 0x200005
  3580                           ;	unspecified, using default values
  3581   200005                     	org	2097157
  3582   200005  FF                 	db	255
  3583                           
  3584                           ;Config register IDLOC6 @ 0x200006
  3585                           ;	unspecified, using default values
  3586   200006                     	org	2097158
  3587   200006  FF                 	db	255
  3588                           
  3589                           ;Config register IDLOC7 @ 0x200007
  3590                           ;	unspecified, using default values
  3591   200007                     	org	2097159
  3592   200007  FF                 	db	255
  3593                           
  3594                           	psect	config
  3595                           
  3596                           ; Padding undefined space
  3597   300000                     	org	3145728
  3598   300000  FF                 	db	255
  3599                           
  3600                           ;Config register CONFIG1H @ 0x300001
  3601                           ;	Oscillator Selection bits
  3602                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  3603                           ;	Fail-Safe Clock Monitor Enable bit
  3604                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3605                           ;	Internal External Oscillator Switchover bit
  3606                           ;	IESO = ON, Internal External Switchover mode enabled
  3607   300001                     	org	3145729
  3608   300001  C8                 	db	200
  3609                           
  3610                           ;Config register CONFIG2L @ 0x300002
  3611                           ;	Power-up Timer Enable bit
  3612                           ;	PWRTEN = OFF, PWRT disabled
  3613                           ;	Brown-out Reset Enable bits
  3614                           ;	BOREN = OFF, Brown-out Reset disabled
  3615                           ;	Brown Out Reset Voltage bits
  3616                           ;	BORV = 0x3, unprogrammed default
  3617   300002                     	org	3145730
  3618   300002  0D                 	db	13
  3619                           
  3620                           ;Config register CONFIG2H @ 0x300003
  3621                           ;	Watchdog Timer Enable bit
  3622                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3623                           ;	Watchdog Timer Postscale Select bits
  3624                           ;	WDPS = 32768, 1:32768
  3625                           ;	Watchdog Timer Window Enable bit
  3626                           ;	WINEN = OFF, WDT window disabled
  3627   300003                     	org	3145731
  3628   300003  3E                 	db	62
  3629                           
  3630                           ;Config register CONFIG3L @ 0x300004
  3631                           ;	PWM output pins Reset state control
  3632                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  3633                           ;	Low-Side Transistors Polarity
  3634                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  3635                           ;	High-Side Transistors Polarity
  3636                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  3637                           ;	Timer1 Oscillator MUX
  3638                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  3639   300004                     	org	3145732
  3640   300004  3C                 	db	60
  3641                           
  3642                           ;Config register CONFIG3H @ 0x300005
  3643                           ;	FLTA MUX bit
  3644                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  3645                           ;	SSP I/O MUX bit
  3646                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  3647                           ;	PWM4 MUX bit
  3648                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  3649                           ;	TMR0/T5CKI External clock MUX bit
  3650                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  3651                           ;	MCLR Pin Enable bit
  3652                           ;	MCLRE = ON, Enabled
  3653   300005                     	org	3145733
  3654   300005  9D                 	db	157
  3655                           
  3656                           ;Config register CONFIG4L @ 0x300006
  3657                           ;	Stack Full/Underflow Reset Enable bit
  3658                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3659                           ;	Low-Voltage ICSP Enable bit
  3660                           ;	LVP = OFF, Low-voltage ICSP disabled
  3661                           ;	Background Debugger Enable bit
  3662                           ;	DEBUG = 0x1, unprogrammed default
  3663   300006                     	org	3145734
  3664   300006  81                 	db	129
  3665                           
  3666                           ; Padding undefined space
  3667   300007                     	org	3145735
  3668   300007  FF                 	db	255
  3669                           
  3670                           ;Config register CONFIG5L @ 0x300008
  3671                           ;	Code Protection bit
  3672                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  3673                           ;	Code Protection bit
  3674                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  3675   300008                     	org	3145736
  3676   300008  0F                 	db	15
  3677                           
  3678                           ;Config register CONFIG5H @ 0x300009
  3679                           ;	Boot Block Code Protection bit
  3680                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3681                           ;	Data EEPROM Code Protection bit
  3682                           ;	CPD = OFF, Data EEPROM not code-protected
  3683   300009                     	org	3145737
  3684   300009  C0                 	db	192
  3685                           
  3686                           ;Config register CONFIG6L @ 0x30000A
  3687                           ;	Write Protection bit
  3688                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  3689                           ;	Write Protection bit
  3690                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  3691   30000A                     	org	3145738
  3692   30000A  0F                 	db	15
  3693                           
  3694                           ;Config register CONFIG6H @ 0x30000B
  3695                           ;	Configuration Register Write Protection bit
  3696                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3697                           ;	Boot Block Write Protection bit
  3698                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3699                           ;	Data EEPROM Write Protection bit
  3700                           ;	WRTD = OFF, Data EEPROM not write-protected
  3701   30000B                     	org	3145739
  3702   30000B  E0                 	db	224
  3703                           
  3704                           ;Config register CONFIG7L @ 0x30000C
  3705                           ;	Table Read Protection bit
  3706                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  3707                           ;	Table Read Protection bit
  3708                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  3709   30000C                     	org	3145740
  3710   30000C  0F                 	db	15
  3711                           
  3712                           ;Config register CONFIG7H @ 0x30000D
  3713                           ;	Boot Block Table Read Protection bit
  3714                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3715   30000D                     	org	3145741
  3716   30000D  40                 	db	64
  3717                           tosu	equ	0xFFF
  3718                           tosh	equ	0xFFE
  3719                           tosl	equ	0xFFD
  3720                           stkptr	equ	0xFFC
  3721                           pclatu	equ	0xFFB
  3722                           pclath	equ	0xFFA
  3723                           pcl	equ	0xFF9
  3724                           tblptru	equ	0xFF8
  3725                           tblptrh	equ	0xFF7
  3726                           tblptrl	equ	0xFF6
  3727                           tablat	equ	0xFF5
  3728                           prodh	equ	0xFF4
  3729                           prodl	equ	0xFF3
  3730                           indf0	equ	0xFEF
  3731                           postinc0	equ	0xFEE
  3732                           postdec0	equ	0xFED
  3733                           preinc0	equ	0xFEC
  3734                           plusw0	equ	0xFEB
  3735                           fsr0h	equ	0xFEA
  3736                           fsr0l	equ	0xFE9
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postinc1	equ	0xFE6
  3740                           postdec1	equ	0xFE5
  3741                           preinc1	equ	0xFE4
  3742                           plusw1	equ	0xFE3
  3743                           fsr1h	equ	0xFE2
  3744                           fsr1l	equ	0xFE1
  3745                           bsr	equ	0xFE0
  3746                           indf2	equ	0xFDF
  3747                           postinc2	equ	0xFDE
  3748                           postdec2	equ	0xFDD
  3749                           preinc2	equ	0xFDC
  3750                           plusw2	equ	0xFDB
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8

Data Sizes:
    Strings     90
    Constant    0
    Data        16
    BSS         50
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      71
    BANK0           160      0      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Register_Callback@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    Reset_Counter@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Reset_Counter@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    WateringDoneCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2893.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    MoistureCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    S817$callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2890.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[19]), STR_4(CODE[20]), STR_3(CODE[15]), STR_2(CODE[19]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_LCD_Write_String
    _SMS_Set_State->_set_state
    _SMS_Read_Moisture_Value->_ADC_Read
    _Register_Callback->_Reset_Counter
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager
    _Watering_Done_cb->i2_set_state
    _Check_Moisture_cb->i2_set_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2317
                          _FSM_begin
                        _Timer0_init
                        _Timer0_stop
                         _UART2_init
                         _UART2_send
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _UART2_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                           20    20      0    2287
                                             24 COMRAM    20    20      0
                     _Callbacks_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                  _Register_Callback
            _SMS_Read_Moisture_Value
                      _SMS_Set_State
                           _SMS_init
                       _Timer0_start
                         _UART2_send
                     _WaterPump_Init
                      _WaterPump_OFF
                       _WaterPump_ON
       _checking_moisture_status_led
                  _get_current_state
                    _idle_status_led
                          _init_leds
                          _set_state
                _watering_status_led
 ---------------------------------------------------------------------------------
 (2) _watering_status_led                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_leds                                            2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _idle_status_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checking_moisture_status_led                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_ON                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_OFF                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WaterPump_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART2_send                                           1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_Set_State                                        2     0      2     157
                                             15 COMRAM     2     0      2
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_Read_Moisture_Value                              4     2      2      23
                                             16 COMRAM     4     2      2
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             14 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Register_Callback                                    4     2      2     338
                                             16 COMRAM     4     2      2
                      _Reset_Counter
 ---------------------------------------------------------------------------------
 (3) _Reset_Counter                                        2     0      2      98
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2     590
                                             18 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1     725
                                             16 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                             16 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              1     1      0      75
                                             15 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_DATA                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Callbacks_Init                                       1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   8     8      0     244
                                              6 COMRAM     8     8      0
                  _Callbacks_Manager
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     222
                                              1 COMRAM     5     5      0
                  _Check_Moisture_cb *
                   _Watering_Done_cb *
 ---------------------------------------------------------------------------------
 (7) _Watering_Done_cb                                     0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (7) _Check_Moisture_cb                                    0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (6) i2_set_state                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) i2_get_current_state                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _Callbacks_Init
     _LCD_Clear
       _LCD_CMD
         _LCD_DATA
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _LCD_Set_Cursor
       _LCD_CMD
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_DATA
     _Register_Callback
       _Reset_Counter
     _SMS_Read_Moisture_Value
       _ADC_Read
         _ADC_in_progress
         _ADC_start
     _SMS_Set_State
       _set_state
     _SMS_init
       _ADC_init
         _ADC_stop
     _Timer0_start
     _UART2_send
     _WaterPump_Init
     _WaterPump_OFF
     _WaterPump_ON
     _checking_moisture_status_led
     _get_current_state
     _idle_status_led
     _init_leds
     _set_state
     _watering_status_led
   _Timer0_init
   _Timer0_stop
   _UART2_init
   _UART2_send
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager
     _Check_Moisture_cb *
       i2_get_current_state
       i2_set_state
     _Watering_Done_cb *
       i2_get_current_state
       i2_set_state
   i2_get_current_state
   i2_set_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      47       1       75.5%
BITBIGSFRllll       21      0       0      21        0.0%
BITBIGSFRhhhl       19      0       0      10        0.0%
BITBIGSFRhhhh        D      0       0       9        0.0%
BITBIGSFRlhllh       C      0       0      16        0.0%
BITBIGSFRhhlll       B      0       0      13        0.0%
BITBIGSFRlllhl       9      0       0      20        0.0%
BITBIGSFRlhlhh       7      0       0      15        0.0%
BITBIGSFRlhh         7      0       0      14        0.0%
BITBIGSFRlllhh       6      0       0      19        0.0%
BITBIGSFRlhlll       4      0       0      17        0.0%
BITBIGSFRllh         3      0       0      18        0.0%
BITBIGSFRhhllh       2      0       0      12        0.0%
BITBIGSFRhhlh        1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6F      22        0.0%
DATA                 0      0      6F      24        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Mar 30 18:01:09 2023

                                  l22 0B5C                                    l33 09D6  
                                  l25 0A1E                                    l34 09E6  
                                  l19 0B4C                                    l51 0B50  
                                  l28 0ADA                                    l45 0A84  
                                  l48 0B58                                    l81 07DE  
                                  l66 0706                                    l83 07F4  
                                  l92 0738                                    l85 080A  
                                  l69 0AF8                                    l78 0A6E  
                                  l94 0768                                    l87 0820  
                                  l89 0822                                    l97 090C  
                                  u10 0AD8                                    u11 0AD2  
                                  u20 07D8                                    u21 07D4  
                                  u30 07EE                                    u31 07EA  
                                  u40 0804                                    u16 0ADA  
                                  u41 0800                                    u50 081A  
                                  u51 0816                   __end_ofi2_set_state 0B42  
                         _pump_status 0045                                   l103 0878  
                                 l142 0B46                                   l231 054C  
                                 l240 08C4                                   l160 0B38  
                                 l152 07C6                                   l145 0AB0  
                                 l322 0B30                                   l316 0B20  
                                 l253 0AC6                                   l157 0B54  
                                 l350 0A02                                   l319 0B28  
                                 _ADC 0041                                   l280 0B02  
                                 l353 0A88                                   l258 068E  
                                 l274 09BC                                   l283 0B16  
                                 l356 0A9A                                   l277 0B0C  
                                 u100 0A96                                   u101 0A92  
                                 u400 0878                                   u401 0874  
                                 u410 0780                                   u411 077C  
                                 u420 07A0                                   u501 0678  
                                 u421 079C                                   u430 07B6  
                                 u431 07B2                                   u511 0376  
                                 u521 0388                                   u370 09D6  
                                 u530 0440                                   u371 09D2  
                                 u531 043C                                   u460 08C4  
                                 u380 071A                                   u540 0484  
                                 u461 08C0                                   u381 0716  
                                 u541 0480                                   u390 074A  
                                 u470 0626                                   u550 04E8  
                                 u391 0746                                   u471 0622  
                                 u551 04E4                                   u480 0644  
                                 u481 0640                                   u490 065E  
                                 u707 08FC                                   u491 065A  
                                 u717 0906                                   u727 06A4  
                                 u737 06B0                                   u657 03EA  
                                 u747 06C2                                   u667 04BA  
                                 u757 06D2                                   u677 09A8  
                                 u767 0A66                                   u687 08E2  
                                 u697 08EC                                   prod 000FF3  
                                 tosl 000FFD                                   wreg 000FE8  
                     __end_of_LCD_CMD 0A70                        _LCD_Set_Cursor 0708  
                                l1100 08C8                                  l1110 08E8  
                                l1102 08D4                                  l1120 0902  
                                l1112 08EA                                  l1104 08D6  
                                l1122 0904                                  l1114 08F2  
                                l1106 08DE                                  l1202 0B52  
                                l1060 07F6                                  l1052 07CA  
                                l1140 0696                                  l1116 08F8  
                                l1108 08E0                                  l1044 0B48  
                                l1124 0B34                                  l1062 0804  
                                l1054 07D8                                  l1150 06CA  
                                l1142 0698                                  l1118 08FA  
                                l1046 0B5A                                  l1070 0A08  
                                l1134 0B56                                  l1230 0B1C  
                                l1064 080C                                  l1056 07E0  
                                l1152 06D0                                  l1144 069E  
                                l1136 0690                                  l1048 0AC8  
                                l1080 0A16                                  l1072 0A0C  
                                l1066 081A                                  l1058 07EE  
                                l1090 0A5A                                  l1154 0AEC  
                                l1146 06AE                                  l1138 0694  
                                l1082 0A18                                  l1074 0A0E  
                                l1250 09B4                                  l1092 0A5C  
                                l1148 06B6                                  l1500 09C2  
                                l1084 0A1C                                  l1076 0A10  
                                l1068 0A04                                  l1180 0A96  
                                l1228 0B18                                  l1260 0B2C  
                                l1252 09B6                                  l1094 0A62  
                                l1510 070A                                  l1502 0AB2  
                                l1078 0A12                                  l1182 0B42  
                                l1270 0B0E                                  l1262 0B04  
                                l1254 09B8                                  l1246 098E  
                                l1096 0A64                                  l1520 075C  
                                l1512 071A                                  l1264 0B22  
                                l1256 09BA                                  l1248 099E  
                                l1600 039C                                  l1272 0A70  
                                l1280 09EE                                  l1098 0A6C  
                                l1522 0762                                  l1514 072C  
                                l1530 0850                                  l1178 0A88  
                                l1258 0B2A                                  l1266 0B24  
                                l1610 03BE                                  l1602 03A8  
                                l1274 0A7C                                  l1290 09FE  
                                l1282 09F6                                  l1516 0732  
                                l1524 0824                                  l1532 0A9C  
                                l1540 0780                                  l1268 0AFA  
                                l1620 03FA                                  l1612 03CA  
                                l1604 03AC                                  l1276 0B4E  
                                l1292 0A00                                  l1284 09F8  
                                l1518 074A                                  l1526 0830  
                                l1534 0AA8                                  l1542 078A  
                                l1630 0424                                  l1622 0404  
                                l1614 03D4                                  l1606 03B0  
                                l1286 09FA                                  l1278 09E8  
                                l1710 0962                                  l1528 084C  
                                l1544 07A0                                  l1640 044E  
                                l1632 0428                                  l1624 040A  
                                l1616 03E0                                  l1608 03B4  
                                l1288 09FC                                  l1720 096E  
                                l1712 0964                                  l1704 0954  
                                l1570 08B4                                  l1546 07B6  
                                l1538 076A                                  l1650 0488  
                                l1642 0452                                  l1634 042C  
                                l1626 040E                                  l1618 03F6  
                                l1730 0982                                  l1722 0972  
                                l1714 0966                                  l1706 095C  
                                l1564 087E                                  l1580 0680  
                                l1572 0616                                  l1548 07C0  
                                l1660 04AC                                  l1652 048E  
                                l1644 045C                                  l1636 0444  
                                l1628 0418                                  l1724 0974  
                                l1716 0968                                  l1708 0960  
                                l1566 08AE                                  l1558 087A  
                                l1582 068C                                  l1574 0626  
                                l1670 04F0                                  l1662 04B0  
                                l1654 0492                                  l1646 046C  
                                l1638 044A                                  l1590 0364  
                                l1726 0976                                  l1718 096C  
                                l1568 08B2                                  l1576 0644  
                                l1672 04F6                                  l1664 04C6  
                                l1656 049C                                  l1648 0470  
                                l1592 0368                                  l1728 097C  
                                l1578 065E                                  l1498 09BE  
                                l1674 0506                                  l1666 04D2  
                                l1658 04A8                                  l1594 036C  
                                l1586 035C                                  l1764 0526  
                                l1668 04E8                                  l1596 037E  
                                l1588 0360                   LCD_Write_String@str 0013  
                                l1598 0390                                  l1678 0510  
                                STR_1 033B                                  STR_2 0315  
                                STR_3 034C                                  STR_4 0301  
                                STR_5 0328                                  _LATC 000F8B  
                                _LATD 000F8C                 __end_of_Reset_Counter 0AC8  
                   ?_LCD_Write_String 0013                                  _main 0954  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0048                      __end_of_ADC_Read 09E8  
                                prodh 000FF4                                  prodl 000FF3  
                                start 00BC                    ??_LCD_Write_String 0015  
                    __end_of_ADC_init 0A20                      __end_of_ADC_stop 0B5E  
                        ___param_bank 000000                     FSM_begin@moisture 002B  
          Callbacks_Manager@callbacks 0006                      __end_of_LCD_DATA 0824  
                         ?_UART2_init 0001                           ?_UART2_send 0001  
                    __end_of_LCD_Init 0708              ?_SMS_Read_Moisture_Value 0011  
                               ?_main 0001                         _SMS_Set_State 076A  
                               i2l210 0A56                                 i2l206 0A3A  
                               i2l160 0B40                                 i2l250 0614  
                               i2l307 0098                                 i2l157 0B60  
                               _RCREG 000FAE                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _SPBRG 000FAF  
                               _TRISB 000F93                                 _TRISC 000F94  
                               _TRISD 000F95                                 _TXREG 000FAD  
              __end_of_LCD_Set_Cursor 076A                                 pclath 000FFA  
                               pclatu 000FFB                                 tablat 000FF5  
                    __end_of_SMS_init 0B48                                 plusw1 000FE3  
                               plusw2 000FDB                                 ttemp5 0049  
                               ttemp6 004C                                 ttemp7 0050  
                               status 000FD8                                 wtemp8 0049  
                   __end_of_ADC_start 0B4E                        _LCD_Write_Char 08C6  
                     __initialization 090E                          __end_of_main 098E  
                         i2_set_state 0B3A                   _watering_status_led 0AFA  
                      ?_SMS_Set_State 0010                                ??_main 002D  
             i2set_state@state_to_set 0001                     _Check_Moisture_cb 0A20  
                   __end_of_LCD_Clear 0AFA                         __activetblptr 000002  
                           ??_LCD_CMD 0010                    ?_Check_Moisture_cb 0001  
                     ?_LCD_Set_Cursor 0011                  ?_watering_status_led 0001  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                 ??_Check_Moisture_cb 0002                                i2l1504 0B5E  
                              i2l1508 0B3C                                i2l1700 0602  
                              i2l1550 0A20                                i2l1702 0604  
                              i2l1552 0A34                                i2l1554 0A3C  
                              i2l1556 0A50                                i2l1740 0052  
                              i2l1732 002A                                i2l1750 0078  
                              i2l1742 0056                                i2l1734 002E  
                              i2l1752 008C                                i2l1744 0064  
                              i2l1736 003E                                i2l1690 0552  
                              i2l1754 0092                                i2l1746 0068  
                              i2l1738 0042                                i2l1692 0568  
                              i2l1684 054E                                i2l1756 0094  
                              i2l1748 006A                                i2l1694 059E  
                              i2l1758 0096                                i2l1696 05C0  
                              i2l1698 05D8                     __end_of_FSM_begin 054E  
                              _SPBRGH 000FB0                __end_of_LCD_Write_Char 090E  
                       ??_Timer0_init 000F       __end_of_SMS_Read_Moisture_Value 0AB2  
                       ??_Timer0_stop 000F             __end_of_Check_Moisture_cb 0A3C  
                              clear_0 0934                                clear_1 0940  
                              isa$std 000001                     _Callbacks_Manager 054E  
                _registered_callbacks 0060                          __pdataCOMRAM 002D  
                           ?_ADC_Read 000F                    ?_Callbacks_Manager 0001  
                        __mediumconst 0000                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
                           ?_ADC_init 0001                             ?_ADC_stop 0001  
               ??_watering_status_led 000F        FSM_begin@WateringDoneCB_Config 0023  
                     LCD_Set_Cursor@c 0011                       LCD_Set_Cursor@r 0012  
                 ??_Callbacks_Manager 0002                             ?_LCD_DATA 0001  
                          __accesstop 0060               __end_of__initialization 0946  
                           ?_LCD_Init 0001                      _Watering_Done_cb 0A3C  
                       ___rparam_used 000001                       ?_LCD_Write_Char 0001  
                      __pcstackCOMRAM 0001                 __end_of_WaterPump_OFF 0B32  
                     ??_SMS_Set_State 0012             __end_of_Callbacks_Manager 0616  
                 __end_of_Timer0_init 0A86                   __end_of_Timer0_stop 0B52  
   _tmr0Counter@SystemInterrupts$F995 003D            __end_of_timer_overflow_isr 00BC  
                           ?_SMS_init 0001                            ??_ADC_Read 0011  
                          ??_ADC_init 000F                            ??_ADC_stop 000F  
__end_of_checking_moisture_status_led 0B18          _checking_moisture_status_led 0B0E  
                          __pbssBANK0 0060                            ??_LCD_DATA 000F  
          FSM_begin@MoistureCB_Config 001B                            ??_LCD_Init 0011  
                          __pnvCOMRAM 0047                         ?_Timer0_start 0001  
                        ??_UART2_init 000F                          ??_UART2_send 000F  
                          ??_SMS_init 000F                               _LCD_CMD 0A58  
                   ??_ADC_in_progress 000F                               i2u44_40 0A34  
                             i2u60_40 003E                               i2u44_41 0A30  
                             i2u60_41 003A                               i2u45_40 0A50  
                             i2u61_40 0052                               i2u45_41 0A4C  
                             i2u61_41 004E                               i2u62_40 0064  
                             i2u62_41 0060                               i2u63_40 0078  
                             i2u63_41 0074                               i2u56_40 059E  
                             i2u64_40 008C                               i2u56_41 059A  
                             i2u64_41 0088                               i2u57_40 05C0  
                             i2u57_41 05BC                               i2u59_40 0614  
                             i2u58_48 05EE                               i2u59_41 0610  
                             i2u58_49 0602         ?_checking_moisture_status_led 0001  
                           _ADCHSbits 000F99                    __end_of_UART2_init 0A04  
                  __end_of_UART2_send 0A9C                               __Hparam 0000  
                             __Lparam 0000                        ??_Timer0_start 000F  
                         _Timer0_init 0A70                           _Timer0_stop 0B4E  
                        ?i2_set_state 0001                             _ADC_start 0B48  
                       ?_WaterPump_ON 0001                          __psmallconst 0300  
                             __pcinit 090E                               __ramtop 0300  
                    ??_LCD_Set_Cursor 0012                               __ptext0 0954  
                             __ptext1 09E8                               __ptext2 0B4E  
                             __ptext3 0A70                               __ptext4 035C  
                             __ptext5 0AFA                               __ptext6 098E  
                             __ptext7 0B04                               __ptext8 0B52  
                             __ptext9 0B0E                             _T0CONbits 000FD5  
                   __end_of_init_leds 09BE               Register_Callback@config 0011  
                           _LCD_Clear 0AEC                               _rx_data 0043  
                             _rx_flag 0044                  end_of_initialization 0946  
                   ??_idle_status_led 000F                         __Lmediumconst 0000  
                   __end_of_set_state 0B3A                             _FSM_begin 035C  
                      ??_WaterPump_ON 000F                             _FSM_state 0047  
                 fp__Watering_Done_cb 0000                             _RCSTAbits 000FAB  
                          ?_ADC_start 0001                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
                           _PORTBbits 000F81              __end_of_Watering_Done_cb 0A58  
                          LCD_CMD@CMD 0010                        _WaterPump_Init 0B18  
                           _TRISBbits 000F93                             _TRISCbits 000F94  
                          ?_LCD_Clear 0001                     LCD_Write_String@i 0017  
                    ??_LCD_Write_Char 0010                Callbacks_Init@callback 000F  
                       _Reset_Counter 0AB2                             _TXSTAbits 000FAC  
                          ?_FSM_begin 0001                        _Callbacks_Init 087A  
                    _LCD_Write_String 0824                         __pidataCOMRAM 0ADC  
              __end_of_WaterPump_Init 0B22           __end_of_watering_status_led 0B04  
                 start_initialization 090E               _SMS_Read_Moisture_Value 0A9C  
                 i2_get_current_state 0B5E                  __end_of_Timer0_start 0B5A  
                fp__Check_Moisture_cb 0000                    _timer_overflow_isr 0008  
                      ?_Reset_Counter 000F                __end_of_Callbacks_Init 08C6  
                 ?_timer_overflow_isr 0001                  ?i2_get_current_state 0001  
                         ??_ADC_start 000F                       _ADC_in_progress 0AC8  
                     ?_WaterPump_Init 0001                 __end_of_SMS_Set_State 07C8  
                            ?_LCD_CMD 0001                           __pbssCOMRAM 003D  
                ??_timer_overflow_isr 0007                           ??_LCD_Clear 0011  
                __end_of_WaterPump_ON 0B2A                     _Register_Callback 0616  
                     ?_Callbacks_Init 0001                    ?_Register_Callback 0011  
                         ??_FSM_begin 0019                 ??i2_get_current_state 0001  
                        ?_Timer0_init 0001                          ?_Timer0_stop 0001  
                           __pintcode 0008                   ??_Register_Callback 0013  
                         __smallconst 0300                       _idle_status_led 0B04  
           ??_SMS_Read_Moisture_Value 0013                              _ADC_Read 09BE  
                            _ADC_init 0A04                              _ADC_stop 0B5A  
     SMS_Read_Moisture_Value@moisture 0013             __end_of_Register_Callback 0690  
                           _init_leds 098E                       ??_Reset_Counter 0011  
                            _LCD_DATA 07C8                              _LCD_Init 0690  
             __end_of_ADC_in_progress 0ADC                              _PIR1bits 000F9E  
                            _RCONbits 000FD0                             _set_state 0B32  
                       _WaterPump_OFF 0B2A                            _ADCON0bits 000FC2  
                          _ADCON1bits 000FC1                            _ADCON2bits 000FC0  
                            _SMS_init 0B42                     ?_Watering_Done_cb 0001  
                 Reset_Counter@config 000F                    ??_Watering_Done_cb 0002  
                          ?_init_leds 0001                           _INTCON2bits 000FF1  
                           copy_data0 0922              __end_of_LCD_Write_String 087A  
                      UART2_send@data 000F                              __Hrparam 0000  
                            __Lrparam 0000                   LCD_Write_Char@High4 0011  
                          ?_set_state 0001                          _Timer0_start 0B56  
                      ?_WaterPump_OFF 0001               __end_of_idle_status_led 0B0E  
                          _ANSEL0bits 000FB8                              __ptext10 0B22  
                            __ptext11 0B2A                              __ptext20 0A9C  
                            __ptext12 0B18                              __ptext21 09BE  
                            __ptext13 0A86                              __ptext30 0AEC  
                            __ptext22 0B48                              __ptext14 0B56  
                            __ptext31 0A58                              __ptext23 0AC8  
                            __ptext15 0B42                              __ptext40 0000  
                            __ptext32 07C8                              __ptext24 0616  
                            __ptext16 0A04                              __ptext33 087A  
                            __ptext25 0AB2                              __ptext17 0B5A  
                            __ptext26 0824                              __ptext18 076A  
                            __ptext35 054E                              __ptext27 08C6  
                            __ptext19 0B32                              __ptext36 0A20  
                            __ptext28 0708                              __ptext37 0A3C  
                            __ptext29 0690                              __ptext38 0B3A  
                            __ptext39 0B5E                        _callback_count 0046  
                    ?_ADC_in_progress 0001                      ??_WaterPump_Init 000F  
                            isa$xinst 000000                     _get_current_state 0B52  
                        _WaterPump_ON 0B22                              int$flags 0048  
                         _tmr0Counter 003F                   LCD_Set_Cursor@High4 0014  
                  ?_get_current_state 0001                   ??_get_current_state 000F  
                          _INTCONbits 000FF2                    LCD_Write_Char@Data 0012  
                  LCD_Write_Char@Low4 0010                           ??_init_leds 000F  
                    ??_Callbacks_Init 000F                 SMS_Set_State@moisture 0010  
                            intlevel2 0000             __end_of_get_current_state 0B56  
                          _OSCCONbits 000FD3                       ??_WaterPump_OFF 000F  
                       ??i2_set_state 0001                           ??_set_state 000F  
      ??_checking_moisture_status_led 000F                    LCD_Set_Cursor@Low4 0013  
                  LCD_Set_Cursor@Temp 0015                      ?_idle_status_led 0001  
                          _UART2_init 09E8                            _UART2_send 0A86  
                        LCD_DATA@Data 000F                 set_state@state_to_set 000F  
                      FSM_begin@F2890 0035           __end_ofi2_get_current_state 0B62  
                      FSM_begin@F2893 002D  
