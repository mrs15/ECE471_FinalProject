

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Mar 14 17:52:35 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33   000000                     
    34                           ; Version 2.40
    35                           ; Generated 17/11/2021 GMT
    36                           ; 
    37                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F4331 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000000                     _ADRESL	set	4035
    70   000000                     _ADRESH	set	4036
    71                           
    72                           	psect	nvCOMRAM
    73   000018                     __pnvCOMRAM:
    74                           	callstack 0
    75   000018                     _FSM_state:
    76                           	callstack 0
    77   000018                     	ds	1
    78   000000                     _ADCHSbits	set	3993
    79   000000                     _ADCON1bits	set	4033
    80   000000                     _ADCON0bits	set	4034
    81   000000                     _ANSEL0bits	set	4024
    82   000000                     _ADCON2bits	set	4032
    83   000000                     _T0CONbits	set	4053
    84   000000                     _TMR0L	set	4054
    85   000000                     _INTCONbits	set	4082
    86   000000                     _TMR0H	set	4055
    87                           
    88                           ; #config settings
    89                           
    90                           	psect	cinit
    91   0001B0                     __pcinit:
    92                           	callstack 0
    93   0001B0                     start_initialization:
    94                           	callstack 0
    95   0001B0                     __initialization:
    96                           	callstack 0
    97                           
    98                           ; Clear objects allocated to BIGRAM (400 bytes)
    99   0001B0  EE01  F070         	lfsr	0,__pbssBIGRAM
   100   0001B4  EE11 F090          	lfsr	1,400
   101   0001B8                     clear_0:
   102   0001B8  6AEE               	clrf	postinc0,c
   103   0001BA  50E5               	movf	postdec1,w,c
   104   0001BC  50E1               	movf	fsr1l,w,c
   105   0001BE  E1FC               	bnz	clear_0
   106   0001C0  50E2               	movf	fsr1h,w,c
   107   0001C2  E1FA               	bnz	clear_0
   108                           
   109                           ; Clear objects allocated to COMRAM (10 bytes)
   110   0001C4  EE00  F00E         	lfsr	0,__pbssCOMRAM
   111   0001C8  0E0A               	movlw	10
   112   0001CA                     clear_1:
   113   0001CA  6AEE               	clrf	postinc0,c
   114   0001CC  06E8               	decf	wreg,f,c
   115   0001CE  E1FD               	bnz	clear_1
   116   0001D0                     end_of_initialization:
   117                           	callstack 0
   118   0001D0                     __end_of__initialization:
   119                           	callstack 0
   120   0001D0  9019               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121   0001D2  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122   0001D4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   123   0001D6  6EF8               	movwf	tblptru,c
   124   0001D8  0100               	movlb	0
   125   0001DA  EF2A  F001         	goto	_main	;jump to C main() function
   126                           
   127                           	psect	bssCOMRAM
   128   00000E                     __pbssCOMRAM:
   129                           	callstack 0
   130   00000E                     _system_count:
   131                           	callstack 0
   132   00000E                     	ds	2
   133   000010                     _number_of_callbacks:
   134                           	callstack 0
   135   000010                     	ds	2
   136   000012                     _CallbackExecutive:
   137                           	callstack 0
   138   000012                     	ds	2
   139   000014                     _tmr0Counter:
   140                           	callstack 0
   141   000014                     	ds	2
   142   000016                     _ADC:
   143                           	callstack 0
   144   000016                     	ds	2
   145                           
   146                           	psect	bssBIGRAM
   147   000170                     __pbssBIGRAM:
   148                           	callstack 0
   149   000170                     _registered_callbacks:
   150                           	callstack 0
   151   000170                     	ds	400
   152                           
   153                           	psect	cstackCOMRAM
   154   000001                     __pcstackCOMRAM:
   155                           	callstack 0
   156   000001                     ??_OneSecond_ExecutiveCallback:
   157                           
   158                           ; 1 bytes @ 0x0
   159   000001                     	ds	1
   160   000002                     OneSecond_ExecutiveCallback@callbacks:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x1
   164   000002                     	ds	2
   165   000004                     ??_timer_overflow_isr:
   166                           
   167                           ; 1 bytes @ 0x3
   168   000004                     	ds	4
   169   000008                     ?_ADC_Read:
   170                           	callstack 0
   171   000008                     set_state@state_to_set:
   172                           	callstack 0
   173   000008                     TimerMiddleware_Init@callback_executive:
   174                           	callstack 0
   175                           
   176                           ; 2 bytes @ 0x7
   177   000008                     	ds	2
   178   00000A                     SMS_read_and_set_state@moisture:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x9
   182   00000A                     	ds	2
   183   00000C                     ??_FSM_begin:
   184                           
   185                           ; 1 bytes @ 0xB
   186   00000C                     	ds	2
   187   00000E                     
   188                           ; 1 bytes @ 0xD
   189 ;;
   190 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   191 ;;
   192 ;; *************** function _main *****************
   193 ;; Defined at:
   194 ;;		line 14 in file "main.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;		None
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, status,2, status,0, cstack
   203 ;; Tracked objects:
   204 ;;		On entry : 0/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   208 ;;      Params:         0       0       0       0
   209 ;;      Locals:         0       0       0       0
   210 ;;      Temps:          0       0       0       0
   211 ;;      Totals:         0       0       0       0
   212 ;;Total ram usage:        0 bytes
   213 ;; Hardware stack levels required when called: 7
   214 ;; This function calls:
   215 ;;		_FSM_begin
   216 ;;		_set_state
   217 ;; This function is called by:
   218 ;;		Startup code after reset
   219 ;; This function uses a non-reentrant model
   220 ;;
   221                           
   222                           	psect	text0
   223   000254                     __ptext0:
   224                           	callstack 0
   225   000254                     _main:
   226                           	callstack 24
   227   000254                     
   228                           ;main.c: 16:     set_state(INIT_STATE);
   229   000254  0E00               	movlw	0
   230   000256  EC44  F001         	call	_set_state
   231   00025A                     
   232                           ;main.c: 17:     FSM_begin();
   233   00025A  EC3D  F000         	call	_FSM_begin	;wreg free
   234   00025E  EF3B  F000         	goto	start
   235   000262                     __end_of_main:
   236                           	callstack 0
   237                           
   238 ;; *************** function _FSM_begin *****************
   239 ;; Defined at:
   240 ;;		line 7 in file "System_FSM.c"
   241 ;; Parameters:    Size  Location     Type
   242 ;;		None
   243 ;; Auto vars:     Size  Location     Type
   244 ;;		None
   245 ;; Return value:  Size  Location     Type
   246 ;;                  1    wreg      void 
   247 ;; Registers used:
   248 ;;		wreg, status,2, status,0, cstack
   249 ;; Tracked objects:
   250 ;;		On entry : 0/0
   251 ;;		On exit  : 0/0
   252 ;;		Unchanged: 0/0
   253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   254 ;;      Params:         0       0       0       0
   255 ;;      Locals:         0       0       0       0
   256 ;;      Temps:          2       0       0       0
   257 ;;      Totals:         2       0       0       0
   258 ;;Total ram usage:        2 bytes
   259 ;; Hardware stack levels used: 1
   260 ;; Hardware stack levels required when called: 6
   261 ;; This function calls:
   262 ;;		_SMS_init
   263 ;;		_SMS_read_and_set_state
   264 ;;		_SystemCallbacks_Init
   265 ;;		_Timer0_init
   266 ;;		_get_current_state
   267 ;;		_set_state
   268 ;; This function is called by:
   269 ;;		_main
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text1
   274   00007A                     __ptext1:
   275                           	callstack 0
   276   00007A                     _FSM_begin:
   277                           	callstack 24
   278   00007A                     
   279                           ;System_FSM.c: 9:     switch(get_current_state())
   280   00007A  EF5F  F000         	goto	l1001
   281   00007E                     l985:
   282                           
   283                           ;System_FSM.c: 12:         {;System_FSM.c: 14:             SMS_init();
   284   00007E  EC4B  F001         	call	_SMS_init	;wreg free
   285   000082                     
   286                           ;System_FSM.c: 15:             Timer0_init();
   287   000082  EC31  F001         	call	_Timer0_init	;wreg free
   288   000086                     
   289                           ;System_FSM.c: 16:             SystemCallbacks_Init();
   290   000086  EC38  F001         	call	_SystemCallbacks_Init	;wreg free
   291   00008A                     
   292                           ;System_FSM.c: 17:             set_state(IDLE_STATE);
   293   00008A  0E01               	movlw	1
   294   00008C  EC44  F001         	call	_set_state
   295                           
   296                           ;System_FSM.c: 18:             break;
   297   000090  EF7D  F000         	goto	l120
   298   000094                     l993:
   299                           
   300                           ;System_FSM.c: 23:             while(get_current_state() == IDLE_STATE)
   301   000094  EC4E  F001         	call	_get_current_state	;wreg free
   302   000098  06E8               	decf	wreg,f,c
   303   00009A  B4D8               	btfsc	status,2,c
   304   00009C  EF52  F000         	goto	u171
   305   0000A0  EF54  F000         	goto	u170
   306   0000A4                     u171:
   307   0000A4  EF4A  F000         	goto	l993
   308   0000A8                     u170:
   309   0000A8  EF7D  F000         	goto	l120
   310   0000AC                     l995:
   311                           
   312                           ;System_FSM.c: 42:         {;System_FSM.c: 45:             SMS_read_and_set_state();
   313   0000AC  EC7E  F000         	call	_SMS_read_and_set_state	;wreg free
   314                           
   315                           ;System_FSM.c: 46:             break;
   316   0000B0  EF7D  F000         	goto	l120
   317   0000B4                     l997:
   318                           
   319                           ;System_FSM.c: 50:         {;System_FSM.c: 51:             set_state(INIT_STATE);
   320   0000B4  0E00               	movlw	0
   321   0000B6  EC44  F001         	call	_set_state
   322                           
   323                           ;System_FSM.c: 52:             break;
   324   0000BA  EF7D  F000         	goto	l120
   325   0000BE                     l1001:
   326   0000BE  EC4E  F001         	call	_get_current_state	;wreg free
   327   0000C2  6E0C               	movwf	??_FSM_begin^0,c
   328   0000C4  6A0D               	clrf	(??_FSM_begin+1)^0,c
   329                           
   330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   331                           ; Switch size 1, requested type "simple"
   332                           ; Number of cases is 1, Range of values is 0 to 0
   333                           ; switch strategies available:
   334                           ; Name         Instructions Cycles
   335                           ; simple_byte            4     3 (average)
   336                           ;	Chosen strategy is simple_byte
   337   0000C6  500D               	movf	(??_FSM_begin+1)^0,w,c
   338   0000C8  0A00               	xorlw	0	; case 0
   339   0000CA  B4D8               	btfsc	status,2,c
   340   0000CC  EF6A  F000         	goto	l1017
   341   0000D0  EF5A  F000         	goto	l997
   342   0000D4                     l1017:
   343                           
   344                           ; Switch size 1, requested type "simple"
   345                           ; Number of cases is 4, Range of values is 0 to 3
   346                           ; switch strategies available:
   347                           ; Name         Instructions Cycles
   348                           ; simple_byte           13     7 (average)
   349                           ;	Chosen strategy is simple_byte
   350   0000D4  500C               	movf	??_FSM_begin^0,w,c
   351   0000D6  0A00               	xorlw	0	; case 0
   352   0000D8  B4D8               	btfsc	status,2,c
   353   0000DA  EF3F  F000         	goto	l985
   354   0000DE  0A01               	xorlw	1	; case 1
   355   0000E0  B4D8               	btfsc	status,2,c
   356   0000E2  EF4A  F000         	goto	l993
   357   0000E6  0A03               	xorlw	3	; case 2
   358   0000E8  B4D8               	btfsc	status,2,c
   359   0000EA  EF7D  F000         	goto	l120
   360   0000EE  0A01               	xorlw	1	; case 3
   361   0000F0  B4D8               	btfsc	status,2,c
   362   0000F2  EF56  F000         	goto	l995
   363   0000F6  EF5A  F000         	goto	l997
   364   0000FA                     l120:
   365   0000FA  0012               	return		;funcret
   366   0000FC                     __end_of_FSM_begin:
   367                           	callstack 0
   368                           
   369 ;; *************** function _get_current_state *****************
   370 ;; Defined at:
   371 ;;		line 5 in file "FSM_states.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;		None
   374 ;; Auto vars:     Size  Location     Type
   375 ;;		None
   376 ;; Return value:  Size  Location     Type
   377 ;;                  1    wreg      enum E2
   378 ;; Registers used:
   379 ;;		wreg, status,2
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   385 ;;      Params:         0       0       0       0
   386 ;;      Locals:         0       0       0       0
   387 ;;      Temps:          0       0       0       0
   388 ;;      Totals:         0       0       0       0
   389 ;;Total ram usage:        0 bytes
   390 ;; Hardware stack levels used: 1
   391 ;; Hardware stack levels required when called: 3
   392 ;; This function calls:
   393 ;;		Nothing
   394 ;; This function is called by:
   395 ;;		_FSM_begin
   396 ;; This function uses a non-reentrant model
   397 ;;
   398                           
   399                           	psect	text2
   400   00029C                     __ptext2:
   401                           	callstack 0
   402   00029C                     _get_current_state:
   403                           	callstack 26
   404   00029C                     
   405                           ;FSM_states.c: 7:     return FSM_state;
   406   00029C  5018               	movf	_FSM_state^0,w,c
   407   00029E  0012               	return		;funcret
   408   0002A0                     __end_of_get_current_state:
   409                           	callstack 0
   410                           
   411 ;; *************** function _Timer0_init *****************
   412 ;; Defined at:
   413 ;;		line 57 in file "PIC18F4331_Timer.c"
   414 ;; Parameters:    Size  Location     Type
   415 ;;		None
   416 ;; Auto vars:     Size  Location     Type
   417 ;;		None
   418 ;; Return value:  Size  Location     Type
   419 ;;                  1    wreg      void 
   420 ;; Registers used:
   421 ;;		None
   422 ;; Tracked objects:
   423 ;;		On entry : 0/0
   424 ;;		On exit  : 0/0
   425 ;;		Unchanged: 0/0
   426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   427 ;;      Params:         0       0       0       0
   428 ;;      Locals:         0       0       0       0
   429 ;;      Temps:          0       0       0       0
   430 ;;      Totals:         0       0       0       0
   431 ;;Total ram usage:        0 bytes
   432 ;; Hardware stack levels used: 1
   433 ;; Hardware stack levels required when called: 3
   434 ;; This function calls:
   435 ;;		Nothing
   436 ;; This function is called by:
   437 ;;		_FSM_begin
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441                           	psect	text3
   442   000262                     __ptext3:
   443                           	callstack 0
   444   000262                     _Timer0_init:
   445                           	callstack 26
   446   000262                     
   447                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS0 = 1;
   448   000262  80D5               	bsf	213,0,c	;volatile
   449                           
   450                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS1 = 1;
   451   000264  82D5               	bsf	213,1,c	;volatile
   452                           
   453                           ;PIC18F4331_Timer.c: 70:     T0CONbits.T0PS2 = 1;
   454   000266  84D5               	bsf	213,2,c	;volatile
   455                           
   456                           ;PIC18F4331_Timer.c: 73:     T0CONbits.PSA = 0;
   457   000268  96D5               	bcf	213,3,c	;volatile
   458                           
   459                           ;PIC18F4331_Timer.c: 76:     T0CONbits.T0CS = 0;
   460   00026A  9AD5               	bcf	213,5,c	;volatile
   461                           
   462                           ;PIC18F4331_Timer.c: 79:     T0CONbits.T016BIT = 0;
   463   00026C  9CD5               	bcf	213,6,c	;volatile
   464   00026E  0012               	return		;funcret
   465   000270                     __end_of_Timer0_init:
   466                           	callstack 0
   467                           
   468 ;; *************** function _SystemCallbacks_Init *****************
   469 ;; Defined at:
   470 ;;		line 37 in file "SystemCallbacks.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, status,2, status,0, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   484 ;;      Params:         0       0       0       0
   485 ;;      Locals:         0       0       0       0
   486 ;;      Temps:          0       0       0       0
   487 ;;      Totals:         0       0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels used: 1
   490 ;; Hardware stack levels required when called: 4
   491 ;; This function calls:
   492 ;;		_TimerMiddleware_Init
   493 ;; This function is called by:
   494 ;;		_FSM_begin
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text4
   499   000270                     __ptext4:
   500                           	callstack 0
   501   000270                     _SystemCallbacks_Init:
   502                           	callstack 25
   503   000270                     
   504                           ;SystemCallbacks.c: 39:     TimerMiddleware_Init(OneSecond_ExecutiveCallback);
   505   000270  0E5C               	movlw	low _OneSecond_ExecutiveCallback
   506   000272  6E08               	movwf	TimerMiddleware_Init@callback_executive^0,c
   507   000274  0E01               	movlw	high _OneSecond_ExecutiveCallback
   508   000276  6E09               	movwf	(TimerMiddleware_Init@callback_executive+1)^0,c
   509   000278  EC3F  F001         	call	_TimerMiddleware_Init	;wreg free
   510   00027C  0012               	return		;funcret
   511   00027E                     __end_of_SystemCallbacks_Init:
   512                           	callstack 0
   513                           
   514 ;; *************** function _TimerMiddleware_Init *****************
   515 ;; Defined at:
   516 ;;		line 6 in file "SystemTimerMiddleware.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;  callback_exe    2    7[COMRAM] PTR FTN()void 
   519 ;;		 -> OneSecond_ExecutiveCallback(1), 
   520 ;; Auto vars:     Size  Location     Type
   521 ;;		None
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		wreg, status,2, status,0
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   531 ;;      Params:         2       0       0       0
   532 ;;      Locals:         0       0       0       0
   533 ;;      Temps:          0       0       0       0
   534 ;;      Totals:         2       0       0       0
   535 ;;Total ram usage:        2 bytes
   536 ;; Hardware stack levels used: 1
   537 ;; Hardware stack levels required when called: 3
   538 ;; This function calls:
   539 ;;		Nothing
   540 ;; This function is called by:
   541 ;;		_SystemCallbacks_Init
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text5
   546   00027E                     __ptext5:
   547                           	callstack 0
   548   00027E                     _TimerMiddleware_Init:
   549                           	callstack 25
   550   00027E                     
   551                           ;SystemTimerMiddleware.c: 6: void TimerMiddleware_Init(Callback_t callback_executive);Sy
      +                          stemTimerMiddleware.c: 7: {;SystemTimerMiddleware.c: 8:     CallbackExecutive = callback
      +                          _executive;
   552   00027E  C008  F012         	movff	TimerMiddleware_Init@callback_executive,_CallbackExecutive
   553   000282  C009  F013         	movff	TimerMiddleware_Init@callback_executive+1,_CallbackExecutive+1
   554   000286  0012               	return		;funcret
   555   000288                     __end_of_TimerMiddleware_Init:
   556                           	callstack 0
   557                           
   558 ;; *************** function _SMS_read_and_set_state *****************
   559 ;; Defined at:
   560 ;;		line 13 in file "SoilMoistureSensor.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;  moisture        2    9[COMRAM] unsigned short 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   574 ;;      Params:         0       0       0       0
   575 ;;      Locals:         2       0       0       0
   576 ;;      Temps:          0       0       0       0
   577 ;;      Totals:         2       0       0       0
   578 ;;Total ram usage:        2 bytes
   579 ;; Hardware stack levels used: 1
   580 ;; Hardware stack levels required when called: 5
   581 ;; This function calls:
   582 ;;		_ADC_Read
   583 ;;		_set_state
   584 ;; This function is called by:
   585 ;;		_FSM_begin
   586 ;; This function uses a non-reentrant model
   587 ;;
   588                           
   589                           	psect	text6
   590   0000FC                     __ptext6:
   591                           	callstack 0
   592   0000FC                     _SMS_read_and_set_state:
   593                           	callstack 24
   594   0000FC                     
   595                           ;SoilMoistureSensor.c: 15:     uint16_t moisture = ADC_Read();
   596   0000FC  ECEF  F000         	call	_ADC_Read	;wreg free
   597   000100  C008  F00A         	movff	?_ADC_Read,SMS_read_and_set_state@moisture
   598   000104  C009  F00B         	movff	?_ADC_Read+1,SMS_read_and_set_state@moisture+1
   599   000108                     
   600                           ;SoilMoistureSensor.c: 16:     if(moisture >= (595))
   601   000108  0E53               	movlw	83
   602   00010A  5C0A               	subwf	SMS_read_and_set_state@moisture^0,w,c
   603   00010C  0E02               	movlw	2
   604   00010E  580B               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   605   000110  A0D8               	btfss	status,0,c
   606   000112  EF8D  F000         	goto	u141
   607   000116  EF8F  F000         	goto	u140
   608   00011A                     u141:
   609   00011A  EF94  F000         	goto	l975
   610   00011E                     u140:
   611   00011E                     
   612                           ;SoilMoistureSensor.c: 17:     {;SoilMoistureSensor.c: 18:         set_state(WATER_PLANT
      +                          S);
   613   00011E  0E02               	movlw	2
   614   000120  EC44  F001         	call	_set_state
   615                           
   616                           ;SoilMoistureSensor.c: 19:     }
   617   000124  EFAD  F000         	goto	l87
   618   000128                     l975:
   619   000128  500B               	movf	(SMS_read_and_set_state@moisture+1)^0,w,c
   620   00012A  E109               	bnz	u150
   621   00012C  0EEF               	movlw	239
   622   00012E  5C0A               	subwf	SMS_read_and_set_state@moisture^0,w,c
   623   000130  A0D8               	btfss	status,0,c
   624   000132  EF9D  F000         	goto	u151
   625   000136  EF9F  F000         	goto	u150
   626   00013A                     u151:
   627   00013A  EFAD  F000         	goto	l87
   628   00013E                     u150:
   629   00013E  0E53               	movlw	83
   630   000140  5C0A               	subwf	SMS_read_and_set_state@moisture^0,w,c
   631   000142  0E02               	movlw	2
   632   000144  580B               	subwfb	(SMS_read_and_set_state@moisture+1)^0,w,c
   633   000146  B0D8               	btfsc	status,0,c
   634   000148  EFA8  F000         	goto	u161
   635   00014C  EFAA  F000         	goto	u160
   636   000150                     u161:
   637   000150  EFAD  F000         	goto	l87
   638   000154                     u160:
   639   000154                     
   640                           ;SoilMoistureSensor.c: 21:     {;SoilMoistureSensor.c: 23:         set_state(IDLE_STATE)
      +                          ;
   641   000154  0E01               	movlw	1
   642   000156  EC44  F001         	call	_set_state
   643   00015A                     l87:
   644   00015A  0012               	return		;funcret
   645   00015C                     __end_of_SMS_read_and_set_state:
   646                           	callstack 0
   647                           
   648 ;; *************** function _set_state *****************
   649 ;; Defined at:
   650 ;;		line 9 in file "FSM_states.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;  state_to_set    1    wreg     enum E2
   653 ;; Auto vars:     Size  Location     Type
   654 ;;  state_to_set    1    7[COMRAM] enum E2
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		wreg
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   664 ;;      Params:         0       0       0       0
   665 ;;      Locals:         1       0       0       0
   666 ;;      Temps:          0       0       0       0
   667 ;;      Totals:         1       0       0       0
   668 ;;Total ram usage:        1 bytes
   669 ;; Hardware stack levels used: 1
   670 ;; Hardware stack levels required when called: 3
   671 ;; This function calls:
   672 ;;		Nothing
   673 ;; This function is called by:
   674 ;;		_main
   675 ;;		_SMS_read_and_set_state
   676 ;;		_FSM_begin
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680                           	psect	text7
   681   000288                     __ptext7:
   682                           	callstack 0
   683   000288                     _set_state:
   684                           	callstack 27
   685                           
   686                           ;incstack = 0
   687                           ;set_state@state_to_set stored from wreg
   688   000288  6E08               	movwf	set_state@state_to_set^0,c
   689   00028A                     
   690                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
   691   00028A  C008  F018         	movff	set_state@state_to_set,_FSM_state
   692   00028E  0012               	return		;funcret
   693   000290                     __end_of_set_state:
   694                           	callstack 0
   695                           
   696 ;; *************** function _ADC_Read *****************
   697 ;; Defined at:
   698 ;;		line 60 in file "PIC18F4331_ADC.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  2    7[COMRAM] unsigned short 
   705 ;; Registers used:
   706 ;;		wreg, status,2, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   712 ;;      Params:         2       0       0       0
   713 ;;      Locals:         0       0       0       0
   714 ;;      Temps:          0       0       0       0
   715 ;;      Totals:         2       0       0       0
   716 ;;Total ram usage:        2 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; Hardware stack levels required when called: 4
   719 ;; This function calls:
   720 ;;		_ADC_in_progress
   721 ;;		_ADC_start
   722 ;; This function is called by:
   723 ;;		_SMS_read_and_set_state
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           	psect	text8
   728   0001DE                     __ptext8:
   729                           	callstack 0
   730   0001DE                     _ADC_Read:
   731                           	callstack 24
   732   0001DE                     
   733                           ;PIC18F4331_ADC.c: 62:     ADC_start();
   734   0001DE  EC48  F001         	call	_ADC_start	;wreg free
   735   0001E2                     l965:
   736   0001E2  EC20  F001         	call	_ADC_in_progress	;wreg free
   737   0001E6  0900               	iorlw	0
   738   0001E8  A4D8               	btfss	status,2,c
   739   0001EA  EFF9  F000         	goto	u131
   740   0001EE  EFFB  F000         	goto	u130
   741   0001F2                     u131:
   742   0001F2  EFF1  F000         	goto	l965
   743   0001F6                     u130:
   744   0001F6                     
   745                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
   746   0001F6  CFC4 F017          	movff	4036,_ADC+1	;volatile
   747                           
   748                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
   749   0001FA  CFC3 F016          	movff	4035,_ADC	;volatile
   750                           
   751                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
   752   0001FE  C016  F008         	movff	_ADC,?_ADC_Read
   753   000202  C017  F009         	movff	_ADC+1,?_ADC_Read+1
   754   000206  0012               	return		;funcret
   755   000208                     __end_of_ADC_Read:
   756                           	callstack 0
   757                           
   758 ;; *************** function _ADC_start *****************
   759 ;; Defined at:
   760 ;;		line 13 in file "PIC18F4331_ADC.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		None
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   774 ;;      Params:         0       0       0       0
   775 ;;      Locals:         0       0       0       0
   776 ;;      Temps:          0       0       0       0
   777 ;;      Totals:         0       0       0       0
   778 ;;Total ram usage:        0 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; Hardware stack levels required when called: 3
   781 ;; This function calls:
   782 ;;		Nothing
   783 ;; This function is called by:
   784 ;;		_ADC_Read
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           	psect	text9
   789   000290                     __ptext9:
   790                           	callstack 0
   791   000290                     _ADC_start:
   792                           	callstack 24
   793   000290                     
   794                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
   795   000290  80C2               	bsf	194,0,c	;volatile
   796                           
   797                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
   798   000292  82C2               	bsf	194,1,c	;volatile
   799   000294  0012               	return		;funcret
   800   000296                     __end_of_ADC_start:
   801                           	callstack 0
   802                           
   803 ;; *************** function _ADC_in_progress *****************
   804 ;; Defined at:
   805 ;;		line 53 in file "PIC18F4331_ADC.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      unsigned char 
   812 ;; Registers used:
   813 ;;		wreg
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   819 ;;      Params:         0       0       0       0
   820 ;;      Locals:         0       0       0       0
   821 ;;      Temps:          0       0       0       0
   822 ;;      Totals:         0       0       0       0
   823 ;;Total ram usage:        0 bytes
   824 ;; Hardware stack levels used: 1
   825 ;; Hardware stack levels required when called: 3
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_ADC_Read
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text10
   834   000240                     __ptext10:
   835                           	callstack 0
   836   000240                     _ADC_in_progress:
   837                           	callstack 24
   838   000240                     
   839                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
   840   000240  B2C2               	btfsc	194,1,c	;volatile
   841   000242  EF25  F001         	goto	u11
   842   000246  EF28  F001         	goto	u10
   843   00024A                     u11:
   844   00024A  0E01               	movlw	1
   845   00024C  EF29  F001         	goto	u16
   846   000250                     u10:
   847   000250  0E00               	movlw	0
   848   000252                     u16:
   849   000252  0012               	return		;funcret
   850   000254                     __end_of_ADC_in_progress:
   851                           	callstack 0
   852                           
   853 ;; *************** function _SMS_init *****************
   854 ;; Defined at:
   855 ;;		line 8 in file "SoilMoistureSensor.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   869 ;;      Params:         0       0       0       0
   870 ;;      Locals:         0       0       0       0
   871 ;;      Temps:          0       0       0       0
   872 ;;      Totals:         0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 5
   876 ;; This function calls:
   877 ;;		_ADC_init
   878 ;; This function is called by:
   879 ;;		_FSM_begin
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text11
   884   000296                     __ptext11:
   885                           	callstack 0
   886   000296                     _SMS_init:
   887                           	callstack 24
   888   000296                     
   889                           ;SoilMoistureSensor.c: 10:     ADC_init();
   890   000296  EC04  F001         	call	_ADC_init	;wreg free
   891   00029A  0012               	return		;funcret
   892   00029C                     __end_of_SMS_init:
   893                           	callstack 0
   894                           
   895 ;; *************** function _ADC_init *****************
   896 ;; Defined at:
   897 ;;		line 24 in file "PIC18F4331_ADC.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, status,2, cstack
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   911 ;;      Params:         0       0       0       0
   912 ;;      Locals:         0       0       0       0
   913 ;;      Temps:          0       0       0       0
   914 ;;      Totals:         0       0       0       0
   915 ;;Total ram usage:        0 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; Hardware stack levels required when called: 4
   918 ;; This function calls:
   919 ;;		_ADC_stop
   920 ;; This function is called by:
   921 ;;		_SMS_init
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text12
   926   000208                     __ptext12:
   927                           	callstack 0
   928   000208                     _ADC_init:
   929                           	callstack 24
   930   000208                     
   931                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
   932   000208  EC50  F001         	call	_ADC_stop	;wreg free
   933   00020C                     
   934                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
   935   00020C  0E3F               	movlw	-193
   936   00020E  16C1               	andwf	193,f,c	;volatile
   937   000210                     
   938                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
   939   000210  9099               	bcf	153,0,c	;volatile
   940   000212                     
   941                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
   942   000212  9299               	bcf	153,1,c	;volatile
   943   000214                     
   944                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
   945   000214  9AC2               	bcf	194,5,c	;volatile
   946   000216                     
   947                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
   948   000216  0EF8               	movlw	-8
   949   000218  16C0               	andwf	192,f,c	;volatile
   950   00021A                     
   951                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
   952   00021A  8EC0               	bsf	192,7,c	;volatile
   953   00021C                     
   954                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
   955   00021C  0E87               	movlw	-121
   956   00021E  16C0               	andwf	192,f,c	;volatile
   957   000220                     
   958                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
   959   000220  80B8               	bsf	184,0,c	;volatile
   960   000222  0012               	return		;funcret
   961   000224                     __end_of_ADC_init:
   962                           	callstack 0
   963                           
   964 ;; *************** function _ADC_stop *****************
   965 ;; Defined at:
   966 ;;		line 19 in file "PIC18F4331_ADC.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		None
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   980 ;;      Params:         0       0       0       0
   981 ;;      Locals:         0       0       0       0
   982 ;;      Temps:          0       0       0       0
   983 ;;      Totals:         0       0       0       0
   984 ;;Total ram usage:        0 bytes
   985 ;; Hardware stack levels used: 1
   986 ;; Hardware stack levels required when called: 3
   987 ;; This function calls:
   988 ;;		Nothing
   989 ;; This function is called by:
   990 ;;		_ADC_init
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           	psect	text13
   995   0002A0                     __ptext13:
   996                           	callstack 0
   997   0002A0                     _ADC_stop:
   998                           	callstack 24
   999   0002A0                     
  1000                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1001   0002A0  90C2               	bcf	194,0,c	;volatile
  1002   0002A2  0012               	return		;funcret
  1003   0002A4                     __end_of_ADC_stop:
  1004                           	callstack 0
  1005                           
  1006 ;; *************** function _timer_overflow_isr *****************
  1007 ;; Defined at:
  1008 ;;		line 10 in file "PIC18F4331_Timer.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1022 ;;      Params:         0       0       0       0
  1023 ;;      Locals:         0       0       0       0
  1024 ;;      Temps:          4       0       0       0
  1025 ;;      Totals:         4       0       0       0
  1026 ;;Total ram usage:        4 bytes
  1027 ;; Hardware stack levels used: 1
  1028 ;; Hardware stack levels required when called: 2
  1029 ;; This function calls:
  1030 ;;		_OneSecond_Timer_Middleware
  1031 ;; This function is called by:
  1032 ;;		Interrupt level 2
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	intcode
  1037   000008                     __pintcode:
  1038                           	callstack 0
  1039   000008                     _timer_overflow_isr:
  1040                           	callstack 24
  1041                           
  1042                           ;incstack = 0
  1043   000008  8219               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1044   00000A  CFFA F004          	movff	pclath,??_timer_overflow_isr
  1045   00000E  CFFB F005          	movff	pclatu,??_timer_overflow_isr+1
  1046   000012  CFD9 F006          	movff	fsr2l,??_timer_overflow_isr+2
  1047   000016  CFDA F007          	movff	fsr2h,??_timer_overflow_isr+3
  1048   00001A                     
  1049                           ;PIC18F4331_Timer.c: 13:     INTCONbits.GIEH = 0;
  1050   00001A  9EF2               	bcf	242,7,c	;volatile
  1051                           
  1052                           ;PIC18F4331_Timer.c: 14:     INTCONbits.GIEL = 1;
  1053   00001C  8CF2               	bsf	242,6,c	;volatile
  1054   00001E                     
  1055                           ;PIC18F4331_Timer.c: 28:     if(TMR0L < (0x7C))
  1056   00001E  0E7C               	movlw	124
  1057   000020  60D6               	cpfslt	214,c	;volatile
  1058   000022  EF15  F000         	goto	i2u10_41
  1059   000026  EF17  F000         	goto	i2u10_40
  1060   00002A                     i2u10_41:
  1061   00002A  EF19  F000         	goto	i2l929
  1062   00002E                     i2u10_40:
  1063   00002E                     
  1064                           ;PIC18F4331_Timer.c: 29:     {;PIC18F4331_Timer.c: 30:         TMR0L = (0x7C);
  1065   00002E  0E7C               	movlw	124
  1066   000030  6ED6               	movwf	214,c	;volatile
  1067   000032                     i2l929:
  1068                           
  1069                           ;PIC18F4331_Timer.c: 32:     if(TMR0H < (0xE1))
  1070   000032  0EE1               	movlw	225
  1071   000034  60D7               	cpfslt	215,c	;volatile
  1072   000036  EF1F  F000         	goto	i2u11_41
  1073   00003A  EF21  F000         	goto	i2u11_40
  1074   00003E                     i2u11_41:
  1075   00003E  EF23  F000         	goto	i2l933
  1076   000042                     i2u11_40:
  1077   000042                     
  1078                           ;PIC18F4331_Timer.c: 33:     {;PIC18F4331_Timer.c: 34:         TMR0H = (0xE1);
  1079   000042  0EE1               	movlw	225
  1080   000044  6ED7               	movwf	215,c	;volatile
  1081   000046                     i2l933:
  1082                           
  1083                           ;PIC18F4331_Timer.c: 38:     if(INTCONbits.TMR0IF)
  1084   000046  A4F2               	btfss	242,2,c	;volatile
  1085   000048  EF28  F000         	goto	i2u12_41
  1086   00004C  EF2A  F000         	goto	i2u12_40
  1087   000050                     i2u12_41:
  1088   000050  EF2F  F000         	goto	i2l941
  1089   000054                     i2u12_40:
  1090   000054                     
  1091                           ;PIC18F4331_Timer.c: 39:     {;PIC18F4331_Timer.c: 41:         tmr0Counter++;
  1092   000054  4A14               	infsnz	_tmr0Counter^0,f,c	;volatile
  1093   000056  2A15               	incf	(_tmr0Counter+1)^0,f,c	;volatile
  1094   000058                     
  1095                           ;PIC18F4331_Timer.c: 44:         OneSecond_Timer_Middleware();
  1096   000058  EC12  F001         	call	_OneSecond_Timer_Middleware	;wreg free
  1097   00005C                     
  1098                           ;PIC18F4331_Timer.c: 47:         INTCONbits.TMR0IF = 0;
  1099   00005C  94F2               	bcf	242,2,c	;volatile
  1100   00005E                     i2l941:
  1101                           
  1102                           ;PIC18F4331_Timer.c: 51:     INTCONbits.GIEH = 1;
  1103   00005E  8EF2               	bsf	242,7,c	;volatile
  1104   000060                     
  1105                           ;PIC18F4331_Timer.c: 52:     INTCONbits.GIEL = 1;
  1106   000060  8CF2               	bsf	242,6,c	;volatile
  1107   000062  C007  FFDA         	movff	??_timer_overflow_isr+3,fsr2h
  1108   000066  C006  FFD9         	movff	??_timer_overflow_isr+2,fsr2l
  1109   00006A  C005  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  1110   00006E  C004  FFFA         	movff	??_timer_overflow_isr,pclath
  1111   000072  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1112   000074  0011               	retfie		f
  1113   000076                     __end_of_timer_overflow_isr:
  1114                           	callstack 0
  1115                           
  1116 ;; *************** function _OneSecond_Timer_Middleware *****************
  1117 ;; Defined at:
  1118 ;;		line 12 in file "SystemTimerMiddleware.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;		None
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1132 ;;      Params:         0       0       0       0
  1133 ;;      Locals:         0       0       0       0
  1134 ;;      Temps:          0       0       0       0
  1135 ;;      Totals:         0       0       0       0
  1136 ;;Total ram usage:        0 bytes
  1137 ;; Hardware stack levels used: 1
  1138 ;; Hardware stack levels required when called: 1
  1139 ;; This function calls:
  1140 ;;		Absolute function
  1141 ;;		_OneSecond_ExecutiveCallback
  1142 ;; This function is called by:
  1143 ;;		_timer_overflow_isr
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text15
  1148   000224                     __ptext15:
  1149                           	callstack 0
  1150   000224                     _OneSecond_Timer_Middleware:
  1151                           	callstack 24
  1152   000224                     
  1153                           ;SystemTimerMiddleware.c: 16:     CallbackExecutive();
  1154   000224  D802               	call	i2u8_48
  1155   000226  EF1F  F001         	goto	i2u8_49
  1156   00022A                     i2u8_48:
  1157   00022A  0005               	push	
  1158   00022C  6EFA               	movwf	pclath,c
  1159   00022E  5012               	movf	_CallbackExecutive^0,w,c
  1160   000230  6EFD               	movwf	tosl,c
  1161   000232  5013               	movf	(_CallbackExecutive+1)^0,w,c
  1162   000234  6EFE               	movwf	tosh,c
  1163   000236  50F8               	movf	tblptru,w,c
  1164   000238  6EFF               	movwf	tosu,c
  1165   00023A  50FA               	movf	pclath,w,c
  1166   00023C  0012               	return		;indir
  1167   00023E                     i2u8_49:
  1168   00023E  0012               	return		;funcret
  1169   000240                     __end_of_OneSecond_Timer_Middleware:
  1170                           	callstack 0
  1171                           
  1172 ;; *************** function _OneSecond_ExecutiveCallback *****************
  1173 ;; Defined at:
  1174 ;;		line 12 in file "SystemCallbacks.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;		None
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  callbacks       2    1[COMRAM] int 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1188 ;;      Params:         0       0       0       0
  1189 ;;      Locals:         2       0       0       0
  1190 ;;      Temps:          1       0       0       0
  1191 ;;      Totals:         3       0       0       0
  1192 ;;Total ram usage:        3 bytes
  1193 ;; Hardware stack levels used: 1
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_SystemCallbacks_Init
  1198 ;;		_OneSecond_Timer_Middleware
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text16
  1203   00015C                     __ptext16:
  1204                           	callstack 0
  1205   00015C                     _OneSecond_ExecutiveCallback:
  1206                           	callstack 24
  1207   00015C                     
  1208                           ;SystemCallbacks.c: 18:     system_count++;
  1209   00015C  4A0E               	infsnz	_system_count^0,f,c
  1210   00015E  2A0F               	incf	(_system_count+1)^0,f,c
  1211   000160                     
  1212                           ;SystemCallbacks.c: 19:     if(system_count == (600))
  1213   000160  0E58               	movlw	88
  1214   000162  180E               	xorwf	_system_count^0,w,c
  1215   000164  E107               	bnz	i2u6_41
  1216   000166  0E02               	movlw	2
  1217   000168  180F               	xorwf	(_system_count+1)^0,w,c
  1218   00016A  A4D8               	btfss	status,2,c
  1219   00016C  EFBA  F000         	goto	i2u6_41
  1220   000170  EFBC  F000         	goto	i2u6_40
  1221   000174                     i2u6_41:
  1222   000174  EFC0  F000         	goto	i2l139
  1223   000178                     i2u6_40:
  1224   000178                     
  1225                           ;SystemCallbacks.c: 20:     {;SystemCallbacks.c: 21:         system_count=0;
  1226   000178  0E00               	movlw	0
  1227   00017A  6E0F               	movwf	(_system_count+1)^0,c
  1228   00017C  0E00               	movlw	0
  1229   00017E  6E0E               	movwf	_system_count^0,c
  1230   000180                     i2l139:
  1231                           
  1232                           ;SystemCallbacks.c: 24:     for(int callbacks=0; callbacks<number_of_callbacks; callback
      +                          s++)
  1233   000180  0E00               	movlw	0
  1234   000182  6E03               	movwf	(OneSecond_ExecutiveCallback@callbacks+1)^0,c
  1235   000184  0E00               	movlw	0
  1236   000186  6E02               	movwf	OneSecond_ExecutiveCallback@callbacks^0,c
  1237   000188  EFC8  F000         	goto	i2l895
  1238   00018C                     i2l889:
  1239   00018C                     
  1240                           ;SystemCallbacks.c: 33:     }
  1241   00018C  4A02               	infsnz	OneSecond_ExecutiveCallback@callbacks^0,f,c
  1242   00018E  2A03               	incf	(OneSecond_ExecutiveCallback@callbacks+1)^0,f,c
  1243   000190                     i2l895:
  1244   000190  5010               	movf	_number_of_callbacks^0,w,c
  1245   000192  5C02               	subwf	OneSecond_ExecutiveCallback@callbacks^0,w,c
  1246   000194  5003               	movf	(OneSecond_ExecutiveCallback@callbacks+1)^0,w,c
  1247   000196  0A80               	xorlw	128
  1248   000198  6E01               	movwf	??_OneSecond_ExecutiveCallback^0,c
  1249   00019A  5011               	movf	(_number_of_callbacks+1)^0,w,c
  1250   00019C  0A80               	xorlw	128
  1251   00019E  5801               	subwfb	??_OneSecond_ExecutiveCallback^0,w,c
  1252   0001A0  A0D8               	btfss	status,0,c
  1253   0001A2  EFD5  F000         	goto	i2u7_41
  1254   0001A6  EFD7  F000         	goto	i2u7_40
  1255   0001AA                     i2u7_41:
  1256   0001AA  EFC6  F000         	goto	i2l889
  1257   0001AE                     i2u7_40:
  1258   0001AE  0012               	return		;funcret
  1259   0001B0                     __end_of_OneSecond_ExecutiveCallback:
  1260                           	callstack 0
  1261   000000                     
  1262                           	psect	text17
  1263   000000                     __ptext17:
  1264                           	callstack 0
  1265   000000                     
  1266                           	psect	rparam
  1267   000000                     
  1268                           	psect	temp
  1269   000019                     btemp:
  1270                           	callstack 0
  1271   000019                     	ds	1
  1272   000000                     int$flags	set	btemp
  1273   000000                     wtemp8	set	btemp+1
  1274   000000                     ttemp5	set	btemp+1
  1275   000000                     ttemp6	set	btemp+4
  1276   000000                     ttemp7	set	btemp+8
  1277                           
  1278                           	psect	idloc
  1279                           
  1280                           ;Config register IDLOC0 @ 0x200000
  1281                           ;	unspecified, using default values
  1282   200000                     	org	2097152
  1283   200000  FF                 	db	255
  1284                           
  1285                           ;Config register IDLOC1 @ 0x200001
  1286                           ;	unspecified, using default values
  1287   200001                     	org	2097153
  1288   200001  FF                 	db	255
  1289                           
  1290                           ;Config register IDLOC2 @ 0x200002
  1291                           ;	unspecified, using default values
  1292   200002                     	org	2097154
  1293   200002  FF                 	db	255
  1294                           
  1295                           ;Config register IDLOC3 @ 0x200003
  1296                           ;	unspecified, using default values
  1297   200003                     	org	2097155
  1298   200003  FF                 	db	255
  1299                           
  1300                           ;Config register IDLOC4 @ 0x200004
  1301                           ;	unspecified, using default values
  1302   200004                     	org	2097156
  1303   200004  FF                 	db	255
  1304                           
  1305                           ;Config register IDLOC5 @ 0x200005
  1306                           ;	unspecified, using default values
  1307   200005                     	org	2097157
  1308   200005  FF                 	db	255
  1309                           
  1310                           ;Config register IDLOC6 @ 0x200006
  1311                           ;	unspecified, using default values
  1312   200006                     	org	2097158
  1313   200006  FF                 	db	255
  1314                           
  1315                           ;Config register IDLOC7 @ 0x200007
  1316                           ;	unspecified, using default values
  1317   200007                     	org	2097159
  1318   200007  FF                 	db	255
  1319                           
  1320                           	psect	config
  1321                           
  1322                           ; Padding undefined space
  1323   300000                     	org	3145728
  1324   300000  FF                 	db	255
  1325                           
  1326                           ;Config register CONFIG1H @ 0x300001
  1327                           ;	Oscillator Selection bits
  1328                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  1329                           ;	Fail-Safe Clock Monitor Enable bit
  1330                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  1331                           ;	Internal External Oscillator Switchover bit
  1332                           ;	IESO = ON, Internal External Switchover mode enabled
  1333   300001                     	org	3145729
  1334   300001  C8                 	db	200
  1335                           
  1336                           ;Config register CONFIG2L @ 0x300002
  1337                           ;	Power-up Timer Enable bit
  1338                           ;	PWRTEN = OFF, PWRT disabled
  1339                           ;	Brown-out Reset Enable bits
  1340                           ;	BOREN = ON, Brown-out Reset enabled
  1341                           ;	Brown Out Reset Voltage bits
  1342                           ;	BORV = 0x3, unprogrammed default
  1343   300002                     	org	3145730
  1344   300002  0F                 	db	15
  1345                           
  1346                           ;Config register CONFIG2H @ 0x300003
  1347                           ;	Watchdog Timer Enable bit
  1348                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1349                           ;	Watchdog Timer Postscale Select bits
  1350                           ;	WDPS = 32768, 1:32768
  1351                           ;	Watchdog Timer Window Enable bit
  1352                           ;	WINEN = OFF, WDT window disabled
  1353   300003                     	org	3145731
  1354   300003  3E                 	db	62
  1355                           
  1356                           ;Config register CONFIG3L @ 0x300004
  1357                           ;	PWM output pins Reset state control
  1358                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  1359                           ;	Low-Side Transistors Polarity
  1360                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  1361                           ;	High-Side Transistors Polarity
  1362                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  1363                           ;	Timer1 Oscillator MUX
  1364                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  1365   300004                     	org	3145732
  1366   300004  3C                 	db	60
  1367                           
  1368                           ;Config register CONFIG3H @ 0x300005
  1369                           ;	FLTA MUX bit
  1370                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  1371                           ;	SSP I/O MUX bit
  1372                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  1373                           ;	PWM4 MUX bit
  1374                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  1375                           ;	TMR0/T5CKI External clock MUX bit
  1376                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  1377                           ;	MCLR Pin Enable bit
  1378                           ;	MCLRE = ON, Enabled
  1379   300005                     	org	3145733
  1380   300005  9D                 	db	157
  1381                           
  1382                           ;Config register CONFIG4L @ 0x300006
  1383                           ;	Stack Full/Underflow Reset Enable bit
  1384                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1385                           ;	Low-Voltage ICSP Enable bit
  1386                           ;	LVP = ON, Low-voltage ICSP enabled
  1387                           ;	Background Debugger Enable bit
  1388                           ;	DEBUG = 0x1, unprogrammed default
  1389   300006                     	org	3145734
  1390   300006  85                 	db	133
  1391                           
  1392                           ; Padding undefined space
  1393   300007                     	org	3145735
  1394   300007  FF                 	db	255
  1395                           
  1396                           ;Config register CONFIG5L @ 0x300008
  1397                           ;	Code Protection bit
  1398                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  1399                           ;	Code Protection bit
  1400                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  1401   300008                     	org	3145736
  1402   300008  0F                 	db	15
  1403                           
  1404                           ;Config register CONFIG5H @ 0x300009
  1405                           ;	Boot Block Code Protection bit
  1406                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  1407                           ;	Data EEPROM Code Protection bit
  1408                           ;	CPD = OFF, Data EEPROM not code-protected
  1409   300009                     	org	3145737
  1410   300009  C0                 	db	192
  1411                           
  1412                           ;Config register CONFIG6L @ 0x30000A
  1413                           ;	Write Protection bit
  1414                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  1415                           ;	Write Protection bit
  1416                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  1417   30000A                     	org	3145738
  1418   30000A  0F                 	db	15
  1419                           
  1420                           ;Config register CONFIG6H @ 0x30000B
  1421                           ;	Configuration Register Write Protection bit
  1422                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1423                           ;	Boot Block Write Protection bit
  1424                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  1425                           ;	Data EEPROM Write Protection bit
  1426                           ;	WRTD = OFF, Data EEPROM not write-protected
  1427   30000B                     	org	3145739
  1428   30000B  E0                 	db	224
  1429                           
  1430                           ;Config register CONFIG7L @ 0x30000C
  1431                           ;	Table Read Protection bit
  1432                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  1433                           ;	Table Read Protection bit
  1434                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  1435   30000C                     	org	3145740
  1436   30000C  0F                 	db	15
  1437                           
  1438                           ;Config register CONFIG7H @ 0x30000D
  1439                           ;	Boot Block Table Read Protection bit
  1440                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  1441   30000D                     	org	3145741
  1442   30000D  40                 	db	64
  1443                           tosu	equ	0xFFF
  1444                           tosh	equ	0xFFE
  1445                           tosl	equ	0xFFD
  1446                           stkptr	equ	0xFFC
  1447                           pclatu	equ	0xFFB
  1448                           pclath	equ	0xFFA
  1449                           pcl	equ	0xFF9
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodh	equ	0xFF4
  1455                           prodl	equ	0xFF3
  1456                           indf0	equ	0xFEF
  1457                           postinc0	equ	0xFEE
  1458                           postdec0	equ	0xFED
  1459                           preinc0	equ	0xFEC
  1460                           plusw0	equ	0xFEB
  1461                           fsr0h	equ	0xFEA
  1462                           fsr0l	equ	0xFE9
  1463                           wreg	equ	0xFE8
  1464                           indf1	equ	0xFE7
  1465                           postinc1	equ	0xFE6
  1466                           postdec1	equ	0xFE5
  1467                           preinc1	equ	0xFE4
  1468                           plusw1	equ	0xFE3
  1469                           fsr1h	equ	0xFE2
  1470                           fsr1l	equ	0xFE1
  1471                           bsr	equ	0xFE0
  1472                           indf2	equ	0xFDF
  1473                           postinc2	equ	0xFDE
  1474                           postdec2	equ	0xFDD
  1475                           preinc2	equ	0xFDC
  1476                           plusw2	equ	0xFDB
  1477                           fsr2h	equ	0xFDA
  1478                           fsr2l	equ	0xFD9
  1479                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         410
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     13      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 0

    S475$callback	PTR FTN()void  size(2) Largest target is 0

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 0

    TimerMiddleware_Init@callback_executive	PTR FTN()void  size(2) Largest target is 1
		 -> OneSecond_ExecutiveCallback(), 

    CallbackExecutive	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), OneSecond_ExecutiveCallback(), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_SMS_read_and_set_state
    _SystemCallbacks_Init->_TimerMiddleware_Init
    _SMS_read_and_set_state->_ADC_Read

Critical Paths under _timer_overflow_isr in COMRAM

    _OneSecond_Timer_Middleware->_OneSecond_ExecutiveCallback

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     210
                          _FSM_begin
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                            2     2      0     195
                                             11 COMRAM     2     2      0
                           _SMS_init
             _SMS_read_and_set_state
               _SystemCallbacks_Init
                        _Timer0_init
                  _get_current_state
                          _set_state
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SystemCallbacks_Init                                 0     0      0      98
               _TimerMiddleware_Init
 ---------------------------------------------------------------------------------
 (3) _TimerMiddleware_Init                                 2     0      2      98
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _SMS_read_and_set_state                               2     2      0      82
                                              9 COMRAM     2     2      0
                           _ADC_Read
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                              7 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   4     4      0      45
                                              3 COMRAM     4     4      0
         _OneSecond_Timer_Middleware
 ---------------------------------------------------------------------------------
 (6) _OneSecond_Timer_Middleware                           0     0      0      45
                   Absolute function *
        _OneSecond_ExecutiveCallback *
 ---------------------------------------------------------------------------------
 (7) _OneSecond_ExecutiveCallback                          3     3      0      45
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _SMS_init
       _ADC_init
         _ADC_stop
     _SMS_read_and_set_state
       _ADC_Read
         _ADC_in_progress
         _ADC_start
       _set_state
     _SystemCallbacks_Init
       _TimerMiddleware_Init
     _Timer0_init
     _get_current_state
     _set_state
   _set_state

 _timer_overflow_isr (ROOT)
   _OneSecond_Timer_Middleware
     Absolute function(Fake) *
     _OneSecond_ExecutiveCallback *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0     190      16       52.2%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      D      18       1       25.5%
BITBIGSFRll         39      0       0      14        0.0%
BITBIGSFRlhl        1E      0       0      13        0.0%
BITBIGSFRhhlh       1A      0       0      10        0.0%
BITBIGSFRhhll       10      0       0      11        0.0%
BITBIGSFRhhh         D      0       0       9        0.0%
BITBIGSFRlhh         7      0       0      12        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      15        0.0%
DATA                 0      0     1A8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Mar 14 17:52:35 2023

                 ?_TimerMiddleware_Init 0008                                      l22 02A2  
                                    l25 0222                                      l33 01F6  
                                    l34 0206                                      l19 0294  
                                    l28 0252                                      l72 025E  
                                    l81 029A                                      l57 026E  
                                    l92 029E                                      l95 028E  
                                    l87 015A                                      u10 0250  
                                    u11 024A                                      u16 0252  
                                   l120 00FA                                     l125 0286  
                                   l148 027C                                     _ADC 0016  
                                   l831 0240                                     l841 0212  
                                   l851 0220                                     l843 0214  
                                   l835 0208                                     l827 0290  
                                   l829 02A0                                     l845 0216  
                                   l837 020C                                     l861 0262  
                                   l847 021A                                     l839 0210  
                                   l863 0296                                     l849 021C  
                                   l857 028A                                     l963 01DE  
                                   l971 0108                                     l965 01E2  
                                   l973 011E                                     l981 0270  
                                   l877 029C                                     l975 0128  
                                   l967 027E                                     l991 008A  
                                   l983 007A                                     l977 013E  
                                   l969 00FC                                     l993 0094  
                                   l985 007E                                     l979 0154  
                                   l995 00AC                                     l987 0082  
                                   l997 00B4                                     l989 0086  
                                   u130 01F6                                     u131 01F2  
                                   u140 011E                                     u141 011A  
                                   u150 013E                                     u151 013A  
                                   u160 0154                                     u161 0150  
                                   u170 00A8                                     u171 00A4  
                                   tosl 000FFD                                     wreg 000FE8  
                                  l1001 00BE                                    l1007 0254  
                                  l1017 00D4                                    l1009 025A  
                                  i2l54 0062                                    _main 0254  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  fsr1l 000FE1                                    fsr2l 000FD9  
                                  btemp 0019                        __end_of_ADC_Read 0208  
                                  start 0076                        __end_of_ADC_init 0224  
                      __end_of_ADC_stop 02A4                            ___param_bank 000000  
                   _number_of_callbacks 0010                                   ?_main 0001  
                                 i2l128 023E                                   i2l145 01AE  
                                 i2l139 0180                                   i2l931 0042  
                                 i2l923 001A                                   i2l941 005E  
                                 i2l933 0046                                   i2l925 001E  
                                 i2l943 0060                                   i2l935 0054  
                                 i2l927 002E                                   i2l937 0058  
                                 i2l929 0032                                   i2l883 015C  
                                 i2l939 005C                                   i2l893 018C  
                                 i2l885 0160                                   i2l895 0190  
                                 i2l887 0178                                   i2l889 018C  
                                 i2l897 0224                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                       _CallbackExecutive 0012  
                                 pclath 000FFA                                   pclatu 000FFB  
                      __end_of_SMS_init 029C     __end_of_OneSecond_ExecutiveCallback 01B0  
           _OneSecond_ExecutiveCallback 015C                                   ttemp5 001A  
                                 ttemp6 001D                                   ttemp7 0021  
                                 status 000FD8                                   wtemp8 001A  
          __end_of_SystemCallbacks_Init 027E                       __end_of_ADC_start 0296  
                ??_TimerMiddleware_Init 000A                         __initialization 01B0  
                          __end_of_main 0262            ??_OneSecond_Timer_Middleware 0004  
                                ??_main 000E                           __activetblptr 000002  
                                _ADRESH 000FC4                                  _ADRESL 000FC3  
                     __end_of_FSM_begin 00FC                                  i2u6_40 0178  
                                i2u6_41 0174                                  i2u7_40 01AE  
                                i2u7_41 01AA                                  i2u8_48 022A  
                                i2u8_49 023E                           ??_Timer0_init 0008  
        SMS_read_and_set_state@moisture 000A                                  clear_0 01B8  
                                clear_1 01CA                                  isa$std 000001  
                  _registered_callbacks 0170                               ?_ADC_Read 0008  
                                tblptru 000FF8                               ?_ADC_init 0001  
                             ?_ADC_stop 0001                              __accesstop 0060  
               __end_of__initialization 01D0                           ___rparam_used 000001  
                        __pcstackCOMRAM 0001                            _system_count 000E  
                   __end_of_Timer0_init 0270              __end_of_timer_overflow_isr 0076  
                             ?_SMS_init 0001                    _SystemCallbacks_Init 0270  
                            ??_ADC_Read 000A                              ??_ADC_init 0008  
                            ??_ADC_stop 0008                              __pnvCOMRAM 0018  
    __end_of_OneSecond_Timer_Middleware 0240              _OneSecond_Timer_Middleware 0224  
                 ?_SystemCallbacks_Init 0001                              ??_SMS_init 0008  
                     ??_ADC_in_progress 0008                                 i2u10_40 002E  
                               i2u10_41 002A                                 i2u11_40 0042  
                               i2u11_41 003E                                 i2u12_40 0054  
                               i2u12_41 0050                               _ADCHSbits 000F99  
                               __Hparam 0000                                 __Lparam 0000  
                           _Timer0_init 0262                               _ADC_start 0290  
                               __pcinit 01B0                                 __ramtop 0300  
                               __ptext0 0254                                 __ptext1 007A  
                               __ptext2 029C                                 __ptext3 0262  
                               __ptext4 0270                                 __ptext5 027E  
                               __ptext6 00FC                                 __ptext7 0288  
                               __ptext8 01DE                                 __ptext9 0290  
                             _T0CONbits 000FD5                ??_SMS_read_and_set_state 000A  
                  end_of_initialization 01D0                           __Lmediumconst 0000  
                     __end_of_set_state 0290                               _FSM_begin 007A  
                             _FSM_state 0018                              ?_ADC_start 0001  
                               postdec1 000FE5                                 postinc0 000FEE  
TimerMiddleware_Init@callback_executive 0008    OneSecond_ExecutiveCallback@callbacks 0002  
                ??_SystemCallbacks_Init 000A                              ?_FSM_begin 0001  
                   start_initialization 01B0                      _timer_overflow_isr 0008  
                   ?_timer_overflow_isr 0001                             ??_ADC_start 0008  
           ?_OneSecond_Timer_Middleware 0001                         _ADC_in_progress 0240  
                           __pbssBIGRAM 0170                             __pbssCOMRAM 000E  
                  ??_timer_overflow_isr 0004            ?_OneSecond_ExecutiveCallback 0001  
                _SMS_read_and_set_state 00FC                             ??_FSM_begin 000C  
                          ?_Timer0_init 0001                               __pintcode 0008  
                              _ADC_Read 01DE                                _ADC_init 0208  
                              _ADC_stop 02A0                 __end_of_ADC_in_progress 0254  
         ??_OneSecond_ExecutiveCallback 0001                               _set_state 0288  
                            _ADCON0bits 000FC2                              _ADCON1bits 000FC1  
                            _ADCON2bits 000FC0                                _SMS_init 0296  
          __end_of_TimerMiddleware_Init 0288                                __Hrparam 0000  
                              __Lrparam 0000                              ?_set_state 0001  
                            _ANSEL0bits 000FB8                                __ptext10 0240  
                              __ptext11 0296                                __ptext12 0208  
                              __ptext13 02A0                                __ptext15 0224  
                              __ptext16 015C                                __ptext17 0000  
                      ?_ADC_in_progress 0001                                isa$xinst 000000  
                     _get_current_state 029C                                int$flags 0019  
                           _tmr0Counter 0014                      ?_get_current_state 0001  
                   ??_get_current_state 0008                              _INTCONbits 000FF2  
               ?_SMS_read_and_set_state 0001                                intlevel2 0000  
             __end_of_get_current_state 02A0                             ??_set_state 0008  
                  _TimerMiddleware_Init 027E          fp__OneSecond_ExecutiveCallback 0000  
                 set_state@state_to_set 0008          __end_of_SMS_read_and_set_state 015C  
