

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Mar 27 13:45:38 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4331
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    53                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    54   000000                     
    55                           ; Version 2.40
    56                           ; Generated 17/11/2021 GMT
    57                           ; 
    58                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    59                           ; All rights reserved.
    60                           ; 
    61                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    62                           ; 
    63                           ; Redistribution and use in source and binary forms, with or without modification, are
    64                           ; permitted provided that the following conditions are met:
    65                           ; 
    66                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    67                           ;        conditions and the following disclaimer.
    68                           ; 
    69                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    70                           ;        of conditions and the following disclaimer in the documentation and/or other
    71                           ;        materials provided with the distribution. Publication is not required when
    72                           ;        this file is used in an embedded application.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F4331 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90   000000                     
    91                           	psect	idataCOMRAM
    92   000A78                     __pidataCOMRAM:
    93                           	callstack 0
    94                           
    95                           ;initializer for FSM_begin@F2880
    96   000A78  0005               	dw	5
    97   000A7A  EE                 	db	low _Watering_Done_cb
    98   000A7B  09                 	db	high _Watering_Done_cb
    99   000A7C  00                 	db	0
   100   000A7D  00                 	db	0
   101   000A7E  00                 	db	0
   102   000A7F  00                 	db	0
   103                           
   104                           ;initializer for FSM_begin@F2877
   105   000A80  000A               	dw	10
   106   000A82  D2                 	db	low _Check_Moisture_cb
   107   000A83  09                 	db	high _Check_Moisture_cb
   108   000A84  00                 	db	0
   109   000A85  00                 	db	0
   110   000A86  00                 	db	0
   111   000A87  00                 	db	0
   112   000000                     _ADRESL	set	4035
   113   000000                     _ADRESH	set	4036
   114                           
   115                           	psect	nvCOMRAM
   116   000044                     __pnvCOMRAM:
   117                           	callstack 0
   118   000044                     _FSM_state:
   119                           	callstack 0
   120   000044                     	ds	1
   121   000000                     _TRISBbits	set	3987
   122   000000                     _PORTBbits	set	3969
   123   000000                     _LATC	set	3979
   124   000000                     _TRISC	set	3988
   125   000000                     _ADCHSbits	set	3993
   126   000000                     _ADCON1bits	set	4033
   127   000000                     _ADCON0bits	set	4034
   128   000000                     _ANSEL0bits	set	4024
   129   000000                     _ADCON2bits	set	4032
   130   000000                     _RCONbits	set	4048
   131   000000                     _OSCCONbits	set	4051
   132   000000                     _T0CONbits	set	4053
   133   000000                     _INTCON2bits	set	4081
   134   000000                     _INTCONbits	set	4082
   135   000000                     _TMR0H	set	4055
   136   000000                     _TMR0L	set	4054
   137   000000                     _TRISD	set	3989
   138   000000                     _TRISB	set	3987
   139   000000                     _LATD	set	3980
   140                           
   141                           	psect	smallconst
   142   000300                     __psmallconst:
   143                           	callstack 0
   144   000300  00                 	db	0
   145   000301                     STR_4:
   146   000301  20                 	db	32
   147   000302  3E                 	db	62	;'>'
   148   000303  57                 	db	87	;'W'
   149   000304  41                 	db	65	;'A'
   150   000305  54                 	db	84	;'T'
   151   000306  45                 	db	69	;'E'
   152   000307  52                 	db	82	;'R'
   153   000308  49                 	db	73	;'I'
   154   000309  4E                 	db	78	;'N'
   155   00030A  47                 	db	71	;'G'
   156   00030B  20                 	db	32
   157   00030C  50                 	db	80	;'P'
   158   00030D  4C                 	db	76	;'L'
   159   00030E  41                 	db	65	;'A'
   160   00030F  4E                 	db	78	;'N'
   161   000310  54                 	db	84	;'T'
   162   000311  53                 	db	83	;'S'
   163   000312  3C                 	db	60	;'<'
   164   000313  00                 	db	0
   165   000314  00                 	db	0
   166   000315                     STR_2:
   167   000315  53                 	db	83	;'S'
   168   000316  79                 	db	121	;'y'
   169   000317  73                 	db	115	;'s'
   170   000318  74                 	db	116	;'t'
   171   000319  65                 	db	101	;'e'
   172   00031A  6D                 	db	109	;'m'
   173   00031B  20                 	db	32
   174   00031C  49                 	db	73	;'I'
   175   00031D  6E                 	db	110	;'n'
   176   00031E  69                 	db	105	;'i'
   177   00031F  74                 	db	116	;'t'
   178   000320  69                 	db	105	;'i'
   179   000321  61                 	db	97	;'a'
   180   000322  6C                 	db	108	;'l'
   181   000323  2E                 	db	46
   182   000324  2E                 	db	46
   183   000325  2E                 	db	46
   184   000326  00                 	db	0
   185   000327  00                 	db	0
   186   000328                     STR_5:
   187   000328  20                 	db	32
   188   000329  3E                 	db	62	;'>'
   189   00032A  43                 	db	67	;'C'
   190   00032B  48                 	db	72	;'H'
   191   00032C  45                 	db	69	;'E'
   192   00032D  43                 	db	67	;'C'
   193   00032E  4B                 	db	75	;'K'
   194   00032F  49                 	db	73	;'I'
   195   000330  4E                 	db	78	;'N'
   196   000331  47                 	db	71	;'G'
   197   000332  20                 	db	32
   198   000333  4D                 	db	77	;'M'
   199   000334  4F                 	db	79	;'O'
   200   000335  49                 	db	73	;'I'
   201   000336  53                 	db	83	;'S'
   202   000337  54                 	db	84	;'T'
   203   000338  3C                 	db	60	;'<'
   204   000339  00                 	db	0
   205   00033A  00                 	db	0
   206   00033B                     STR_1:
   207   00033B  20                 	db	32
   208   00033C  50                 	db	80	;'P'
   209   00033D  6C                 	db	108	;'l'
   210   00033E  61                 	db	97	;'a'
   211   00033F  6E                 	db	110	;'n'
   212   000340  74                 	db	116	;'t'
   213   000341  20                 	db	32
   214   000342  57                 	db	87	;'W'
   215   000343  61                 	db	97	;'a'
   216   000344  74                 	db	116	;'t'
   217   000345  65                 	db	101	;'e'
   218   000346  72                 	db	114	;'r'
   219   000347  69                 	db	105	;'i'
   220   000348  6E                 	db	110	;'n'
   221   000349  67                 	db	103	;'g'
   222   00034A  00                 	db	0
   223   00034B  00                 	db	0
   224   00034C                     STR_3:
   225   00034C  20                 	db	32
   226   00034D  3E                 	db	62	;'>'
   227   00034E  49                 	db	73	;'I'
   228   00034F  44                 	db	68	;'D'
   229   000350  4C                 	db	76	;'L'
   230   000351  45                 	db	69	;'E'
   231   000352  20                 	db	32
   232   000353  53                 	db	83	;'S'
   233   000354  54                 	db	84	;'T'
   234   000355  41                 	db	65	;'A'
   235   000356  54                 	db	84	;'T'
   236   000357  45                 	db	69	;'E'
   237   000358  3C                 	db	60	;'<'
   238   000359  00                 	db	0
   239   00035A  00                 	db	0
   240   00035B  00                 	db	0	; dummy byte at the end
   241   000000                     
   242                           ; #config settings
   243                           
   244                           	psect	cinit
   245   0008EC                     __pcinit:
   246                           	callstack 0
   247   0008EC                     start_initialization:
   248                           	callstack 0
   249   0008EC                     __initialization:
   250                           	callstack 0
   251                           
   252                           ; Initialize objects allocated to COMRAM (16 bytes)
   253                           ; load TBLPTR registers with __pidataCOMRAM
   254   0008EC  0E78               	movlw	low __pidataCOMRAM
   255   0008EE  6EF6               	movwf	tblptrl,c
   256   0008F0  0E0A               	movlw	high __pidataCOMRAM
   257   0008F2  6EF7               	movwf	tblptrh,c
   258   0008F4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   259   0008F6  6EF8               	movwf	tblptru,c
   260   0008F8  EE00  F02D         	lfsr	0,__pdataCOMRAM
   261   0008FC  EE10 F010          	lfsr	1,16
   262   000900                     copy_data0:
   263   000900  0009               	tblrd		*+
   264   000902  CFF5 FFEE          	movff	tablat,postinc0
   265   000906  50E5               	movf	postdec1,w,c
   266   000908  50E1               	movf	fsr1l,w,c
   267   00090A  E1FA               	bnz	copy_data0
   268                           
   269                           ; Clear objects allocated to BANK0 (40 bytes)
   270   00090C  EE00  F060         	lfsr	0,__pbssBANK0
   271   000910  0E28               	movlw	40
   272   000912                     clear_0:
   273   000912  6AEE               	clrf	postinc0,c
   274   000914  06E8               	decf	wreg,f,c
   275   000916  E1FD               	bnz	clear_0
   276                           
   277                           ; Clear objects allocated to COMRAM (7 bytes)
   278   000918  EE00  F03D         	lfsr	0,__pbssCOMRAM
   279   00091C  0E07               	movlw	7
   280   00091E                     clear_1:
   281   00091E  6AEE               	clrf	postinc0,c
   282   000920  06E8               	decf	wreg,f,c
   283   000922  E1FD               	bnz	clear_1
   284   000924                     end_of_initialization:
   285                           	callstack 0
   286   000924                     __end_of__initialization:
   287                           	callstack 0
   288   000924  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   289   000926  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   290   000928  0E00               	movlw	low (__Lmediumconst shr (0+16))
   291   00092A  6EF8               	movwf	tblptru,c
   292   00092C  0100               	movlb	0
   293   00092E  EFB1  F004         	goto	_main	;jump to C main() function
   294                           
   295                           	psect	bssCOMRAM
   296   00003D                     __pbssCOMRAM:
   297                           	callstack 0
   298   00003D                     _tmr0Counter@SystemInterrupts$F810:
   299                           	callstack 0
   300   00003D                     	ds	2
   301   00003F                     _tmr0Counter:
   302                           	callstack 0
   303   00003F                     	ds	2
   304   000041                     _ADC:
   305                           	callstack 0
   306   000041                     	ds	2
   307   000043                     _callback_count:
   308                           	callstack 0
   309   000043                     	ds	1
   310                           
   311                           	psect	dataCOMRAM
   312   00002D                     __pdataCOMRAM:
   313                           	callstack 0
   314   00002D                     FSM_begin@F2880:
   315                           	callstack 0
   316   00002D                     	ds	8
   317   000035                     FSM_begin@F2877:
   318                           	callstack 0
   319   000035                     	ds	8
   320                           
   321                           	psect	bssBANK0
   322   000060                     __pbssBANK0:
   323                           	callstack 0
   324   000060                     _registered_callbacks:
   325                           	callstack 0
   326   000060                     	ds	40
   327                           
   328                           	psect	cstackCOMRAM
   329   000001                     __pcstackCOMRAM:
   330                           	callstack 0
   331   000001                     i2set_state@state_to_set:
   332                           	callstack 0
   333                           
   334                           ; 1 bytes @ 0x0
   335   000001                     	ds	1
   336   000002                     
   337                           ; 1 bytes @ 0x1
   338   000002                     	ds	4
   339   000006                     Callbacks_Manager@callbacks:
   340                           	callstack 0
   341                           
   342                           ; 1 bytes @ 0x5
   343   000006                     	ds	1
   344   000007                     ??_timer_overflow_isr:
   345                           
   346                           ; 1 bytes @ 0x6
   347   000007                     	ds	8
   348   00000F                     ??_init_leds:
   349   00000F                     ?_ADC_Read:
   350                           	callstack 0
   351   00000F                     set_state@state_to_set:
   352                           	callstack 0
   353   00000F                     Callbacks_Init@callback:
   354                           	callstack 0
   355   00000F                     LCD_DATA@Data:
   356                           	callstack 0
   357   00000F                     Reset_Counter@config:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0xE
   361   00000F                     	ds	1
   362   000010                     LCD_CMD@CMD:
   363                           	callstack 0
   364   000010                     LCD_Write_Char@Low4:
   365                           	callstack 0
   366   000010                     SMS_Set_State@moisture:
   367                           	callstack 0
   368                           
   369                           ; 2 bytes @ 0xF
   370   000010                     	ds	1
   371   000011                     ??_LCD_Init:
   372   000011                     ?_SMS_Read_Moisture_Value:
   373                           	callstack 0
   374   000011                     LCD_Set_Cursor@c:
   375                           	callstack 0
   376   000011                     LCD_Write_Char@High4:
   377                           	callstack 0
   378   000011                     Register_Callback@config:
   379                           	callstack 0
   380                           
   381                           ; 2 bytes @ 0x10
   382   000011                     	ds	1
   383   000012                     LCD_Set_Cursor@r:
   384                           	callstack 0
   385   000012                     LCD_Write_Char@Data:
   386                           	callstack 0
   387                           
   388                           ; 1 bytes @ 0x11
   389   000012                     	ds	1
   390   000013                     LCD_Set_Cursor@Low4:
   391                           	callstack 0
   392   000013                     SMS_Read_Moisture_Value@moisture:
   393                           	callstack 0
   394   000013                     LCD_Write_String@str:
   395                           	callstack 0
   396                           
   397                           ; 2 bytes @ 0x12
   398   000013                     	ds	1
   399   000014                     LCD_Set_Cursor@High4:
   400                           	callstack 0
   401                           
   402                           ; 1 bytes @ 0x13
   403   000014                     	ds	1
   404   000015                     ??_LCD_Write_String:
   405   000015                     LCD_Set_Cursor@Temp:
   406                           	callstack 0
   407                           
   408                           ; 1 bytes @ 0x14
   409   000015                     	ds	2
   410   000017                     LCD_Write_String@i:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x16
   414   000017                     	ds	2
   415   000019                     ??_FSM_begin:
   416                           
   417                           ; 1 bytes @ 0x18
   418   000019                     	ds	2
   419   00001B                     FSM_begin@MoistureCB_Config:
   420                           	callstack 0
   421                           
   422                           ; 8 bytes @ 0x1A
   423   00001B                     	ds	8
   424   000023                     FSM_begin@WateringDoneCB_Config:
   425                           	callstack 0
   426                           
   427                           ; 8 bytes @ 0x22
   428   000023                     	ds	8
   429   00002B                     FSM_begin@moisture:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x2A
   433   00002B                     	ds	2
   434   00002D                     
   435                           ; 1 bytes @ 0x2C
   436 ;;
   437 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   438 ;;
   439 ;; *************** function _main *****************
   440 ;; Defined at:
   441 ;;		line 16 in file "main.c"
   442 ;; Parameters:    Size  Location     Type
   443 ;;		None
   444 ;; Auto vars:     Size  Location     Type
   445 ;;		None
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   455 ;;      Params:         0       0       0       0
   456 ;;      Locals:         0       0       0       0
   457 ;;      Temps:          0       0       0       0
   458 ;;      Totals:         0       0       0       0
   459 ;;Total ram usage:        0 bytes
   460 ;; Hardware stack levels required when called: 8
   461 ;; This function calls:
   462 ;;		_FSM_begin
   463 ;;		_Timer0_init
   464 ;;		_Timer0_stop
   465 ;;		_set_state
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text0
   472   000962                     __ptext0:
   473                           	callstack 0
   474   000962                     _main:
   475                           	callstack 23
   476   000962                     
   477                           ;main.c: 19:     OSCCONbits.IRCF0 = 1;
   478   000962  88D3               	bsf	211,4,c	;volatile
   479                           
   480                           ;main.c: 20:     OSCCONbits.IRCF1 = 1;
   481   000964  8AD3               	bsf	211,5,c	;volatile
   482                           
   483                           ;main.c: 21:     OSCCONbits.IRCF2 = 1;
   484   000966  8CD3               	bsf	211,6,c	;volatile
   485   000968                     
   486                           ;main.c: 24:     Timer0_stop();
   487   000968  EC68  F005         	call	_Timer0_stop	;wreg free
   488   00096C                     
   489                           ;main.c: 27:     RCONbits.IPEN = 1;
   490   00096C  8ED0               	bsf	208,7,c	;volatile
   491   00096E                     
   492                           ;main.c: 30:     INTCONbits.TMR0IE = 1;
   493   00096E  8AF2               	bsf	242,5,c	;volatile
   494   000970                     
   495                           ;main.c: 33:     INTCON2bits.TMR0IP = 1;
   496   000970  84F1               	bsf	241,2,c	;volatile
   497   000972                     
   498                           ;main.c: 36:     Timer0_init();
   499   000972  EC11  F005         	call	_Timer0_init	;wreg free
   500   000976                     
   501                           ;main.c: 39:     INTCONbits.GIEH = 1;
   502   000976  8EF2               	bsf	242,7,c	;volatile
   503   000978                     
   504                           ;main.c: 40:     INTCONbits.GIEL = 1;
   505   000978  8CF2               	bsf	242,6,c	;volatile
   506   00097A                     
   507                           ;main.c: 45:     set_state(INIT_STATE);
   508   00097A  0E00               	movlw	0
   509   00097C  EC5A  F005         	call	_set_state
   510   000980                     l1543:
   511                           
   512                           ;main.c: 47:     {;main.c: 48:      FSM_begin();
   513   000980  ECAE  F001         	call	_FSM_begin	;wreg free
   514   000984  EFC0  F004         	goto	l1543
   515   000988  EF49  F000         	goto	start
   516   00098C                     __end_of_main:
   517                           	callstack 0
   518                           
   519 ;; *************** function _Timer0_stop *****************
   520 ;; Defined at:
   521 ;;		line 92 in file "PIC18F4331_Timer.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		None
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   535 ;;      Params:         0       0       0       0
   536 ;;      Locals:         0       0       0       0
   537 ;;      Temps:          0       0       0       0
   538 ;;      Totals:         0       0       0       0
   539 ;;Total ram usage:        0 bytes
   540 ;; Hardware stack levels used: 1
   541 ;; Hardware stack levels required when called: 4
   542 ;; This function calls:
   543 ;;		Nothing
   544 ;; This function is called by:
   545 ;;		_main
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           	psect	text1
   550   000AD0                     __ptext1:
   551                           	callstack 0
   552   000AD0                     _Timer0_stop:
   553                           	callstack 26
   554   000AD0                     
   555                           ;PIC18F4331_Timer.c: 94:     T0CONbits.TMR0ON = 0;
   556   000AD0  9ED5               	bcf	213,7,c	;volatile
   557   000AD2  0012               	return		;funcret
   558   000AD4                     __end_of_Timer0_stop:
   559                           	callstack 0
   560                           
   561 ;; *************** function _Timer0_init *****************
   562 ;; Defined at:
   563 ;;		line 56 in file "PIC18F4331_Timer.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, status,2
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   577 ;;      Params:         0       0       0       0
   578 ;;      Locals:         0       0       0       0
   579 ;;      Temps:          0       0       0       0
   580 ;;      Totals:         0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used: 1
   583 ;; Hardware stack levels required when called: 4
   584 ;; This function calls:
   585 ;;		Nothing
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text2
   592   000A22                     __ptext2:
   593                           	callstack 0
   594   000A22                     _Timer0_init:
   595                           	callstack 26
   596   000A22                     
   597                           ;PIC18F4331_Timer.c: 67:     T0CONbits.T0PS0 = 1;
   598   000A22  80D5               	bsf	213,0,c	;volatile
   599                           
   600                           ;PIC18F4331_Timer.c: 68:     T0CONbits.T0PS1 = 0;
   601   000A24  92D5               	bcf	213,1,c	;volatile
   602                           
   603                           ;PIC18F4331_Timer.c: 69:     T0CONbits.T0PS2 = 1;
   604   000A26  84D5               	bsf	213,2,c	;volatile
   605                           
   606                           ;PIC18F4331_Timer.c: 72:     T0CONbits.PSA = 0;
   607   000A28  96D5               	bcf	213,3,c	;volatile
   608                           
   609                           ;PIC18F4331_Timer.c: 75:     T0CONbits.T0CS = 0;
   610   000A2A  9AD5               	bcf	213,5,c	;volatile
   611                           
   612                           ;PIC18F4331_Timer.c: 78:     T0CONbits.T016BIT = 0;
   613   000A2C  9CD5               	bcf	213,6,c	;volatile
   614   000A2E                     
   615                           ;PIC18F4331_Timer.c: 80:     TMR0L = (0x7C);
   616   000A2E  0E7C               	movlw	124
   617   000A30  6ED6               	movwf	214,c	;volatile
   618                           
   619                           ;PIC18F4331_Timer.c: 81:     TMR0H = (0xE1);
   620   000A32  0EE1               	movlw	225
   621   000A34  6ED7               	movwf	215,c	;volatile
   622   000A36  0012               	return		;funcret
   623   000A38                     __end_of_Timer0_init:
   624                           	callstack 0
   625                           
   626 ;; *************** function _FSM_begin *****************
   627 ;; Defined at:
   628 ;;		line 35 in file "System_FSM.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  moisture        2   42[COMRAM] unsigned short 
   633 ;;  WateringDone    8   34[COMRAM] struct .
   634 ;;  MoistureCB_C    8   26[COMRAM] struct .
   635 ;; Return value:  Size  Location     Type
   636 ;;                  1    wreg      void 
   637 ;; Registers used:
   638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   644 ;;      Params:         0       0       0       0
   645 ;;      Locals:        18       0       0       0
   646 ;;      Temps:          2       0       0       0
   647 ;;      Totals:        20       0       0       0
   648 ;;Total ram usage:       20 bytes
   649 ;; Hardware stack levels used: 1
   650 ;; Hardware stack levels required when called: 7
   651 ;; This function calls:
   652 ;;		_Callbacks_Init
   653 ;;		_LCD_Clear
   654 ;;		_LCD_Init
   655 ;;		_LCD_Set_Cursor
   656 ;;		_LCD_Write_String
   657 ;;		_Register_Callback
   658 ;;		_SMS_Read_Moisture_Value
   659 ;;		_SMS_Set_State
   660 ;;		_SMS_init
   661 ;;		_Timer0_start
   662 ;;		_checking_moisture_status_led
   663 ;;		_get_current_state
   664 ;;		_idle_status_led
   665 ;;		_init_leds
   666 ;;		_set_state
   667 ;;		_watering_status_led
   668 ;; This function is called by:
   669 ;;		_main
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text3
   674   00035C                     __ptext3:
   675                           	callstack 0
   676   00035C                     _FSM_begin:
   677                           	callstack 23
   678   00035C                     
   679                           ;System_FSM.c: 37:     switch(get_current_state())
   680   00035C  EF77  F002         	goto	l1499
   681   000360                     l1425:
   682                           
   683                           ;System_FSM.c: 40:         {;System_FSM.c: 42:             SMS_init();
   684   000360  EC62  F005         	call	_SMS_init	;wreg free
   685   000364                     
   686                           ;System_FSM.c: 43:             Callbacks_Init();
   687   000364  EC2C  F004         	call	_Callbacks_Init	;wreg free
   688   000368                     
   689                           ;System_FSM.c: 45:             Callback_Config_t MoistureCB_Config =
   690   000368  EE20  F035         	lfsr	2,FSM_begin@F2877
   691   00036C  EE10  F01B         	lfsr	1,FSM_begin@MoistureCB_Config
   692   000370  0E07               	movlw	7
   693   000372                     u461:
   694   000372  CFDB FFE3          	movff	plusw2,plusw1
   695   000376  06E8               	decf	wreg,f,c
   696   000378  E2FC               	bc	u461
   697   00037A                     
   698                           ;System_FSM.c: 51:             Callback_Config_t WateringDoneCB_Config =
   699   00037A  EE20  F02D         	lfsr	2,FSM_begin@F2880
   700   00037E  EE10  F023         	lfsr	1,FSM_begin@WateringDoneCB_Config
   701   000382  0E07               	movlw	7
   702   000384                     u471:
   703   000384  CFDB FFE3          	movff	plusw2,plusw1
   704   000388  06E8               	decf	wreg,f,c
   705   00038A  E2FC               	bc	u471
   706   00038C                     
   707                           ;System_FSM.c: 57:             Register_Callback(&MoistureCB_Config);
   708   00038C  0E1B               	movlw	low FSM_begin@MoistureCB_Config
   709   00038E  6E11               	movwf	Register_Callback@config^0,c
   710   000390  0E00               	movlw	high FSM_begin@MoistureCB_Config
   711   000392  6E12               	movwf	(Register_Callback@config+1)^0,c
   712   000394  ECFA  F002         	call	_Register_Callback	;wreg free
   713   000398                     
   714                           ;System_FSM.c: 58:             Register_Callback(&WateringDoneCB_Config);
   715   000398  0E23               	movlw	low FSM_begin@WateringDoneCB_Config
   716   00039A  6E11               	movwf	Register_Callback@config^0,c
   717   00039C  0E00               	movlw	high FSM_begin@WateringDoneCB_Config
   718   00039E  6E12               	movwf	(Register_Callback@config+1)^0,c
   719   0003A0  ECFA  F002         	call	_Register_Callback	;wreg free
   720   0003A4                     
   721                           ;System_FSM.c: 60:             init_leds();
   722   0003A4  EC99  F004         	call	_init_leds	;wreg free
   723   0003A8                     
   724                           ;System_FSM.c: 62:             LCD_Init();
   725   0003A8  EC37  F003         	call	_LCD_Init	;wreg free
   726   0003AC                     
   727                           ;System_FSM.c: 64:             LCD_Clear();
   728   0003AC  EC44  F005         	call	_LCD_Clear	;wreg free
   729   0003B0                     
   730                           ;System_FSM.c: 65:             LCD_Set_Cursor(1,1);
   731   0003B0  0E01               	movlw	1
   732   0003B2  6E11               	movwf	LCD_Set_Cursor@c^0,c
   733   0003B4  0E01               	movlw	1
   734   0003B6  EC73  F003         	call	_LCD_Set_Cursor
   735   0003BA                     
   736                           ;System_FSM.c: 66:             LCD_Write_String(" Plant Watering\0");
   737   0003BA  0E3B               	movlw	low STR_1
   738   0003BC  6E13               	movwf	LCD_Write_String@str^0,c
   739   0003BE  0E03               	movlw	high STR_1
   740   0003C0  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   741   0003C2  EC01  F004         	call	_LCD_Write_String	;wreg free
   742   0003C6                     
   743                           ;System_FSM.c: 67:             LCD_Set_Cursor(2,1);
   744   0003C6  0E01               	movlw	1
   745   0003C8  6E11               	movwf	LCD_Set_Cursor@c^0,c
   746   0003CA  0E02               	movlw	2
   747   0003CC  EC73  F003         	call	_LCD_Set_Cursor
   748   0003D0                     
   749                           ;System_FSM.c: 68:             LCD_Write_String("System Initial...\0");
   750   0003D0  0E15               	movlw	low STR_2
   751   0003D2  6E13               	movwf	LCD_Write_String@str^0,c
   752   0003D4  0E03               	movlw	high STR_2
   753   0003D6  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   754   0003D8  EC01  F004         	call	_LCD_Write_String	;wreg free
   755   0003DC                     
   756                           ;System_FSM.c: 70:             _delay((unsigned long)((200)*(8000000/4000.0)));
   757   0003DC  0E03               	movlw	3
   758   0003DE  6E1A               	movwf	(??_FSM_begin+1)^0,c
   759   0003E0  0E08               	movlw	8
   760   0003E2  6E19               	movwf	??_FSM_begin^0,c
   761   0003E4  0E77               	movlw	119
   762   0003E6                     u587:
   763   0003E6  2EE8               	decfsz	wreg,f,c
   764   0003E8  D7FE               	bra	u587
   765   0003EA  2E19               	decfsz	??_FSM_begin^0,f,c
   766   0003EC  D7FC               	bra	u587
   767   0003EE  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   768   0003F0  D7FA               	bra	u587
   769   0003F2  F000               	nop	
   770   0003F4                     
   771                           ;System_FSM.c: 72:             Timer0_start();
   772   0003F4  EC6C  F005         	call	_Timer0_start	;wreg free
   773   0003F8                     
   774                           ;System_FSM.c: 74:             set_state(IDLE_STATE);
   775   0003F8  0E01               	movlw	1
   776   0003FA  EC5A  F005         	call	_set_state
   777                           
   778                           ;System_FSM.c: 76:             break;
   779   0003FE  EF95  F002         	goto	l165
   780   000402                     l1457:
   781                           
   782                           ;System_FSM.c: 80:         {;System_FSM.c: 81:             LCD_Clear();
   783   000402  EC44  F005         	call	_LCD_Clear	;wreg free
   784   000406                     
   785                           ;System_FSM.c: 82:             LCD_Set_Cursor(1,1);
   786   000406  0E01               	movlw	1
   787   000408  6E11               	movwf	LCD_Set_Cursor@c^0,c
   788   00040A  0E01               	movlw	1
   789   00040C  EC73  F003         	call	_LCD_Set_Cursor
   790   000410                     
   791                           ;System_FSM.c: 83:             LCD_Write_String(" >IDLE STATE<\0");
   792   000410  0E4C               	movlw	low STR_3
   793   000412  6E13               	movwf	LCD_Write_String@str^0,c
   794   000414  0E03               	movlw	high STR_3
   795   000416  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   796   000418  EC01  F004         	call	_LCD_Write_String	;wreg free
   797                           
   798                           ;System_FSM.c: 85:             while(get_current_state() == IDLE_STATE)
   799   00041C  EF12  F002         	goto	l1465
   800   000420                     l1463:
   801                           
   802                           ;System_FSM.c: 86:             {;System_FSM.c: 90:                 idle_status_led();
   803   000420  EC50  F005         	call	_idle_status_led	;wreg free
   804   000424                     l1465:
   805                           
   806                           ;System_FSM.c: 85:             while(get_current_state() == IDLE_STATE)
   807   000424  EC6A  F005         	call	_get_current_state	;wreg free
   808   000428  06E8               	decf	wreg,f,c
   809   00042A  B4D8               	btfsc	status,2,c
   810   00042C  EF1A  F002         	goto	u481
   811   000430  EF1C  F002         	goto	u480
   812   000434                     u481:
   813   000434  EF10  F002         	goto	l1463
   814   000438                     u480:
   815   000438  EF95  F002         	goto	l165
   816   00043C                     l1467:
   817                           
   818                           ;System_FSM.c: 97:         {;System_FSM.c: 99:             LCD_Clear();
   819   00043C  EC44  F005         	call	_LCD_Clear	;wreg free
   820   000440                     
   821                           ;System_FSM.c: 100:             LCD_Set_Cursor(1,1);
   822   000440  0E01               	movlw	1
   823   000442  6E11               	movwf	LCD_Set_Cursor@c^0,c
   824   000444  0E01               	movlw	1
   825   000446  EC73  F003         	call	_LCD_Set_Cursor
   826   00044A                     
   827                           ;System_FSM.c: 101:             LCD_Write_String(" >WATERING PLANTS<\0");
   828   00044A  0E01               	movlw	low STR_4
   829   00044C  6E13               	movwf	LCD_Write_String@str^0,c
   830   00044E  0E03               	movlw	high STR_4
   831   000450  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   832   000452  EC01  F004         	call	_LCD_Write_String	;wreg free
   833                           
   834                           ;System_FSM.c: 103:             while(get_current_state() == WATER_PLANTS)
   835   000456  EF2F  F002         	goto	l1475
   836   00045A                     l1473:
   837                           
   838                           ;System_FSM.c: 104:             {;System_FSM.c: 106:               watering_status_led()
      +                          ;
   839   00045A  EC4B  F005         	call	_watering_status_led	;wreg free
   840   00045E                     l1475:
   841                           
   842                           ;System_FSM.c: 103:             while(get_current_state() == WATER_PLANTS)
   843   00045E  EC6A  F005         	call	_get_current_state	;wreg free
   844   000462  0A02               	xorlw	2
   845   000464  B4D8               	btfsc	status,2,c
   846   000466  EF37  F002         	goto	u491
   847   00046A  EF39  F002         	goto	u490
   848   00046E                     u491:
   849   00046E  EF2D  F002         	goto	l1473
   850   000472                     u490:
   851   000472  EF95  F002         	goto	l165
   852   000476                     l1477:
   853                           
   854                           ;System_FSM.c: 114:         {;System_FSM.c: 117:             LCD_Clear();
   855   000476  EC44  F005         	call	_LCD_Clear	;wreg free
   856   00047A                     
   857                           ;System_FSM.c: 118:             LCD_Set_Cursor(1,1);
   858   00047A  0E01               	movlw	1
   859   00047C  6E11               	movwf	LCD_Set_Cursor@c^0,c
   860   00047E  0E01               	movlw	1
   861   000480  EC73  F003         	call	_LCD_Set_Cursor
   862   000484                     
   863                           ;System_FSM.c: 119:             LCD_Write_String(" >CHECKING MOIST<\0");
   864   000484  0E28               	movlw	low STR_5
   865   000486  6E13               	movwf	LCD_Write_String@str^0,c
   866   000488  0E03               	movlw	high STR_5
   867   00048A  6E14               	movwf	(LCD_Write_String@str+1)^0,c
   868   00048C  EC01  F004         	call	_LCD_Write_String	;wreg free
   869   000490                     
   870                           ;System_FSM.c: 121:             checking_moisture_status_led();
   871   000490  EC55  F005         	call	_checking_moisture_status_led	;wreg free
   872   000494                     
   873                           ;System_FSM.c: 122:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   874   000494  0E0B               	movlw	11
   875   000496  6E1A               	movwf	(??_FSM_begin+1)^0,c
   876   000498  0E26               	movlw	38
   877   00049A  6E19               	movwf	??_FSM_begin^0,c
   878   00049C  0E5E               	movlw	94
   879   00049E                     u597:
   880   00049E  2EE8               	decfsz	wreg,f,c
   881   0004A0  D7FE               	bra	u597
   882   0004A2  2E19               	decfsz	??_FSM_begin^0,f,c
   883   0004A4  D7FC               	bra	u597
   884   0004A6  2E1A               	decfsz	(??_FSM_begin+1)^0,f,c
   885   0004A8  D7FA               	bra	u597
   886   0004AA                     
   887                           ;System_FSM.c: 124:             U16 moisture = SMS_Read_Moisture_Value();
   888   0004AA  EC1C  F005         	call	_SMS_Read_Moisture_Value	;wreg free
   889   0004AE  C011  F02B         	movff	?_SMS_Read_Moisture_Value,FSM_begin@moisture
   890   0004B2  C012  F02C         	movff	?_SMS_Read_Moisture_Value+1,FSM_begin@moisture+1
   891   0004B6                     
   892                           ;System_FSM.c: 126:             if(moisture > 65000)
   893   0004B6  0EE9               	movlw	233
   894   0004B8  5C2B               	subwf	FSM_begin@moisture^0,w,c
   895   0004BA  0EFD               	movlw	253
   896   0004BC  582C               	subwfb	(FSM_begin@moisture+1)^0,w,c
   897   0004BE  A0D8               	btfss	status,0,c
   898   0004C0  EF64  F002         	goto	u501
   899   0004C4  EF66  F002         	goto	u500
   900   0004C8                     u501:
   901   0004C8  EF6A  F002         	goto	l1493
   902   0004CC                     u500:
   903   0004CC                     
   904                           ;System_FSM.c: 127:                 moisture = 1000;
   905   0004CC  0E03               	movlw	3
   906   0004CE  6E2C               	movwf	(FSM_begin@moisture+1)^0,c
   907   0004D0  0EE8               	movlw	232
   908   0004D2  6E2B               	movwf	FSM_begin@moisture^0,c
   909   0004D4                     l1493:
   910                           
   911                           ;System_FSM.c: 129:             SMS_Set_State(moisture);
   912   0004D4  C02B  F010         	movff	FSM_begin@moisture,SMS_Set_State@moisture
   913   0004D8  C02C  F011         	movff	FSM_begin@moisture+1,SMS_Set_State@moisture+1
   914   0004DC  ECA4  F003         	call	_SMS_Set_State	;wreg free
   915                           
   916                           ;System_FSM.c: 131:             break;
   917   0004E0  EF95  F002         	goto	l165
   918   0004E4                     l1495:
   919                           
   920                           ;System_FSM.c: 135:         {;System_FSM.c: 136:             set_state(INIT_STATE);
   921   0004E4  0E00               	movlw	0
   922   0004E6  EC5A  F005         	call	_set_state
   923                           
   924                           ;System_FSM.c: 137:             break;
   925   0004EA  EF95  F002         	goto	l165
   926   0004EE                     l1499:
   927   0004EE  EC6A  F005         	call	_get_current_state	;wreg free
   928   0004F2  6E19               	movwf	??_FSM_begin^0,c
   929   0004F4  6A1A               	clrf	(??_FSM_begin+1)^0,c
   930                           
   931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   932                           ; Switch size 1, requested type "simple"
   933                           ; Number of cases is 1, Range of values is 0 to 0
   934                           ; switch strategies available:
   935                           ; Name         Instructions Cycles
   936                           ; simple_byte            4     3 (average)
   937                           ;	Chosen strategy is simple_byte
   938   0004F6  501A               	movf	(??_FSM_begin+1)^0,w,c
   939   0004F8  0A00               	xorlw	0	; case 0
   940   0004FA  B4D8               	btfsc	status,2,c
   941   0004FC  EF82  F002         	goto	l1569
   942   000500  EF72  F002         	goto	l1495
   943   000504                     l1569:
   944                           
   945                           ; Switch size 1, requested type "simple"
   946                           ; Number of cases is 4, Range of values is 0 to 3
   947                           ; switch strategies available:
   948                           ; Name         Instructions Cycles
   949                           ; simple_byte           13     7 (average)
   950                           ;	Chosen strategy is simple_byte
   951   000504  5019               	movf	??_FSM_begin^0,w,c
   952   000506  0A00               	xorlw	0	; case 0
   953   000508  B4D8               	btfsc	status,2,c
   954   00050A  EFB0  F001         	goto	l1425
   955   00050E  0A01               	xorlw	1	; case 1
   956   000510  B4D8               	btfsc	status,2,c
   957   000512  EF01  F002         	goto	l1457
   958   000516  0A03               	xorlw	3	; case 2
   959   000518  B4D8               	btfsc	status,2,c
   960   00051A  EF1E  F002         	goto	l1467
   961   00051E  0A01               	xorlw	1	; case 3
   962   000520  B4D8               	btfsc	status,2,c
   963   000522  EF3B  F002         	goto	l1477
   964   000526  EF72  F002         	goto	l1495
   965   00052A                     l165:
   966   00052A  0012               	return		;funcret
   967   00052C                     __end_of_FSM_begin:
   968                           	callstack 0
   969                           
   970 ;; *************** function _watering_status_led *****************
   971 ;; Defined at:
   972 ;;		line 40 in file "LedDriver.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;		None
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		status,2, status,0
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   986 ;;      Params:         0       0       0       0
   987 ;;      Locals:         0       0       0       0
   988 ;;      Temps:          0       0       0       0
   989 ;;      Totals:         0       0       0       0
   990 ;;Total ram usage:        0 bytes
   991 ;; Hardware stack levels used: 1
   992 ;; Hardware stack levels required when called: 4
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_FSM_begin
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           	psect	text4
  1001   000A96                     __ptext4:
  1002                           	callstack 0
  1003   000A96                     _watering_status_led:
  1004                           	callstack 25
  1005   000A96                     
  1006                           ;LedDriver.c: 42:     (((LATD))|=((0x01)));
  1007   000A96  808C               	bsf	140,0,c	;volatile
  1008                           
  1009                           ;LedDriver.c: 44:     (((LATC))&=(~((0x02))));
  1010   000A98  928B               	bcf	139,1,c	;volatile
  1011                           
  1012                           ;LedDriver.c: 45:     (((LATC))&=(~((0x04))));
  1013   000A9A  948B               	bcf	139,2,c	;volatile
  1014                           
  1015                           ;LedDriver.c: 46:     (((LATD))&=(~((0x02))));
  1016   000A9C  928C               	bcf	140,1,c	;volatile
  1017   000A9E  0012               	return		;funcret
  1018   000AA0                     __end_of_watering_status_led:
  1019                           	callstack 0
  1020                           
  1021 ;; *************** function _init_leds *****************
  1022 ;; Defined at:
  1023 ;;		line 12 in file "LedDriver.c"
  1024 ;; Parameters:    Size  Location     Type
  1025 ;;		None
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;		None
  1028 ;; Return value:  Size  Location     Type
  1029 ;;                  1    wreg      void 
  1030 ;; Registers used:
  1031 ;;		wreg, status,2, status,0
  1032 ;; Tracked objects:
  1033 ;;		On entry : 0/0
  1034 ;;		On exit  : 0/0
  1035 ;;		Unchanged: 0/0
  1036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1037 ;;      Params:         0       0       0       0
  1038 ;;      Locals:         0       0       0       0
  1039 ;;      Temps:          2       0       0       0
  1040 ;;      Totals:         2       0       0       0
  1041 ;;Total ram usage:        2 bytes
  1042 ;; Hardware stack levels used: 1
  1043 ;; Hardware stack levels required when called: 4
  1044 ;; This function calls:
  1045 ;;		Nothing
  1046 ;; This function is called by:
  1047 ;;		_FSM_begin
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text5
  1052   000932                     __ptext5:
  1053                           	callstack 0
  1054   000932                     _init_leds:
  1055                           	callstack 25
  1056   000932                     
  1057                           ;LedDriver.c: 14:     (((TRISC))&=(~((0x02))));
  1058   000932  9294               	bcf	148,1,c	;volatile
  1059                           
  1060                           ;LedDriver.c: 15:     (((TRISC))&=(~((0x04))));
  1061   000934  9494               	bcf	148,2,c	;volatile
  1062                           
  1063                           ;LedDriver.c: 16:     (((TRISD))&=(~((0x02))));
  1064   000936  9295               	bcf	149,1,c	;volatile
  1065                           
  1066                           ;LedDriver.c: 17:     (((TRISD))&=(~((0x01))));
  1067   000938  9095               	bcf	149,0,c	;volatile
  1068                           
  1069                           ;LedDriver.c: 19:     (((LATC))|=((0x02)));
  1070   00093A  828B               	bsf	139,1,c	;volatile
  1071                           
  1072                           ;LedDriver.c: 20:     (((LATC))|=((0x04)));
  1073   00093C  848B               	bsf	139,2,c	;volatile
  1074                           
  1075                           ;LedDriver.c: 21:     (((LATD))|=((0x02)));
  1076   00093E  828C               	bsf	140,1,c	;volatile
  1077                           
  1078                           ;LedDriver.c: 22:     (((LATD))|=((0x01)));
  1079   000940  808C               	bsf	140,0,c	;volatile
  1080   000942                     
  1081                           ;LedDriver.c: 24:     _delay((unsigned long)((1000)*(8000000/4000.0)));
  1082   000942  0E0B               	movlw	11
  1083   000944  6E10               	movwf	(??_init_leds+1)^0,c
  1084   000946  0E26               	movlw	38
  1085   000948  6E0F               	movwf	??_init_leds^0,c
  1086   00094A  0E5E               	movlw	94
  1087   00094C                     u607:
  1088   00094C  2EE8               	decfsz	wreg,f,c
  1089   00094E  D7FE               	bra	u607
  1090   000950  2E0F               	decfsz	??_init_leds^0,f,c
  1091   000952  D7FC               	bra	u607
  1092   000954  2E10               	decfsz	(??_init_leds+1)^0,f,c
  1093   000956  D7FA               	bra	u607
  1094   000958                     
  1095                           ;LedDriver.c: 26:     (((LATC))&=(~((0x02))));
  1096   000958  928B               	bcf	139,1,c	;volatile
  1097   00095A                     
  1098                           ;LedDriver.c: 27:     (((LATC))&=(~((0x04))));
  1099   00095A  948B               	bcf	139,2,c	;volatile
  1100   00095C                     
  1101                           ;LedDriver.c: 28:     (((LATD))&=(~((0x02))));
  1102   00095C  928C               	bcf	140,1,c	;volatile
  1103   00095E                     
  1104                           ;LedDriver.c: 29:     (((LATD))&=(~((0x01))));
  1105   00095E  908C               	bcf	140,0,c	;volatile
  1106   000960  0012               	return		;funcret
  1107   000962                     __end_of_init_leds:
  1108                           	callstack 0
  1109                           
  1110 ;; *************** function _idle_status_led *****************
  1111 ;; Defined at:
  1112 ;;		line 32 in file "LedDriver.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		status,2, status,0
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1126 ;;      Params:         0       0       0       0
  1127 ;;      Locals:         0       0       0       0
  1128 ;;      Temps:          0       0       0       0
  1129 ;;      Totals:         0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels used: 1
  1132 ;; Hardware stack levels required when called: 4
  1133 ;; This function calls:
  1134 ;;		Nothing
  1135 ;; This function is called by:
  1136 ;;		_FSM_begin
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           	psect	text6
  1141   000AA0                     __ptext6:
  1142                           	callstack 0
  1143   000AA0                     _idle_status_led:
  1144                           	callstack 25
  1145   000AA0                     
  1146                           ;LedDriver.c: 34:     (((LATC))|=((0x04)));
  1147   000AA0  848B               	bsf	139,2,c	;volatile
  1148                           
  1149                           ;LedDriver.c: 36:     (((LATC))&=(~((0x02))));
  1150   000AA2  928B               	bcf	139,1,c	;volatile
  1151                           
  1152                           ;LedDriver.c: 37:     (((LATD))&=(~((0x01))));
  1153   000AA4  908C               	bcf	140,0,c	;volatile
  1154                           
  1155                           ;LedDriver.c: 38:     (((LATD))&=(~((0x02))));
  1156   000AA6  928C               	bcf	140,1,c	;volatile
  1157   000AA8  0012               	return		;funcret
  1158   000AAA                     __end_of_idle_status_led:
  1159                           	callstack 0
  1160                           
  1161 ;; *************** function _get_current_state *****************
  1162 ;; Defined at:
  1163 ;;		line 5 in file "FSM_states.c"
  1164 ;; Parameters:    Size  Location     Type
  1165 ;;		None
  1166 ;; Auto vars:     Size  Location     Type
  1167 ;;		None
  1168 ;; Return value:  Size  Location     Type
  1169 ;;                  1    wreg      enum E2
  1170 ;; Registers used:
  1171 ;;		wreg, status,2
  1172 ;; Tracked objects:
  1173 ;;		On entry : 0/0
  1174 ;;		On exit  : 0/0
  1175 ;;		Unchanged: 0/0
  1176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1177 ;;      Params:         0       0       0       0
  1178 ;;      Locals:         0       0       0       0
  1179 ;;      Temps:          0       0       0       0
  1180 ;;      Totals:         0       0       0       0
  1181 ;;Total ram usage:        0 bytes
  1182 ;; Hardware stack levels used: 1
  1183 ;; Hardware stack levels required when called: 4
  1184 ;; This function calls:
  1185 ;;		Nothing
  1186 ;; This function is called by:
  1187 ;;		_FSM_begin
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text7
  1192   000AD4                     __ptext7:
  1193                           	callstack 0
  1194   000AD4                     _get_current_state:
  1195                           	callstack 25
  1196   000AD4                     
  1197                           ;FSM_states.c: 7:     return FSM_state;
  1198   000AD4  5044               	movf	_FSM_state^0,w,c
  1199   000AD6  0012               	return		;funcret
  1200   000AD8                     __end_of_get_current_state:
  1201                           	callstack 0
  1202                           
  1203 ;; *************** function _checking_moisture_status_led *****************
  1204 ;; Defined at:
  1205 ;;		line 49 in file "LedDriver.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;		None
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;		None
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		status,2, status,0
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1219 ;;      Params:         0       0       0       0
  1220 ;;      Locals:         0       0       0       0
  1221 ;;      Temps:          0       0       0       0
  1222 ;;      Totals:         0       0       0       0
  1223 ;;Total ram usage:        0 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; Hardware stack levels required when called: 4
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_FSM_begin
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text8
  1234   000AAA                     __ptext8:
  1235                           	callstack 0
  1236   000AAA                     _checking_moisture_status_led:
  1237                           	callstack 25
  1238   000AAA                     
  1239                           ;LedDriver.c: 51:     (((LATD))|=((0x02)));
  1240   000AAA  828C               	bsf	140,1,c	;volatile
  1241                           
  1242                           ;LedDriver.c: 53:     (((LATC))&=(~((0x02))));
  1243   000AAC  928B               	bcf	139,1,c	;volatile
  1244                           
  1245                           ;LedDriver.c: 54:     (((LATC))&=(~((0x04))));
  1246   000AAE  948B               	bcf	139,2,c	;volatile
  1247                           
  1248                           ;LedDriver.c: 55:     (((LATD))&=(~((0x01))));
  1249   000AB0  908C               	bcf	140,0,c	;volatile
  1250   000AB2  0012               	return		;funcret
  1251   000AB4                     __end_of_checking_moisture_status_led:
  1252                           	callstack 0
  1253                           
  1254 ;; *************** function _Timer0_start *****************
  1255 ;; Defined at:
  1256 ;;		line 86 in file "PIC18F4331_Timer.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;		None
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;		None
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		None
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1270 ;;      Params:         0       0       0       0
  1271 ;;      Locals:         0       0       0       0
  1272 ;;      Temps:          0       0       0       0
  1273 ;;      Totals:         0       0       0       0
  1274 ;;Total ram usage:        0 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; Hardware stack levels required when called: 4
  1277 ;; This function calls:
  1278 ;;		Nothing
  1279 ;; This function is called by:
  1280 ;;		_FSM_begin
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text9
  1285   000AD8                     __ptext9:
  1286                           	callstack 0
  1287   000AD8                     _Timer0_start:
  1288                           	callstack 25
  1289   000AD8                     
  1290                           ;PIC18F4331_Timer.c: 88:     T0CONbits.TMR0ON = 1;
  1291   000AD8  8ED5               	bsf	213,7,c	;volatile
  1292   000ADA  0012               	return		;funcret
  1293   000ADC                     __end_of_Timer0_start:
  1294                           	callstack 0
  1295                           
  1296 ;; *************** function _SMS_init *****************
  1297 ;; Defined at:
  1298 ;;		line 8 in file "SoilMoistureSensor.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;		None
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;		None
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, cstack
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1312 ;;      Params:         0       0       0       0
  1313 ;;      Locals:         0       0       0       0
  1314 ;;      Temps:          0       0       0       0
  1315 ;;      Totals:         0       0       0       0
  1316 ;;Total ram usage:        0 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; Hardware stack levels required when called: 6
  1319 ;; This function calls:
  1320 ;;		_ADC_init
  1321 ;; This function is called by:
  1322 ;;		_FSM_begin
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text10
  1327   000AC4                     __ptext10:
  1328                           	callstack 0
  1329   000AC4                     _SMS_init:
  1330                           	callstack 23
  1331   000AC4                     
  1332                           ;SoilMoistureSensor.c: 10:     ADC_init();
  1333   000AC4  ECDB  F004         	call	_ADC_init	;wreg free
  1334   000AC8  0012               	return		;funcret
  1335   000ACA                     __end_of_SMS_init:
  1336                           	callstack 0
  1337                           
  1338 ;; *************** function _ADC_init *****************
  1339 ;; Defined at:
  1340 ;;		line 24 in file "PIC18F4331_ADC.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;		None
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;		None
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  1    wreg      void 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1354 ;;      Params:         0       0       0       0
  1355 ;;      Locals:         0       0       0       0
  1356 ;;      Temps:          0       0       0       0
  1357 ;;      Totals:         0       0       0       0
  1358 ;;Total ram usage:        0 bytes
  1359 ;; Hardware stack levels used: 1
  1360 ;; Hardware stack levels required when called: 5
  1361 ;; This function calls:
  1362 ;;		_ADC_stop
  1363 ;; This function is called by:
  1364 ;;		_SMS_init
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text11
  1369   0009B6                     __ptext11:
  1370                           	callstack 0
  1371   0009B6                     _ADC_init:
  1372                           	callstack 23
  1373   0009B6                     
  1374                           ;PIC18F4331_ADC.c: 27:     ADC_stop();
  1375   0009B6  EC6E  F005         	call	_ADC_stop	;wreg free
  1376   0009BA                     
  1377                           ;PIC18F4331_ADC.c: 30:     ADCON1bits.VCFG = 0;
  1378   0009BA  0E3F               	movlw	-193
  1379   0009BC  16C1               	andwf	193,f,c	;volatile
  1380   0009BE                     
  1381                           ;PIC18F4331_ADC.c: 33:     ADCHSbits.GASEL0 = 0;
  1382   0009BE  9099               	bcf	153,0,c	;volatile
  1383   0009C0                     
  1384                           ;PIC18F4331_ADC.c: 34:     ADCHSbits.GASEL1 = 0;
  1385   0009C0  9299               	bcf	153,1,c	;volatile
  1386   0009C2                     
  1387                           ;PIC18F4331_ADC.c: 37:     ADCON0bits.ACONV = 0;
  1388   0009C2  9AC2               	bcf	194,5,c	;volatile
  1389   0009C4                     
  1390                           ;PIC18F4331_ADC.c: 40:     ADCON2bits.ADCS = 0;
  1391   0009C4  0EF8               	movlw	-8
  1392   0009C6  16C0               	andwf	192,f,c	;volatile
  1393   0009C8                     
  1394                           ;PIC18F4331_ADC.c: 43:     ADCON2bits.ADFM = 1;
  1395   0009C8  8EC0               	bsf	192,7,c	;volatile
  1396   0009CA                     
  1397                           ;PIC18F4331_ADC.c: 46:     ADCON2bits.ACQT = 0;
  1398   0009CA  0E87               	movlw	-121
  1399   0009CC  16C0               	andwf	192,f,c	;volatile
  1400   0009CE                     
  1401                           ;PIC18F4331_ADC.c: 49:     ANSEL0bits.ANS0 = 1;
  1402   0009CE  80B8               	bsf	184,0,c	;volatile
  1403   0009D0  0012               	return		;funcret
  1404   0009D2                     __end_of_ADC_init:
  1405                           	callstack 0
  1406                           
  1407 ;; *************** function _ADC_stop *****************
  1408 ;; Defined at:
  1409 ;;		line 19 in file "PIC18F4331_ADC.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;		None
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		None
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1423 ;;      Params:         0       0       0       0
  1424 ;;      Locals:         0       0       0       0
  1425 ;;      Temps:          0       0       0       0
  1426 ;;      Totals:         0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; Hardware stack levels required when called: 4
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_ADC_init
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text12
  1438   000ADC                     __ptext12:
  1439                           	callstack 0
  1440   000ADC                     _ADC_stop:
  1441                           	callstack 23
  1442   000ADC                     
  1443                           ;PIC18F4331_ADC.c: 21:     ADCON0bits.ADON = 0;
  1444   000ADC  90C2               	bcf	194,0,c	;volatile
  1445   000ADE  0012               	return		;funcret
  1446   000AE0                     __end_of_ADC_stop:
  1447                           	callstack 0
  1448                           
  1449 ;; *************** function _SMS_Set_State *****************
  1450 ;; Defined at:
  1451 ;;		line 19 in file "SoilMoistureSensor.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  moisture        2   15[COMRAM] unsigned short 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      void 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0, cstack
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1465 ;;      Params:         2       0       0       0
  1466 ;;      Locals:         0       0       0       0
  1467 ;;      Temps:          0       0       0       0
  1468 ;;      Totals:         2       0       0       0
  1469 ;;Total ram usage:        2 bytes
  1470 ;; Hardware stack levels used: 1
  1471 ;; Hardware stack levels required when called: 5
  1472 ;; This function calls:
  1473 ;;		_set_state
  1474 ;; This function is called by:
  1475 ;;		_FSM_begin
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text13
  1480   000748                     __ptext13:
  1481                           	callstack 0
  1482   000748                     _SMS_Set_State:
  1483                           	callstack 24
  1484   000748                     
  1485                           ;SoilMoistureSensor.c: 19: void SMS_Set_State(U16 moisture);SoilMoistureSensor.c: 20: {;
      +                          SoilMoistureSensor.c: 21:     if(moisture >= (595))
  1486   000748  0E53               	movlw	83
  1487   00074A  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1488   00074C  0E02               	movlw	2
  1489   00074E  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1490   000750  A0D8               	btfss	status,0,c
  1491   000752  EFAD  F003         	goto	u331
  1492   000756  EFAF  F003         	goto	u330
  1493   00075A                     u331:
  1494   00075A  EFB4  F003         	goto	l1357
  1495   00075E                     u330:
  1496   00075E                     
  1497                           ;SoilMoistureSensor.c: 22:     {;SoilMoistureSensor.c: 23:         set_state(WATER_PLANT
      +                          S);
  1498   00075E  0E02               	movlw	2
  1499   000760  EC5A  F005         	call	_set_state
  1500                           
  1501                           ;SoilMoistureSensor.c: 24:     }
  1502   000764  EFD2  F003         	goto	l94
  1503   000768                     l1357:
  1504   000768  5011               	movf	(SMS_Set_State@moisture+1)^0,w,c
  1505   00076A  E109               	bnz	u340
  1506   00076C  0EEF               	movlw	239
  1507   00076E  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1508   000770  A0D8               	btfss	status,0,c
  1509   000772  EFBD  F003         	goto	u341
  1510   000776  EFBF  F003         	goto	u340
  1511   00077A                     u341:
  1512   00077A  EFCF  F003         	goto	l1363
  1513   00077E                     u340:
  1514   00077E  0E53               	movlw	83
  1515   000780  5C10               	subwf	SMS_Set_State@moisture^0,w,c
  1516   000782  0E02               	movlw	2
  1517   000784  5811               	subwfb	(SMS_Set_State@moisture+1)^0,w,c
  1518   000786  B0D8               	btfsc	status,0,c
  1519   000788  EFC8  F003         	goto	u351
  1520   00078C  EFCA  F003         	goto	u350
  1521   000790                     u351:
  1522   000790  EFCF  F003         	goto	l1363
  1523   000794                     u350:
  1524   000794                     
  1525                           ;SoilMoistureSensor.c: 26:     {;SoilMoistureSensor.c: 28:         set_state(IDLE_STATE)
      +                          ;
  1526   000794  0E01               	movlw	1
  1527   000796  EC5A  F005         	call	_set_state
  1528                           
  1529                           ;SoilMoistureSensor.c: 29:     }
  1530   00079A  EFD2  F003         	goto	l94
  1531   00079E                     l1363:
  1532                           
  1533                           ;SoilMoistureSensor.c: 31:     {;SoilMoistureSensor.c: 32:         set_state(IDLE_STATE)
      +                          ;
  1534   00079E  0E01               	movlw	1
  1535   0007A0  EC5A  F005         	call	_set_state
  1536   0007A4                     l94:
  1537   0007A4  0012               	return		;funcret
  1538   0007A6                     __end_of_SMS_Set_State:
  1539                           	callstack 0
  1540                           
  1541 ;; *************** function _set_state *****************
  1542 ;; Defined at:
  1543 ;;		line 9 in file "FSM_states.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;  state_to_set    1    wreg     enum E2
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  state_to_set    1   14[COMRAM] enum E2
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1557 ;;      Params:         0       0       0       0
  1558 ;;      Locals:         1       0       0       0
  1559 ;;      Temps:          0       0       0       0
  1560 ;;      Totals:         1       0       0       0
  1561 ;;Total ram usage:        1 bytes
  1562 ;; Hardware stack levels used: 1
  1563 ;; Hardware stack levels required when called: 4
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;;		_SMS_Set_State
  1569 ;;		_FSM_begin
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text14
  1574   000AB4                     __ptext14:
  1575                           	callstack 0
  1576   000AB4                     _set_state:
  1577                           	callstack 26
  1578                           
  1579                           ;incstack = 0
  1580                           ;set_state@state_to_set stored from wreg
  1581   000AB4  6E0F               	movwf	set_state@state_to_set^0,c
  1582   000AB6                     
  1583                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  1584   000AB6  C00F  F044         	movff	set_state@state_to_set,_FSM_state
  1585   000ABA  0012               	return		;funcret
  1586   000ABC                     __end_of_set_state:
  1587                           	callstack 0
  1588                           
  1589 ;; *************** function _SMS_Read_Moisture_Value *****************
  1590 ;; Defined at:
  1591 ;;		line 13 in file "SoilMoistureSensor.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;		None
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  moisture        2   18[COMRAM] unsigned short 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2   16[COMRAM] unsigned short 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1605 ;;      Params:         2       0       0       0
  1606 ;;      Locals:         2       0       0       0
  1607 ;;      Temps:          0       0       0       0
  1608 ;;      Totals:         4       0       0       0
  1609 ;;Total ram usage:        4 bytes
  1610 ;; Hardware stack levels used: 1
  1611 ;; Hardware stack levels required when called: 6
  1612 ;; This function calls:
  1613 ;;		_ADC_Read
  1614 ;; This function is called by:
  1615 ;;		_FSM_begin
  1616 ;; This function uses a non-reentrant model
  1617 ;;
  1618                           
  1619                           	psect	text15
  1620   000A38                     __ptext15:
  1621                           	callstack 0
  1622   000A38                     _SMS_Read_Moisture_Value:
  1623                           	callstack 23
  1624   000A38                     
  1625                           ;SoilMoistureSensor.c: 15:     U16 moisture = ADC_Read();
  1626   000A38  ECC6  F004         	call	_ADC_Read	;wreg free
  1627   000A3C  C00F  F013         	movff	?_ADC_Read,SMS_Read_Moisture_Value@moisture
  1628   000A40  C010  F014         	movff	?_ADC_Read+1,SMS_Read_Moisture_Value@moisture+1
  1629   000A44                     
  1630                           ;SoilMoistureSensor.c: 16:     return moisture;
  1631   000A44  C013  F011         	movff	SMS_Read_Moisture_Value@moisture,?_SMS_Read_Moisture_Value
  1632   000A48  C014  F012         	movff	SMS_Read_Moisture_Value@moisture+1,?_SMS_Read_Moisture_Value+1
  1633   000A4C  0012               	return		;funcret
  1634   000A4E                     __end_of_SMS_Read_Moisture_Value:
  1635                           	callstack 0
  1636                           
  1637 ;; *************** function _ADC_Read *****************
  1638 ;; Defined at:
  1639 ;;		line 60 in file "PIC18F4331_ADC.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  2   14[COMRAM] unsigned short 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1653 ;;      Params:         2       0       0       0
  1654 ;;      Locals:         0       0       0       0
  1655 ;;      Temps:          0       0       0       0
  1656 ;;      Totals:         2       0       0       0
  1657 ;;Total ram usage:        2 bytes
  1658 ;; Hardware stack levels used: 1
  1659 ;; Hardware stack levels required when called: 5
  1660 ;; This function calls:
  1661 ;;		_ADC_in_progress
  1662 ;;		_ADC_start
  1663 ;; This function is called by:
  1664 ;;		_SMS_Read_Moisture_Value
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text16
  1669   00098C                     __ptext16:
  1670                           	callstack 0
  1671   00098C                     _ADC_Read:
  1672                           	callstack 23
  1673   00098C                     
  1674                           ;PIC18F4331_ADC.c: 62:     ADC_start();
  1675   00098C  EC65  F005         	call	_ADC_start	;wreg free
  1676   000990                     l1337:
  1677   000990  EC32  F005         	call	_ADC_in_progress	;wreg free
  1678   000994  0900               	iorlw	0
  1679   000996  A4D8               	btfss	status,2,c
  1680   000998  EFD0  F004         	goto	u321
  1681   00099C  EFD2  F004         	goto	u320
  1682   0009A0                     u321:
  1683   0009A0  EFC8  F004         	goto	l1337
  1684   0009A4                     u320:
  1685   0009A4                     
  1686                           ;PIC18F4331_ADC.c: 68:     ADC.ADCRES_Members.result_high = ADRESH;
  1687   0009A4  CFC4 F042          	movff	4036,_ADC+1	;volatile
  1688                           
  1689                           ;PIC18F4331_ADC.c: 69:     ADC.ADCRES_Members.result_low = ADRESL;
  1690   0009A8  CFC3 F041          	movff	4035,_ADC	;volatile
  1691                           
  1692                           ;PIC18F4331_ADC.c: 72:     return (ADC.ADC_Raw);
  1693   0009AC  C041  F00F         	movff	_ADC,?_ADC_Read
  1694   0009B0  C042  F010         	movff	_ADC+1,?_ADC_Read+1
  1695   0009B4  0012               	return		;funcret
  1696   0009B6                     __end_of_ADC_Read:
  1697                           	callstack 0
  1698                           
  1699 ;; *************** function _ADC_start *****************
  1700 ;; Defined at:
  1701 ;;		line 13 in file "PIC18F4331_ADC.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;		None
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;		None
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		None
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1715 ;;      Params:         0       0       0       0
  1716 ;;      Locals:         0       0       0       0
  1717 ;;      Temps:          0       0       0       0
  1718 ;;      Totals:         0       0       0       0
  1719 ;;Total ram usage:        0 bytes
  1720 ;; Hardware stack levels used: 1
  1721 ;; Hardware stack levels required when called: 4
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_ADC_Read
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text17
  1730   000ACA                     __ptext17:
  1731                           	callstack 0
  1732   000ACA                     _ADC_start:
  1733                           	callstack 23
  1734   000ACA                     
  1735                           ;PIC18F4331_ADC.c: 15:     ADCON0bits.ADON = 1;
  1736   000ACA  80C2               	bsf	194,0,c	;volatile
  1737                           
  1738                           ;PIC18F4331_ADC.c: 16:     ADCON0bits.GODONE = 1;
  1739   000ACC  82C2               	bsf	194,1,c	;volatile
  1740   000ACE  0012               	return		;funcret
  1741   000AD0                     __end_of_ADC_start:
  1742                           	callstack 0
  1743                           
  1744 ;; *************** function _ADC_in_progress *****************
  1745 ;; Defined at:
  1746 ;;		line 53 in file "PIC18F4331_ADC.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;		None
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      unsigned char 
  1753 ;; Registers used:
  1754 ;;		wreg
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1760 ;;      Params:         0       0       0       0
  1761 ;;      Locals:         0       0       0       0
  1762 ;;      Temps:          0       0       0       0
  1763 ;;      Totals:         0       0       0       0
  1764 ;;Total ram usage:        0 bytes
  1765 ;; Hardware stack levels used: 1
  1766 ;; Hardware stack levels required when called: 4
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_ADC_Read
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text18
  1775   000A64                     __ptext18:
  1776                           	callstack 0
  1777   000A64                     _ADC_in_progress:
  1778                           	callstack 23
  1779   000A64                     
  1780                           ;PIC18F4331_ADC.c: 57:     return (ADCON0bits.GODONE);
  1781   000A64  B2C2               	btfsc	194,1,c	;volatile
  1782   000A66  EF37  F005         	goto	u11
  1783   000A6A  EF3A  F005         	goto	u10
  1784   000A6E                     u11:
  1785   000A6E  0E01               	movlw	1
  1786   000A70  EF3B  F005         	goto	u16
  1787   000A74                     u10:
  1788   000A74  0E00               	movlw	0
  1789   000A76                     u16:
  1790   000A76  0012               	return		;funcret
  1791   000A78                     __end_of_ADC_in_progress:
  1792                           	callstack 0
  1793                           
  1794 ;; *************** function _Register_Callback *****************
  1795 ;; Defined at:
  1796 ;;		line 47 in file "SystemCallbacks.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  config          2   16[COMRAM] PTR struct .
  1799 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      unsigned char 
  1804 ;; Registers used:
  1805 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1811 ;;      Params:         2       0       0       0
  1812 ;;      Locals:         0       0       0       0
  1813 ;;      Temps:          2       0       0       0
  1814 ;;      Totals:         4       0       0       0
  1815 ;;Total ram usage:        4 bytes
  1816 ;; Hardware stack levels used: 1
  1817 ;; Hardware stack levels required when called: 5
  1818 ;; This function calls:
  1819 ;;		_Reset_Counter
  1820 ;; This function is called by:
  1821 ;;		_FSM_begin
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text19
  1826   0005F4                     __ptext19:
  1827                           	callstack 0
  1828   0005F4                     _Register_Callback:
  1829                           	callstack 24
  1830   0005F4                     
  1831                           ;SystemCallbacks.c: 47: U8 Register_Callback(Callback_Config_t *config);SystemCallbacks.
      +                          c: 48: {;SystemCallbacks.c: 49:     if(callback_count < (5))
  1832   0005F4  0E05               	movlw	5
  1833   0005F6  6043               	cpfslt	_callback_count^0,c
  1834   0005F8  EF00  F003         	goto	u391
  1835   0005FC  EF02  F003         	goto	u390
  1836   000600                     u391:
  1837   000600  EF36  F003         	goto	l192
  1838   000604                     u390:
  1839   000604                     
  1840                           ;SystemCallbacks.c: 50:     {;SystemCallbacks.c: 51:         if(config->callback != ((vo
      +                          id*)0) && config->expiry_time > 0)
  1841   000604  EE20 F002          	lfsr	2,2
  1842   000608  5011               	movf	Register_Callback@config^0,w,c
  1843   00060A  26D9               	addwf	fsr2l,f,c
  1844   00060C  5012               	movf	(Register_Callback@config+1)^0,w,c
  1845   00060E  22DA               	addwfc	fsr2h,f,c
  1846   000610  50DE               	movf	postinc2,w,c
  1847   000612  10DE               	iorwf	postinc2,w,c
  1848   000614  B4D8               	btfsc	status,2,c
  1849   000616  EF0F  F003         	goto	u401
  1850   00061A  EF11  F003         	goto	u400
  1851   00061E                     u401:
  1852   00061E  EF36  F003         	goto	l192
  1853   000622                     u400:
  1854   000622  C011  FFD9         	movff	Register_Callback@config,fsr2l
  1855   000626  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  1856   00062A  50DE               	movf	postinc2,w,c
  1857   00062C  10DE               	iorwf	postinc2,w,c
  1858   00062E  B4D8               	btfsc	status,2,c
  1859   000630  EF1C  F003         	goto	u411
  1860   000634  EF1E  F003         	goto	u410
  1861   000638                     u411:
  1862   000638  EF36  F003         	goto	l192
  1863   00063C                     u410:
  1864   00063C                     
  1865                           ;SystemCallbacks.c: 52:         {;SystemCallbacks.c: 54:             registered_callback
      +                          s[callback_count] = (*config);
  1866   00063C  C011  FFD9         	movff	Register_Callback@config,fsr2l
  1867   000640  C012  FFDA         	movff	Register_Callback@config+1,fsr2h
  1868   000644  5043               	movf	_callback_count^0,w,c
  1869   000646  0D08               	mullw	8
  1870   000648  0E60               	movlw	low _registered_callbacks
  1871   00064A  24F3               	addwf	243,w,c
  1872   00064C  6EE1               	movwf	fsr1l,c
  1873   00064E  0E00               	movlw	high _registered_callbacks
  1874   000650  20F4               	addwfc	prodh,w,c
  1875   000652  6EE2               	movwf	fsr1h,c
  1876   000654  0E07               	movlw	7
  1877   000656                     u421:
  1878   000656  CFDB FFE3          	movff	plusw2,plusw1
  1879   00065A  06E8               	decf	wreg,f,c
  1880   00065C  E2FC               	bc	u421
  1881   00065E                     
  1882                           ;SystemCallbacks.c: 55:             Reset_Counter(config);
  1883   00065E  C011  F00F         	movff	Register_Callback@config,Reset_Counter@config
  1884   000662  C012  F010         	movff	Register_Callback@config+1,Reset_Counter@config+1
  1885   000666  EC27  F005         	call	_Reset_Counter	;wreg free
  1886   00066A                     
  1887                           ;SystemCallbacks.c: 57:             callback_count++;
  1888   00066A  2A43               	incf	_callback_count^0,f,c
  1889   00066C                     l192:
  1890   00066C  0012               	return		;funcret
  1891   00066E                     __end_of_Register_Callback:
  1892                           	callstack 0
  1893                           
  1894 ;; *************** function _Reset_Counter *****************
  1895 ;; Defined at:
  1896 ;;		line 42 in file "SystemCallbacks.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  config          2   14[COMRAM] PTR struct .
  1899 ;;		 -> FSM_begin@WateringDoneCB_Config(8), FSM_begin@MoistureCB_Config(8), 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1911 ;;      Params:         2       0       0       0
  1912 ;;      Locals:         0       0       0       0
  1913 ;;      Temps:          0       0       0       0
  1914 ;;      Totals:         2       0       0       0
  1915 ;;Total ram usage:        2 bytes
  1916 ;; Hardware stack levels used: 1
  1917 ;; Hardware stack levels required when called: 4
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_Register_Callback
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text20
  1926   000A4E                     __ptext20:
  1927                           	callstack 0
  1928   000A4E                     _Reset_Counter:
  1929                           	callstack 24
  1930   000A4E                     
  1931                           ;SystemCallbacks.c: 42: void Reset_Counter(Callback_Config_t * config);SystemCallbacks.c
      +                          : 43: {;SystemCallbacks.c: 44:     config->count = 0;
  1932   000A4E  EE20 F005          	lfsr	2,5
  1933   000A52  500F               	movf	Reset_Counter@config^0,w,c
  1934   000A54  26D9               	addwf	fsr2l,f,c
  1935   000A56  5010               	movf	(Reset_Counter@config+1)^0,w,c
  1936   000A58  22DA               	addwfc	fsr2h,f,c
  1937   000A5A  0E00               	movlw	0
  1938   000A5C  6EDE               	movwf	postinc2,c
  1939   000A5E  0E00               	movlw	0
  1940   000A60  6EDD               	movwf	postdec2,c
  1941   000A62  0012               	return		;funcret
  1942   000A64                     __end_of_Reset_Counter:
  1943                           	callstack 0
  1944                           
  1945 ;; *************** function _LCD_Write_String *****************
  1946 ;; Defined at:
  1947 ;;		line 120 in file "LCD.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;  str             2   18[COMRAM] PTR unsigned char 
  1950 ;;		 -> STR_5(19), STR_4(20), STR_3(15), STR_2(19), 
  1951 ;;		 -> STR_1(17), 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  i               2   22[COMRAM] int 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1963 ;;      Params:         2       0       0       0
  1964 ;;      Locals:         2       0       0       0
  1965 ;;      Temps:          2       0       0       0
  1966 ;;      Totals:         6       0       0       0
  1967 ;;Total ram usage:        6 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; Hardware stack levels required when called: 6
  1970 ;; This function calls:
  1971 ;;		_LCD_Write_Char
  1972 ;; This function is called by:
  1973 ;;		_FSM_begin
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           	psect	text21
  1978   000802                     __ptext21:
  1979                           	callstack 0
  1980   000802                     _LCD_Write_String:
  1981                           	callstack 23
  1982   000802                     
  1983                           ;LCD.c: 120: void LCD_Write_String(char *str);LCD.c: 121: {;LCD.c: 122:   int i;;LCD.c: 
      +                          123:   for(i=0;str[i]!='\0';i++)
  1984   000802  0E00               	movlw	0
  1985   000804  6E18               	movwf	(LCD_Write_String@i+1)^0,c
  1986   000806  0E00               	movlw	0
  1987   000808  6E17               	movwf	LCD_Write_String@i^0,c
  1988   00080A  EF17  F004         	goto	l1421
  1989   00080E                     l1417:
  1990                           
  1991                           ;LCD.c: 124:     LCD_Write_Char(str[i]);
  1992   00080E  5017               	movf	LCD_Write_String@i^0,w,c
  1993   000810  2413               	addwf	LCD_Write_String@str^0,w,c
  1994   000812  6E15               	movwf	??_LCD_Write_String^0,c
  1995   000814  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  1996   000816  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  1997   000818  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  1998   00081A  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  1999   00081E  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2000   000822                     	if	0	;tblptru may be non-zero
  2001   000822                     	endif
  2002   000822                     	if	0	;tblptru may be non-zero
  2003   000822                     	endif
  2004   000822  0008               	tblrd		*
  2005   000824  50F5               	movf	tablat,w,c
  2006   000826  EC52  F004         	call	_LCD_Write_Char
  2007   00082A  4A17               	infsnz	LCD_Write_String@i^0,f,c
  2008   00082C  2A18               	incf	(LCD_Write_String@i+1)^0,f,c
  2009   00082E                     l1421:
  2010   00082E  5017               	movf	LCD_Write_String@i^0,w,c
  2011   000830  2413               	addwf	LCD_Write_String@str^0,w,c
  2012   000832  6E15               	movwf	??_LCD_Write_String^0,c
  2013   000834  5018               	movf	(LCD_Write_String@i+1)^0,w,c
  2014   000836  2014               	addwfc	(LCD_Write_String@str+1)^0,w,c
  2015   000838  6E16               	movwf	(??_LCD_Write_String+1)^0,c
  2016   00083A  C015  FFF6         	movff	??_LCD_Write_String,tblptrl
  2017   00083E  C016  FFF7         	movff	??_LCD_Write_String+1,tblptrh
  2018   000842                     	if	0	;tblptru may be non-zero
  2019   000842                     	endif
  2020   000842                     	if	0	;tblptru may be non-zero
  2021   000842                     	endif
  2022   000842  0008               	tblrd		*
  2023   000844  50F5               	movf	tablat,w,c
  2024   000846  0900               	iorlw	0
  2025   000848  A4D8               	btfss	status,2,c
  2026   00084A  EF29  F004         	goto	u451
  2027   00084E  EF2B  F004         	goto	u450
  2028   000852                     u451:
  2029   000852  EF07  F004         	goto	l1417
  2030   000856                     u450:
  2031   000856  0012               	return		;funcret
  2032   000858                     __end_of_LCD_Write_String:
  2033                           	callstack 0
  2034                           
  2035 ;; *************** function _LCD_Write_Char *****************
  2036 ;; Defined at:
  2037 ;;		line 102 in file "LCD.c"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;  Data            1    wreg     unsigned char 
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  Data            1   17[COMRAM] unsigned char 
  2042 ;;  High4           1   16[COMRAM] unsigned char 
  2043 ;;  Low4            1   15[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2, status,0, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2053 ;;      Params:         0       0       0       0
  2054 ;;      Locals:         3       0       0       0
  2055 ;;      Temps:          0       0       0       0
  2056 ;;      Totals:         3       0       0       0
  2057 ;;Total ram usage:        3 bytes
  2058 ;; Hardware stack levels used: 1
  2059 ;; Hardware stack levels required when called: 5
  2060 ;; This function calls:
  2061 ;;		_LCD_DATA
  2062 ;; This function is called by:
  2063 ;;		_LCD_Write_String
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text22
  2068   0008A4                     __ptext22:
  2069                           	callstack 0
  2070   0008A4                     _LCD_Write_Char:
  2071                           	callstack 23
  2072                           
  2073                           ;incstack = 0
  2074                           ;LCD_Write_Char@Data stored from wreg
  2075   0008A4  6E12               	movwf	LCD_Write_Char@Data^0,c
  2076   0008A6                     
  2077                           ;LCD.c: 102: void LCD_Write_Char(char Data);LCD.c: 103: {;LCD.c: 104:   char Low4,High4;
      +                          ;LCD.c: 105:   Low4 = Data & 0x0F;
  2078   0008A6  5012               	movf	LCD_Write_Char@Data^0,w,c
  2079   0008A8  0B0F               	andlw	15
  2080   0008AA  6E10               	movwf	LCD_Write_Char@Low4^0,c
  2081                           
  2082                           ;LCD.c: 106:   High4 = Data & 0xF0;
  2083   0008AC  5012               	movf	LCD_Write_Char@Data^0,w,c
  2084   0008AE  0BF0               	andlw	240
  2085   0008B0  6E11               	movwf	LCD_Write_Char@High4^0,c
  2086   0008B2                     
  2087                           ;LCD.c: 107:   PORTBbits.RB5 = 1;
  2088   0008B2  8A81               	bsf	129,5,c	;volatile
  2089   0008B4                     
  2090                           ;LCD.c: 108:   LCD_DATA(High4>>4);
  2091   0008B4  3811               	swapf	LCD_Write_Char@High4^0,w,c
  2092   0008B6  0B0F               	andlw	15
  2093   0008B8  ECD3  F003         	call	_LCD_DATA
  2094   0008BC                     
  2095                           ;LCD.c: 109:   PORTBbits.RB4 = 1;
  2096   0008BC  8881               	bsf	129,4,c	;volatile
  2097   0008BE                     
  2098                           ;LCD.c: 110:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2099   0008BE  0EA6               	movlw	166
  2100   0008C0                     u617:
  2101   0008C0  2EE8               	decfsz	wreg,f,c
  2102   0008C2  D7FE               	bra	u617
  2103   0008C4  D000               	nop2	
  2104   0008C6                     
  2105                           ;LCD.c: 111:   PORTBbits.RB4 = 0;
  2106   0008C6  9881               	bcf	129,4,c	;volatile
  2107   0008C8                     
  2108                           ;LCD.c: 112:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2109   0008C8  0EA6               	movlw	166
  2110   0008CA                     u627:
  2111   0008CA  2EE8               	decfsz	wreg,f,c
  2112   0008CC  D7FE               	bra	u627
  2113   0008CE  D000               	nop2	
  2114   0008D0                     
  2115                           ;LCD.c: 113:   LCD_DATA(Low4);
  2116   0008D0  5010               	movf	LCD_Write_Char@Low4^0,w,c
  2117   0008D2  ECD3  F003         	call	_LCD_DATA
  2118   0008D6                     
  2119                           ;LCD.c: 114:   PORTBbits.RB4 = 1;
  2120   0008D6  8881               	bsf	129,4,c	;volatile
  2121   0008D8                     
  2122                           ;LCD.c: 115:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2123   0008D8  0EA6               	movlw	166
  2124   0008DA                     u637:
  2125   0008DA  2EE8               	decfsz	wreg,f,c
  2126   0008DC  D7FE               	bra	u637
  2127   0008DE  D000               	nop2	
  2128   0008E0                     
  2129                           ;LCD.c: 116:   PORTBbits.RB4 = 0;
  2130   0008E0  9881               	bcf	129,4,c	;volatile
  2131   0008E2                     
  2132                           ;LCD.c: 117:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2133   0008E2  0EA6               	movlw	166
  2134   0008E4                     u647:
  2135   0008E4  2EE8               	decfsz	wreg,f,c
  2136   0008E6  D7FE               	bra	u647
  2137   0008E8  D000               	nop2	
  2138   0008EA  0012               	return		;funcret
  2139   0008EC                     __end_of_LCD_Write_Char:
  2140                           	callstack 0
  2141                           
  2142 ;; *************** function _LCD_Set_Cursor *****************
  2143 ;; Defined at:
  2144 ;;		line 81 in file "LCD.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  r               1    wreg     unsigned char 
  2147 ;;  c               1   16[COMRAM] unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  r               1   17[COMRAM] unsigned char 
  2150 ;;  Temp            1   20[COMRAM] unsigned char 
  2151 ;;  High4           1   19[COMRAM] unsigned char 
  2152 ;;  Low4            1   18[COMRAM] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  1    wreg      void 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0, cstack
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2162 ;;      Params:         1       0       0       0
  2163 ;;      Locals:         4       0       0       0
  2164 ;;      Temps:          0       0       0       0
  2165 ;;      Totals:         5       0       0       0
  2166 ;;Total ram usage:        5 bytes
  2167 ;; Hardware stack levels used: 1
  2168 ;; Hardware stack levels required when called: 6
  2169 ;; This function calls:
  2170 ;;		_LCD_CMD
  2171 ;; This function is called by:
  2172 ;;		_FSM_begin
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text23
  2177   0006E6                     __ptext23:
  2178                           	callstack 0
  2179   0006E6                     _LCD_Set_Cursor:
  2180                           	callstack 23
  2181                           
  2182                           ;incstack = 0
  2183                           ;LCD_Set_Cursor@r stored from wreg
  2184   0006E6  6E12               	movwf	LCD_Set_Cursor@r^0,c
  2185   0006E8                     
  2186                           ;LCD.c: 81: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 82: {;LCD.c: 83
      +                          :   unsigned char Temp,Low4,High4;;LCD.c: 84:   if(r == 1)
  2187   0006E8  0412               	decf	LCD_Set_Cursor@r^0,w,c
  2188   0006EA  A4D8               	btfss	status,2,c
  2189   0006EC  EF7A  F003         	goto	u431
  2190   0006F0  EF7C  F003         	goto	u430
  2191   0006F4                     u431:
  2192   0006F4  EF8B  F003         	goto	l276
  2193   0006F8                     u430:
  2194   0006F8                     
  2195                           ;LCD.c: 85:   {;LCD.c: 86:     Temp = 0x80 + c - 1;
  2196   0006F8  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2197   0006FA  0F7F               	addlw	127
  2198   0006FC  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2199                           
  2200                           ;LCD.c: 87:     High4 = Temp >> 4;
  2201   0006FE  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2202   000700  0B0F               	andlw	15
  2203   000702  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2204                           
  2205                           ;LCD.c: 88:     Low4 = Temp & 0x0F;
  2206   000704  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2207   000706  0B0F               	andlw	15
  2208   000708  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2209   00070A                     
  2210                           ;LCD.c: 89:     LCD_CMD(High4);
  2211   00070A  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2212   00070C  EC05  F005         	call	_LCD_CMD
  2213   000710                     
  2214                           ;LCD.c: 90:     LCD_CMD(Low4);
  2215   000710  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2216   000712  EC05  F005         	call	_LCD_CMD
  2217   000716                     l276:
  2218                           
  2219                           ;LCD.c: 92:   if(r == 2)
  2220   000716  0E02               	movlw	2
  2221   000718  1812               	xorwf	LCD_Set_Cursor@r^0,w,c
  2222   00071A  A4D8               	btfss	status,2,c
  2223   00071C  EF92  F003         	goto	u441
  2224   000720  EF94  F003         	goto	u440
  2225   000724                     u441:
  2226   000724  EFA3  F003         	goto	l278
  2227   000728                     u440:
  2228   000728                     
  2229                           ;LCD.c: 93:   {;LCD.c: 94:     Temp = 0xC0 + c - 1;
  2230   000728  5011               	movf	LCD_Set_Cursor@c^0,w,c
  2231   00072A  0FBF               	addlw	191
  2232   00072C  6E15               	movwf	LCD_Set_Cursor@Temp^0,c
  2233                           
  2234                           ;LCD.c: 95:     High4 = Temp >> 4;
  2235   00072E  3815               	swapf	LCD_Set_Cursor@Temp^0,w,c
  2236   000730  0B0F               	andlw	15
  2237   000732  6E14               	movwf	LCD_Set_Cursor@High4^0,c
  2238                           
  2239                           ;LCD.c: 96:     Low4 = Temp & 0x0F;
  2240   000734  5015               	movf	LCD_Set_Cursor@Temp^0,w,c
  2241   000736  0B0F               	andlw	15
  2242   000738  6E13               	movwf	LCD_Set_Cursor@Low4^0,c
  2243   00073A                     
  2244                           ;LCD.c: 97:     LCD_CMD(High4);
  2245   00073A  5014               	movf	LCD_Set_Cursor@High4^0,w,c
  2246   00073C  EC05  F005         	call	_LCD_CMD
  2247   000740                     
  2248                           ;LCD.c: 98:     LCD_CMD(Low4);
  2249   000740  5013               	movf	LCD_Set_Cursor@Low4^0,w,c
  2250   000742  EC05  F005         	call	_LCD_CMD
  2251   000746                     l278:
  2252   000746  0012               	return		;funcret
  2253   000748                     __end_of_LCD_Set_Cursor:
  2254                           	callstack 0
  2255                           
  2256 ;; *************** function _LCD_Init *****************
  2257 ;; Defined at:
  2258 ;;		line 5 in file "LCD.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;		None
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      void 
  2265 ;; Registers used:
  2266 ;;		wreg, status,2, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2272 ;;      Params:         0       0       0       0
  2273 ;;      Locals:         0       0       0       0
  2274 ;;      Temps:          1       0       0       0
  2275 ;;      Totals:         1       0       0       0
  2276 ;;Total ram usage:        1 bytes
  2277 ;; Hardware stack levels used: 1
  2278 ;; Hardware stack levels required when called: 6
  2279 ;; This function calls:
  2280 ;;		_LCD_CMD
  2281 ;;		_LCD_DATA
  2282 ;; This function is called by:
  2283 ;;		_FSM_begin
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text24
  2288   00066E                     __ptext24:
  2289                           	callstack 0
  2290   00066E                     _LCD_Init:
  2291                           	callstack 23
  2292   00066E                     
  2293                           ;LCD.c: 8:   TRISB = 0x00;
  2294   00066E  0E00               	movlw	0
  2295   000670  6E93               	movwf	147,c	;volatile
  2296   000672                     
  2297                           ;LCD.c: 9:   TRISBbits.RB5 = 0;
  2298   000672  9A93               	bcf	147,5,c	;volatile
  2299   000674                     
  2300                           ;LCD.c: 10:   TRISBbits.RB4 = 0;
  2301   000674  9893               	bcf	147,4,c	;volatile
  2302   000676                     
  2303                           ;LCD.c: 13:   LCD_DATA(0x00);
  2304   000676  0E00               	movlw	0
  2305   000678  ECD3  F003         	call	_LCD_DATA
  2306   00067C                     
  2307                           ;LCD.c: 14:   _delay((unsigned long)((30)*(8000000/4000.0)));
  2308   00067C  0E4E               	movlw	78
  2309   00067E  6E11               	movwf	??_LCD_Init^0,c
  2310   000680  0EEB               	movlw	235
  2311   000682                     u657:
  2312   000682  2EE8               	decfsz	wreg,f,c
  2313   000684  D7FE               	bra	u657
  2314   000686  2E11               	decfsz	??_LCD_Init^0,f,c
  2315   000688  D7FC               	bra	u657
  2316   00068A  F000               	nop	
  2317   00068C                     
  2318                           ;LCD.c: 15:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2319   00068C  0EA6               	movlw	166
  2320   00068E                     u667:
  2321   00068E  2EE8               	decfsz	wreg,f,c
  2322   000690  D7FE               	bra	u667
  2323   000692  D000               	nop2	
  2324   000694                     
  2325                           ;LCD.c: 16:   LCD_CMD(0x03);
  2326   000694  0E03               	movlw	3
  2327   000696  EC05  F005         	call	_LCD_CMD
  2328                           
  2329                           ;LCD.c: 17:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2330   00069A  0E0D               	movlw	13
  2331   00069C  6E11               	movwf	??_LCD_Init^0,c
  2332   00069E  0EFC               	movlw	252
  2333   0006A0                     u677:
  2334   0006A0  2EE8               	decfsz	wreg,f,c
  2335   0006A2  D7FE               	bra	u677
  2336   0006A4  2E11               	decfsz	??_LCD_Init^0,f,c
  2337   0006A6  D7FC               	bra	u677
  2338   0006A8                     
  2339                           ;LCD.c: 18:   LCD_CMD(0x03);
  2340   0006A8  0E03               	movlw	3
  2341   0006AA  EC05  F005         	call	_LCD_CMD
  2342   0006AE                     
  2343                           ;LCD.c: 19:   _delay((unsigned long)((150)*(8000000/4000000.0)));
  2344   0006AE  0E64               	movlw	100
  2345   0006B0                     u687:
  2346   0006B0  2EE8               	decfsz	wreg,f,c
  2347   0006B2  D7FE               	bra	u687
  2348                           
  2349                           ;LCD.c: 20:   LCD_CMD(0x03);
  2350   0006B4  0E03               	movlw	3
  2351   0006B6  EC05  F005         	call	_LCD_CMD
  2352                           
  2353                           ;LCD.c: 21:   LCD_CMD(0x02);
  2354   0006BA  0E02               	movlw	2
  2355   0006BC  EC05  F005         	call	_LCD_CMD
  2356                           
  2357                           ;LCD.c: 22:   LCD_CMD(0x02);
  2358   0006C0  0E02               	movlw	2
  2359   0006C2  EC05  F005         	call	_LCD_CMD
  2360                           
  2361                           ;LCD.c: 23:   LCD_CMD(0x08);
  2362   0006C6  0E08               	movlw	8
  2363   0006C8  EC05  F005         	call	_LCD_CMD
  2364                           
  2365                           ;LCD.c: 24:   LCD_CMD(0x00);
  2366   0006CC  0E00               	movlw	0
  2367   0006CE  EC05  F005         	call	_LCD_CMD
  2368                           
  2369                           ;LCD.c: 25:   LCD_CMD(0x0C);
  2370   0006D2  0E0C               	movlw	12
  2371   0006D4  EC05  F005         	call	_LCD_CMD
  2372                           
  2373                           ;LCD.c: 26:   LCD_CMD(0x00);
  2374   0006D8  0E00               	movlw	0
  2375   0006DA  EC05  F005         	call	_LCD_CMD
  2376                           
  2377                           ;LCD.c: 27:   LCD_CMD(0x06);
  2378   0006DE  0E06               	movlw	6
  2379   0006E0  EC05  F005         	call	_LCD_CMD
  2380   0006E4  0012               	return		;funcret
  2381   0006E6                     __end_of_LCD_Init:
  2382                           	callstack 0
  2383                           
  2384 ;; *************** function _LCD_Clear *****************
  2385 ;; Defined at:
  2386 ;;		line 30 in file "LCD.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;		None
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, status,2, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2400 ;;      Params:         0       0       0       0
  2401 ;;      Locals:         0       0       0       0
  2402 ;;      Temps:          0       0       0       0
  2403 ;;      Totals:         0       0       0       0
  2404 ;;Total ram usage:        0 bytes
  2405 ;; Hardware stack levels used: 1
  2406 ;; Hardware stack levels required when called: 6
  2407 ;; This function calls:
  2408 ;;		_LCD_CMD
  2409 ;; This function is called by:
  2410 ;;		_FSM_begin
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text25
  2415   000A88                     __ptext25:
  2416                           	callstack 0
  2417   000A88                     _LCD_Clear:
  2418                           	callstack 23
  2419   000A88                     
  2420                           ;LCD.c: 32:   LCD_CMD(0);
  2421   000A88  0E00               	movlw	0
  2422   000A8A  EC05  F005         	call	_LCD_CMD
  2423                           
  2424                           ;LCD.c: 33:   LCD_CMD(1);
  2425   000A8E  0E01               	movlw	1
  2426   000A90  EC05  F005         	call	_LCD_CMD
  2427   000A94  0012               	return		;funcret
  2428   000A96                     __end_of_LCD_Clear:
  2429                           	callstack 0
  2430                           
  2431 ;; *************** function _LCD_CMD *****************
  2432 ;; Defined at:
  2433 ;;		line 49 in file "LCD.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  CMD             1    wreg     unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  CMD             1   15[COMRAM] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, status,2, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2447 ;;      Params:         0       0       0       0
  2448 ;;      Locals:         1       0       0       0
  2449 ;;      Temps:          0       0       0       0
  2450 ;;      Totals:         1       0       0       0
  2451 ;;Total ram usage:        1 bytes
  2452 ;; Hardware stack levels used: 1
  2453 ;; Hardware stack levels required when called: 5
  2454 ;; This function calls:
  2455 ;;		_LCD_DATA
  2456 ;; This function is called by:
  2457 ;;		_LCD_Init
  2458 ;;		_LCD_Clear
  2459 ;;		_LCD_Set_Cursor
  2460 ;;		_LCD_SL
  2461 ;;		_LCD_SR
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text26
  2466   000A0A                     __ptext26:
  2467                           	callstack 0
  2468   000A0A                     _LCD_CMD:
  2469                           	callstack 23
  2470                           
  2471                           ;incstack = 0
  2472                           ;LCD_CMD@CMD stored from wreg
  2473   000A0A  6E10               	movwf	LCD_CMD@CMD^0,c
  2474   000A0C                     
  2475                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:   PORTBbits.RB5 = 0;
  2476   000A0C  9A81               	bcf	129,5,c	;volatile
  2477   000A0E                     
  2478                           ;LCD.c: 54:   LCD_DATA(CMD);
  2479   000A0E  5010               	movf	LCD_CMD@CMD^0,w,c
  2480   000A10  ECD3  F003         	call	_LCD_DATA
  2481   000A14                     
  2482                           ;LCD.c: 56:   PORTBbits.RB4 = 1;
  2483   000A14  8881               	bsf	129,4,c	;volatile
  2484   000A16                     
  2485                           ;LCD.c: 57:   _delay((unsigned long)((250)*(8000000/4000000.0)));
  2486   000A16  0EA6               	movlw	166
  2487   000A18                     u697:
  2488   000A18  2EE8               	decfsz	wreg,f,c
  2489   000A1A  D7FE               	bra	u697
  2490   000A1C  D000               	nop2	
  2491   000A1E                     
  2492                           ;LCD.c: 58:   PORTBbits.RB4 = 0;
  2493   000A1E  9881               	bcf	129,4,c	;volatile
  2494   000A20  0012               	return		;funcret
  2495   000A22                     __end_of_LCD_CMD:
  2496                           	callstack 0
  2497                           
  2498 ;; *************** function _LCD_DATA *****************
  2499 ;; Defined at:
  2500 ;;		line 61 in file "LCD.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  Data            1    wreg     unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  Data            1   14[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2514 ;;      Params:         0       0       0       0
  2515 ;;      Locals:         1       0       0       0
  2516 ;;      Temps:          0       0       0       0
  2517 ;;      Totals:         1       0       0       0
  2518 ;;Total ram usage:        1 bytes
  2519 ;; Hardware stack levels used: 1
  2520 ;; Hardware stack levels required when called: 4
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_LCD_Init
  2525 ;;		_LCD_CMD
  2526 ;;		_LCD_Write_Char
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text27
  2531   0007A6                     __ptext27:
  2532                           	callstack 0
  2533   0007A6                     _LCD_DATA:
  2534                           	callstack 23
  2535                           
  2536                           ;incstack = 0
  2537                           ;LCD_DATA@Data stored from wreg
  2538   0007A6  6E0F               	movwf	LCD_DATA@Data^0,c
  2539   0007A8                     
  2540                           ;LCD.c: 61: void LCD_DATA(unsigned char Data);LCD.c: 62: {;LCD.c: 63:   if(Data & 1)
  2541   0007A8  A00F               	btfss	LCD_DATA@Data^0,0,c
  2542   0007AA  EFD9  F003         	goto	u21
  2543   0007AE  EFDB  F003         	goto	u20
  2544   0007B2                     u21:
  2545   0007B2  EFDE  F003         	goto	l265
  2546   0007B6                     u20:
  2547   0007B6                     
  2548                           ;LCD.c: 64:     PORTBbits.RB0 = 1;
  2549   0007B6  8081               	bsf	129,0,c	;volatile
  2550   0007B8  EFDF  F003         	goto	l975
  2551   0007BC                     l265:
  2552                           
  2553                           ;LCD.c: 66:     PORTBbits.RB0 = 0;
  2554   0007BC  9081               	bcf	129,0,c	;volatile
  2555   0007BE                     l975:
  2556                           
  2557                           ;LCD.c: 67:   if(Data & 2)
  2558   0007BE  A20F               	btfss	LCD_DATA@Data^0,1,c
  2559   0007C0  EFE4  F003         	goto	u31
  2560   0007C4  EFE6  F003         	goto	u30
  2561   0007C8                     u31:
  2562   0007C8  EFE9  F003         	goto	l267
  2563   0007CC                     u30:
  2564   0007CC                     
  2565                           ;LCD.c: 68:     PORTBbits.RB1 = 1;
  2566   0007CC  8281               	bsf	129,1,c	;volatile
  2567   0007CE  EFEA  F003         	goto	l979
  2568   0007D2                     l267:
  2569                           
  2570                           ;LCD.c: 70:     PORTBbits.RB1 = 0;
  2571   0007D2  9281               	bcf	129,1,c	;volatile
  2572   0007D4                     l979:
  2573                           
  2574                           ;LCD.c: 71:   if(Data & 4)
  2575   0007D4  A40F               	btfss	LCD_DATA@Data^0,2,c
  2576   0007D6  EFEF  F003         	goto	u41
  2577   0007DA  EFF1  F003         	goto	u40
  2578   0007DE                     u41:
  2579   0007DE  EFF4  F003         	goto	l269
  2580   0007E2                     u40:
  2581   0007E2                     
  2582                           ;LCD.c: 72:     PORTBbits.RB2 = 1;
  2583   0007E2  8481               	bsf	129,2,c	;volatile
  2584   0007E4  EFF5  F003         	goto	l983
  2585   0007E8                     l269:
  2586                           
  2587                           ;LCD.c: 74:     PORTBbits.RB2 = 0;
  2588   0007E8  9481               	bcf	129,2,c	;volatile
  2589   0007EA                     l983:
  2590                           
  2591                           ;LCD.c: 75:   if(Data & 8)
  2592   0007EA  A60F               	btfss	LCD_DATA@Data^0,3,c
  2593   0007EC  EFFA  F003         	goto	u51
  2594   0007F0  EFFC  F003         	goto	u50
  2595   0007F4                     u51:
  2596   0007F4  EFFF  F003         	goto	l271
  2597   0007F8                     u50:
  2598   0007F8                     
  2599                           ;LCD.c: 76:     PORTBbits.RB3 = 1;
  2600   0007F8  8681               	bsf	129,3,c	;volatile
  2601   0007FA  EF00  F004         	goto	l273
  2602   0007FE                     l271:
  2603                           
  2604                           ;LCD.c: 78:     PORTBbits.RB3 = 0;
  2605   0007FE  9681               	bcf	129,3,c	;volatile
  2606   000800                     l273:
  2607   000800  0012               	return		;funcret
  2608   000802                     __end_of_LCD_DATA:
  2609                           	callstack 0
  2610                           
  2611 ;; *************** function _Callbacks_Init *****************
  2612 ;; Defined at:
  2613 ;;		line 9 in file "SystemCallbacks.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;  callback        1   14[COMRAM] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2627 ;;      Params:         0       0       0       0
  2628 ;;      Locals:         1       0       0       0
  2629 ;;      Temps:          0       0       0       0
  2630 ;;      Totals:         1       0       0       0
  2631 ;;Total ram usage:        1 bytes
  2632 ;; Hardware stack levels used: 1
  2633 ;; Hardware stack levels required when called: 4
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_FSM_begin
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text28
  2642   000858                     __ptext28:
  2643                           	callstack 0
  2644   000858                     _Callbacks_Init:
  2645                           	callstack 25
  2646   000858                     
  2647                           ;SystemCallbacks.c: 11:     for(U8 callback=0; callback<(5); callback++)
  2648   000858  0E00               	movlw	0
  2649   00085A  6E0F               	movwf	Callbacks_Init@callback^0,c
  2650   00085C                     l1379:
  2651                           
  2652                           ;SystemCallbacks.c: 12:     {;SystemCallbacks.c: 13:         registered_callbacks[callba
      +                          ck].callback = ((void*)0);
  2653   00085C  500F               	movf	Callbacks_Init@callback^0,w,c
  2654   00085E  0D08               	mullw	8
  2655   000860  0E62               	movlw	low (_registered_callbacks+2)
  2656   000862  24F3               	addwf	243,w,c
  2657   000864  6ED9               	movwf	fsr2l,c
  2658   000866  0E00               	movlw	high (_registered_callbacks+2)
  2659   000868  20F4               	addwfc	prodh,w,c
  2660   00086A  6EDA               	movwf	fsr2h,c
  2661   00086C  0E00               	movlw	0
  2662   00086E  6EDE               	movwf	postinc2,c
  2663   000870  0E00               	movlw	0
  2664   000872  6EDD               	movwf	postdec2,c
  2665                           
  2666                           ;SystemCallbacks.c: 14:         registered_callbacks[callback].count = 0;
  2667   000874  500F               	movf	Callbacks_Init@callback^0,w,c
  2668   000876  0D08               	mullw	8
  2669   000878  0E65               	movlw	low (_registered_callbacks+5)
  2670   00087A  24F3               	addwf	243,w,c
  2671   00087C  6ED9               	movwf	fsr2l,c
  2672   00087E  0E00               	movlw	high (_registered_callbacks+5)
  2673   000880  20F4               	addwfc	prodh,w,c
  2674   000882  6EDA               	movwf	fsr2h,c
  2675   000884  0E00               	movlw	0
  2676   000886  6EDE               	movwf	postinc2,c
  2677   000888  0E00               	movlw	0
  2678   00088A  6EDD               	movwf	postdec2,c
  2679   00088C                     
  2680                           ;SystemCallbacks.c: 15:         callback_count = 0;
  2681   00088C  0E00               	movlw	0
  2682   00088E  6E43               	movwf	_callback_count^0,c
  2683   000890                     
  2684                           ;SystemCallbacks.c: 16:     }
  2685   000890  2A0F               	incf	Callbacks_Init@callback^0,f,c
  2686   000892  0E04               	movlw	4
  2687   000894  640F               	cpfsgt	Callbacks_Init@callback^0,c
  2688   000896  EF4F  F004         	goto	u381
  2689   00089A  EF51  F004         	goto	u380
  2690   00089E                     u381:
  2691   00089E  EF2E  F004         	goto	l1379
  2692   0008A2                     u380:
  2693   0008A2  0012               	return		;funcret
  2694   0008A4                     __end_of_Callbacks_Init:
  2695                           	callstack 0
  2696                           
  2697 ;; *************** function _timer_overflow_isr *****************
  2698 ;; Defined at:
  2699 ;;		line 10 in file "SystemInterrupts.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;		None
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;		None
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2713 ;;      Params:         0       0       0       0
  2714 ;;      Locals:         0       0       0       0
  2715 ;;      Temps:          8       0       0       0
  2716 ;;      Totals:         8       0       0       0
  2717 ;;Total ram usage:        8 bytes
  2718 ;; Hardware stack levels used: 1
  2719 ;; Hardware stack levels required when called: 3
  2720 ;; This function calls:
  2721 ;;		_Callbacks_Manager
  2722 ;; This function is called by:
  2723 ;;		Interrupt level 2
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	intcode
  2728   000008                     __pintcode:
  2729                           	callstack 0
  2730   000008                     _timer_overflow_isr:
  2731                           	callstack 23
  2732                           
  2733                           ;incstack = 0
  2734   000008  8245               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2735   00000A  CFFA F007          	movff	pclath,??_timer_overflow_isr
  2736   00000E  CFFB F008          	movff	pclatu,??_timer_overflow_isr+1
  2737   000012  CFE1 F009          	movff	fsr1l,??_timer_overflow_isr+2
  2738   000016  CFE2 F00A          	movff	fsr1h,??_timer_overflow_isr+3
  2739   00001A  CFD9 F00B          	movff	fsr2l,??_timer_overflow_isr+4
  2740   00001E  CFDA F00C          	movff	fsr2h,??_timer_overflow_isr+5
  2741   000022  CFF3 F00D          	movff	prodl,??_timer_overflow_isr+6
  2742   000026  CFF4 F00E          	movff	prodh,??_timer_overflow_isr+7
  2743   00002A                     
  2744                           ;SystemInterrupts.c: 13:     INTCONbits.GIEH = 0;
  2745   00002A  9EF2               	bcf	242,7,c	;volatile
  2746                           
  2747                           ;SystemInterrupts.c: 14:     INTCONbits.GIEL = 1;
  2748   00002C  8CF2               	bsf	242,6,c	;volatile
  2749   00002E                     
  2750                           ;SystemInterrupts.c: 28:     if(TMR0L < (0x7C))
  2751   00002E  0E7C               	movlw	124
  2752   000030  60D6               	cpfslt	214,c	;volatile
  2753   000032  EF1D  F000         	goto	i2u55_41
  2754   000036  EF1F  F000         	goto	i2u55_40
  2755   00003A                     i2u55_41:
  2756   00003A  EF21  F000         	goto	i2l1551
  2757   00003E                     i2u55_40:
  2758   00003E                     
  2759                           ;SystemInterrupts.c: 29:     {;SystemInterrupts.c: 30:         TMR0L = (0x7C);
  2760   00003E  0E7C               	movlw	124
  2761   000040  6ED6               	movwf	214,c	;volatile
  2762   000042                     i2l1551:
  2763                           
  2764                           ;SystemInterrupts.c: 32:     if(TMR0H < (0xE1))
  2765   000042  0EE1               	movlw	225
  2766   000044  60D7               	cpfslt	215,c	;volatile
  2767   000046  EF27  F000         	goto	i2u56_41
  2768   00004A  EF29  F000         	goto	i2u56_40
  2769   00004E                     i2u56_41:
  2770   00004E  EF2B  F000         	goto	i2l1555
  2771   000052                     i2u56_40:
  2772   000052                     
  2773                           ;SystemInterrupts.c: 33:     {;SystemInterrupts.c: 34:         TMR0H = (0xE1);
  2774   000052  0EE1               	movlw	225
  2775   000054  6ED7               	movwf	215,c	;volatile
  2776   000056                     i2l1555:
  2777                           
  2778                           ;SystemInterrupts.c: 38:     if(INTCONbits.TMR0IF)
  2779   000056  A4F2               	btfss	242,2,c	;volatile
  2780   000058  EF30  F000         	goto	i2u57_41
  2781   00005C  EF32  F000         	goto	i2u57_40
  2782   000060                     i2u57_41:
  2783   000060  EF35  F000         	goto	i2l1561
  2784   000064                     i2u57_40:
  2785   000064                     
  2786                           ;SystemInterrupts.c: 39:     {;SystemInterrupts.c: 43:         Callbacks_Manager();
  2787   000064  EC96  F002         	call	_Callbacks_Manager	;wreg free
  2788   000068                     
  2789                           ;SystemInterrupts.c: 46:         INTCONbits.TMR0IF = 0;
  2790   000068  94F2               	bcf	242,2,c	;volatile
  2791   00006A                     i2l1561:
  2792                           
  2793                           ;SystemInterrupts.c: 55:     INTCONbits.GIEH = 1;
  2794   00006A  8EF2               	bsf	242,7,c	;volatile
  2795   00006C                     
  2796                           ;SystemInterrupts.c: 56:     INTCONbits.GIEL = 1;
  2797   00006C  8CF2               	bsf	242,6,c	;volatile
  2798   00006E  C00E  FFF4         	movff	??_timer_overflow_isr+7,prodh
  2799   000072  C00D  FFF3         	movff	??_timer_overflow_isr+6,prodl
  2800   000076  C00C  FFDA         	movff	??_timer_overflow_isr+5,fsr2h
  2801   00007A  C00B  FFD9         	movff	??_timer_overflow_isr+4,fsr2l
  2802   00007E  C00A  FFE2         	movff	??_timer_overflow_isr+3,fsr1h
  2803   000082  C009  FFE1         	movff	??_timer_overflow_isr+2,fsr1l
  2804   000086  C008  FFFB         	movff	??_timer_overflow_isr+1,pclatu
  2805   00008A  C007  FFFA         	movff	??_timer_overflow_isr,pclath
  2806   00008E  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2807   000090  0011               	retfie		f
  2808   000092                     __end_of_timer_overflow_isr:
  2809                           	callstack 0
  2810                           
  2811 ;; *************** function _Callbacks_Manager *****************
  2812 ;; Defined at:
  2813 ;;		line 24 in file "SystemCallbacks.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  callbacks       1    5[COMRAM] unsigned char 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2827 ;;      Params:         0       0       0       0
  2828 ;;      Locals:         1       0       0       0
  2829 ;;      Temps:          4       0       0       0
  2830 ;;      Totals:         5       0       0       0
  2831 ;;Total ram usage:        5 bytes
  2832 ;; Hardware stack levels used: 1
  2833 ;; Hardware stack levels required when called: 2
  2834 ;; This function calls:
  2835 ;;		_Check_Moisture_cb
  2836 ;;		_Watering_Done_cb
  2837 ;; This function is called by:
  2838 ;;		_timer_overflow_isr
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           	psect	text30
  2843   00052C                     __ptext30:
  2844                           	callstack 0
  2845   00052C                     _Callbacks_Manager:
  2846                           	callstack 23
  2847   00052C                     
  2848                           ;SystemCallbacks.c: 26:     for (U8 callbacks = 0; callbacks < (5); callbacks++)
  2849   00052C  0E00               	movlw	0
  2850   00052E  6E06               	movwf	Callbacks_Manager@callbacks^0,c
  2851   000530                     i2l1511:
  2852                           
  2853                           ;SystemCallbacks.c: 27:     {;SystemCallbacks.c: 28:         (registered_callbacks[callb
      +                          acks].count)++;
  2854   000530  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  2855   000532  0D08               	mullw	8
  2856   000534  0E65               	movlw	low (_registered_callbacks+5)
  2857   000536  24F3               	addwf	243,w,c
  2858   000538  6ED9               	movwf	fsr2l,c
  2859   00053A  0E00               	movlw	high (_registered_callbacks+5)
  2860   00053C  20F4               	addwfc	prodh,w,c
  2861   00053E  6EDA               	movwf	fsr2h,c
  2862   000540  2ADE               	incf	postinc2,f,c
  2863   000542  0E00               	movlw	0
  2864   000544  22DD               	addwfc	postdec2,f,c
  2865   000546                     
  2866                           ;SystemCallbacks.c: 29:         if(registered_callbacks[callbacks].count >=
  2867   000546  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  2868   000548  0D08               	mullw	8
  2869   00054A  0E60               	movlw	low _registered_callbacks
  2870   00054C  24F3               	addwf	243,w,c
  2871   00054E  6ED9               	movwf	fsr2l,c
  2872   000550  0E00               	movlw	high _registered_callbacks
  2873   000552  20F4               	addwfc	prodh,w,c
  2874   000554  6EDA               	movwf	fsr2h,c
  2875   000556  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  2876   000558  0D08               	mullw	8
  2877   00055A  0E65               	movlw	low (_registered_callbacks+5)
  2878   00055C  24F3               	addwf	243,w,c
  2879   00055E  6EE1               	movwf	fsr1l,c
  2880   000560  0E00               	movlw	high (_registered_callbacks+5)
  2881   000562  20F4               	addwfc	prodh,w,c
  2882   000564  6EE2               	movwf	fsr1h,c
  2883   000566  50DE               	movf	postinc2,w,c
  2884   000568  5CE6               	subwf	postinc1,w,c
  2885   00056A  50DE               	movf	postinc2,w,c
  2886   00056C  58E6               	subwfb	postinc1,w,c
  2887   00056E  A0D8               	btfss	status,0,c
  2888   000570  EFBC  F002         	goto	i2u51_41
  2889   000574  EFBE  F002         	goto	i2u51_40
  2890   000578                     i2u51_41:
  2891   000578  EFF0  F002         	goto	i2l1521
  2892   00057C                     i2u51_40:
  2893   00057C                     
  2894                           ;SystemCallbacks.c: 31:         {;SystemCallbacks.c: 32:             if(registered_callb
      +                          acks[callbacks].callback != ((void*)0))
  2895   00057C  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  2896   00057E  0D08               	mullw	8
  2897   000580  0E62               	movlw	low (_registered_callbacks+2)
  2898   000582  24F3               	addwf	243,w,c
  2899   000584  6ED9               	movwf	fsr2l,c
  2900   000586  0E00               	movlw	high (_registered_callbacks+2)
  2901   000588  20F4               	addwfc	prodh,w,c
  2902   00058A  6EDA               	movwf	fsr2h,c
  2903   00058C  50DE               	movf	postinc2,w,c
  2904   00058E  10DE               	iorwf	postinc2,w,c
  2905   000590  B4D8               	btfsc	status,2,c
  2906   000592  EFCD  F002         	goto	i2u52_41
  2907   000596  EFCF  F002         	goto	i2u52_40
  2908   00059A                     i2u52_41:
  2909   00059A  EFF0  F002         	goto	i2l1521
  2910   00059E                     i2u52_40:
  2911   00059E                     
  2912                           ;SystemCallbacks.c: 33:             {;SystemCallbacks.c: 34:                 registered_
      +                          callbacks[callbacks].count = 0;
  2913   00059E  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  2914   0005A0  0D08               	mullw	8
  2915   0005A2  0E65               	movlw	low (_registered_callbacks+5)
  2916   0005A4  24F3               	addwf	243,w,c
  2917   0005A6  6ED9               	movwf	fsr2l,c
  2918   0005A8  0E00               	movlw	high (_registered_callbacks+5)
  2919   0005AA  20F4               	addwfc	prodh,w,c
  2920   0005AC  6EDA               	movwf	fsr2h,c
  2921   0005AE  0E00               	movlw	0
  2922   0005B0  6EDE               	movwf	postinc2,c
  2923   0005B2  0E00               	movlw	0
  2924   0005B4  6EDD               	movwf	postdec2,c
  2925   0005B6                     
  2926                           ;SystemCallbacks.c: 35:                 registered_callbacks[callbacks].callback();
  2927   0005B6  5006               	movf	Callbacks_Manager@callbacks^0,w,c
  2928   0005B8  0D08               	mullw	8
  2929   0005BA  0E62               	movlw	low (_registered_callbacks+2)
  2930   0005BC  24F3               	addwf	243,w,c
  2931   0005BE  6ED9               	movwf	fsr2l,c
  2932   0005C0  0E00               	movlw	high (_registered_callbacks+2)
  2933   0005C2  20F4               	addwfc	prodh,w,c
  2934   0005C4  6EDA               	movwf	fsr2h,c
  2935   0005C6  D802               	call	i2u53_48
  2936   0005C8  EFF0  F002         	goto	i2u53_49
  2937   0005CC                     i2u53_48:
  2938   0005CC  0005               	push	
  2939   0005CE  6EFA               	movwf	pclath,c
  2940   0005D0  50DE               	movf	postinc2,w,c
  2941   0005D2  6EFD               	movwf	tosl,c
  2942   0005D4  50DE               	movf	postinc2,w,c
  2943   0005D6  6EFE               	movwf	tosh,c
  2944   0005D8  50F8               	movf	tblptru,w,c
  2945   0005DA  6EFF               	movwf	tosu,c
  2946   0005DC  50FA               	movf	pclath,w,c
  2947   0005DE  0012               	return		;indir
  2948   0005E0                     i2u53_49:
  2949   0005E0                     i2l1521:
  2950                           
  2951                           ;SystemCallbacks.c: 38:     }
  2952   0005E0  2A06               	incf	Callbacks_Manager@callbacks^0,f,c
  2953   0005E2  0E04               	movlw	4
  2954   0005E4  6406               	cpfsgt	Callbacks_Manager@callbacks^0,c
  2955   0005E6  EFF7  F002         	goto	i2u54_41
  2956   0005EA  EFF9  F002         	goto	i2u54_40
  2957   0005EE                     i2u54_41:
  2958   0005EE  EF98  F002         	goto	i2l1511
  2959   0005F2                     i2u54_40:
  2960   0005F2  0012               	return		;funcret
  2961   0005F4                     __end_of_Callbacks_Manager:
  2962                           	callstack 0
  2963                           
  2964 ;; *************** function _Check_Moisture_cb *****************
  2965 ;; Defined at:
  2966 ;;		line 15 in file "System_FSM.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;		None
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      void 
  2973 ;; Registers used:
  2974 ;;		wreg, status,2, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2980 ;;      Params:         0       0       0       0
  2981 ;;      Locals:         0       0       0       0
  2982 ;;      Temps:          0       0       0       0
  2983 ;;      Totals:         0       0       0       0
  2984 ;;Total ram usage:        0 bytes
  2985 ;; Hardware stack levels used: 1
  2986 ;; Hardware stack levels required when called: 1
  2987 ;; This function calls:
  2988 ;;		i2_get_current_state
  2989 ;;		i2_set_state
  2990 ;; This function is called by:
  2991 ;;		_Callbacks_Manager
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text31
  2996   0009D2                     __ptext31:
  2997                           	callstack 0
  2998   0009D2                     _Check_Moisture_cb:
  2999                           	callstack 23
  3000   0009D2                     
  3001                           ;System_FSM.c: 20:     if(get_current_state() != WATER_PLANTS)
  3002   0009D2  EC70  F005         	call	i2_get_current_state	;wreg free
  3003   0009D6  0A02               	xorlw	2
  3004   0009D8  B4D8               	btfsc	status,2,c
  3005   0009DA  EFF1  F004         	goto	i2u36_41
  3006   0009DE  EFF3  F004         	goto	i2u36_40
  3007   0009E2                     i2u36_41:
  3008   0009E2  EFF6  F004         	goto	i2l140
  3009   0009E6                     i2u36_40:
  3010   0009E6                     
  3011                           ;System_FSM.c: 21:     {;System_FSM.c: 22:       set_state(CHECK_MOISTURE);
  3012   0009E6  0E03               	movlw	3
  3013   0009E8  EC5E  F005         	call	i2_set_state
  3014   0009EC                     i2l140:
  3015   0009EC  0012               	return		;funcret
  3016   0009EE                     __end_of_Check_Moisture_cb:
  3017                           	callstack 0
  3018                           
  3019 ;; *************** function _Watering_Done_cb *****************
  3020 ;; Defined at:
  3021 ;;		line 26 in file "System_FSM.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;		None
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;		None
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3035 ;;      Params:         0       0       0       0
  3036 ;;      Locals:         0       0       0       0
  3037 ;;      Temps:          0       0       0       0
  3038 ;;      Totals:         0       0       0       0
  3039 ;;Total ram usage:        0 bytes
  3040 ;; Hardware stack levels used: 1
  3041 ;; Hardware stack levels required when called: 1
  3042 ;; This function calls:
  3043 ;;		i2_get_current_state
  3044 ;;		i2_set_state
  3045 ;; This function is called by:
  3046 ;;		_Callbacks_Manager
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text32
  3051   0009EE                     __ptext32:
  3052                           	callstack 0
  3053   0009EE                     _Watering_Done_cb:
  3054                           	callstack 23
  3055   0009EE                     
  3056                           ;System_FSM.c: 29:     if(get_current_state() == WATER_PLANTS)
  3057   0009EE  EC70  F005         	call	i2_get_current_state	;wreg free
  3058   0009F2  0A02               	xorlw	2
  3059   0009F4  A4D8               	btfss	status,2,c
  3060   0009F6  EFFF  F004         	goto	i2u37_41
  3061   0009FA  EF01  F005         	goto	i2u37_40
  3062   0009FE                     i2u37_41:
  3063   0009FE  EF04  F005         	goto	i2l144
  3064   000A02                     i2u37_40:
  3065   000A02                     
  3066                           ;System_FSM.c: 30:     {;System_FSM.c: 31:         set_state(IDLE_STATE);
  3067   000A02  0E01               	movlw	1
  3068   000A04  EC5E  F005         	call	i2_set_state
  3069   000A08                     i2l144:
  3070   000A08  0012               	return		;funcret
  3071   000A0A                     __end_of_Watering_Done_cb:
  3072                           	callstack 0
  3073                           
  3074 ;; *************** function i2_set_state *****************
  3075 ;; Defined at:
  3076 ;;		line 9 in file "FSM_states.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  state_to_set    1    wreg     enum E2
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  state_to_set    1    0[COMRAM] enum E2
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  1    wreg      void 
  3083 ;; Registers used:
  3084 ;;		wreg
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3090 ;;      Params:         0       0       0       0
  3091 ;;      Locals:         1       0       0       0
  3092 ;;      Temps:          0       0       0       0
  3093 ;;      Totals:         1       0       0       0
  3094 ;;Total ram usage:        1 bytes
  3095 ;; Hardware stack levels used: 1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_Check_Moisture_cb
  3100 ;;		_Watering_Done_cb
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           	psect	text33
  3105   000ABC                     __ptext33:
  3106                           	callstack 0
  3107   000ABC                     i2_set_state:
  3108                           	callstack 23
  3109                           
  3110                           ;incstack = 0
  3111                           ;i2set_state@state_to_set stored from wreg
  3112   000ABC  6E01               	movwf	i2set_state@state_to_set^0,c
  3113   000ABE                     
  3114                           ;FSM_states.c: 9: void set_state(STATES state_to_set);FSM_states.c: 10: {;FSM_states.c: 
      +                          11:     FSM_state = state_to_set;
  3115   000ABE  C001  F044         	movff	i2set_state@state_to_set,_FSM_state
  3116   000AC2  0012               	return		;funcret
  3117   000AC4                     __end_ofi2_set_state:
  3118                           	callstack 0
  3119                           
  3120 ;; *************** function i2_get_current_state *****************
  3121 ;; Defined at:
  3122 ;;		line 5 in file "FSM_states.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;		None
  3125 ;; Auto vars:     Size  Location     Type
  3126 ;;		None
  3127 ;; Return value:  Size  Location     Type
  3128 ;;                  1    wreg      enum E2
  3129 ;; Registers used:
  3130 ;;		wreg, status,2
  3131 ;; Tracked objects:
  3132 ;;		On entry : 0/0
  3133 ;;		On exit  : 0/0
  3134 ;;		Unchanged: 0/0
  3135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3136 ;;      Params:         0       0       0       0
  3137 ;;      Locals:         0       0       0       0
  3138 ;;      Temps:          0       0       0       0
  3139 ;;      Totals:         0       0       0       0
  3140 ;;Total ram usage:        0 bytes
  3141 ;; Hardware stack levels used: 1
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_Check_Moisture_cb
  3146 ;;		_Watering_Done_cb
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text34
  3151   000AE0                     __ptext34:
  3152                           	callstack 0
  3153   000AE0                     i2_get_current_state:
  3154                           	callstack 23
  3155   000AE0                     
  3156                           ;FSM_states.c: 7:     return FSM_state;
  3157   000AE0  5044               	movf	_FSM_state^0,w,c
  3158   000AE2  0012               	return		;funcret
  3159   000AE4                     __end_ofi2_get_current_state:
  3160                           	callstack 0
  3161                           
  3162                           	psect	text35
  3163   000000                     __ptext35:
  3164                           	callstack 0
  3165   000000                     
  3166                           	psect	rparam
  3167   000000                     
  3168                           	psect	temp
  3169   000045                     btemp:
  3170                           	callstack 0
  3171   000045                     	ds	1
  3172   000000                     int$flags	set	btemp
  3173   000000                     wtemp8	set	btemp+1
  3174   000000                     ttemp5	set	btemp+1
  3175   000000                     ttemp6	set	btemp+4
  3176   000000                     ttemp7	set	btemp+8
  3177                           
  3178                           	psect	idloc
  3179                           
  3180                           ;Config register IDLOC0 @ 0x200000
  3181                           ;	unspecified, using default values
  3182   200000                     	org	2097152
  3183   200000  FF                 	db	255
  3184                           
  3185                           ;Config register IDLOC1 @ 0x200001
  3186                           ;	unspecified, using default values
  3187   200001                     	org	2097153
  3188   200001  FF                 	db	255
  3189                           
  3190                           ;Config register IDLOC2 @ 0x200002
  3191                           ;	unspecified, using default values
  3192   200002                     	org	2097154
  3193   200002  FF                 	db	255
  3194                           
  3195                           ;Config register IDLOC3 @ 0x200003
  3196                           ;	unspecified, using default values
  3197   200003                     	org	2097155
  3198   200003  FF                 	db	255
  3199                           
  3200                           ;Config register IDLOC4 @ 0x200004
  3201                           ;	unspecified, using default values
  3202   200004                     	org	2097156
  3203   200004  FF                 	db	255
  3204                           
  3205                           ;Config register IDLOC5 @ 0x200005
  3206                           ;	unspecified, using default values
  3207   200005                     	org	2097157
  3208   200005  FF                 	db	255
  3209                           
  3210                           ;Config register IDLOC6 @ 0x200006
  3211                           ;	unspecified, using default values
  3212   200006                     	org	2097158
  3213   200006  FF                 	db	255
  3214                           
  3215                           ;Config register IDLOC7 @ 0x200007
  3216                           ;	unspecified, using default values
  3217   200007                     	org	2097159
  3218   200007  FF                 	db	255
  3219                           
  3220                           	psect	config
  3221                           
  3222                           ; Padding undefined space
  3223   300000                     	org	3145728
  3224   300000  FF                 	db	255
  3225                           
  3226                           ;Config register CONFIG1H @ 0x300001
  3227                           ;	Oscillator Selection bits
  3228                           ;	OSC = IRCIO, Internal oscillator block, port function on RA6 and port function on RA7
  3229                           ;	Fail-Safe Clock Monitor Enable bit
  3230                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  3231                           ;	Internal External Oscillator Switchover bit
  3232                           ;	IESO = ON, Internal External Switchover mode enabled
  3233   300001                     	org	3145729
  3234   300001  C8                 	db	200
  3235                           
  3236                           ;Config register CONFIG2L @ 0x300002
  3237                           ;	Power-up Timer Enable bit
  3238                           ;	PWRTEN = OFF, PWRT disabled
  3239                           ;	Brown-out Reset Enable bits
  3240                           ;	BOREN = OFF, Brown-out Reset disabled
  3241                           ;	Brown Out Reset Voltage bits
  3242                           ;	BORV = 0x3, unprogrammed default
  3243   300002                     	org	3145730
  3244   300002  0D                 	db	13
  3245                           
  3246                           ;Config register CONFIG2H @ 0x300003
  3247                           ;	Watchdog Timer Enable bit
  3248                           ;	WDTEN = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3249                           ;	Watchdog Timer Postscale Select bits
  3250                           ;	WDPS = 32768, 1:32768
  3251                           ;	Watchdog Timer Window Enable bit
  3252                           ;	WINEN = OFF, WDT window disabled
  3253   300003                     	org	3145731
  3254   300003  3E                 	db	62
  3255                           
  3256                           ;Config register CONFIG3L @ 0x300004
  3257                           ;	PWM output pins Reset state control
  3258                           ;	PWMPIN = OFF, PWM outputs disabled upon Reset (default)
  3259                           ;	Low-Side Transistors Polarity
  3260                           ;	LPOL = HIGH, PWM0, 2, 4 and 6 are active-high
  3261                           ;	High-Side Transistors Polarity
  3262                           ;	HPOL = HIGH, PWM1, 3, 5 and 7 are active-high
  3263                           ;	Timer1 Oscillator MUX
  3264                           ;	T1OSCMX = ON, Low-power Timer1 operation when microcontroller is in Sleep mode
  3265   300004                     	org	3145732
  3266   300004  3C                 	db	60
  3267                           
  3268                           ;Config register CONFIG3H @ 0x300005
  3269                           ;	FLTA MUX bit
  3270                           ;	FLTAMX = RC1, FLTA input is multiplexed with RC1
  3271                           ;	SSP I/O MUX bit
  3272                           ;	SSPMX = RC7, SCK/SCL clocks and SDA/SDI data are multiplexed with RC5 and RC4, respect
      +                          ively. SDO output is multiplexed with RC7.
  3273                           ;	PWM4 MUX bit
  3274                           ;	PWM4MX = RB5, PWM4 output is multiplexed with RB5
  3275                           ;	TMR0/T5CKI External clock MUX bit
  3276                           ;	EXCLKMX = RC3, TMR0/T5CKI external clock input is multiplexed with RC3
  3277                           ;	MCLR Pin Enable bit
  3278                           ;	MCLRE = ON, Enabled
  3279   300005                     	org	3145733
  3280   300005  9D                 	db	157
  3281                           
  3282                           ;Config register CONFIG4L @ 0x300006
  3283                           ;	Stack Full/Underflow Reset Enable bit
  3284                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3285                           ;	Low-Voltage ICSP Enable bit
  3286                           ;	LVP = OFF, Low-voltage ICSP disabled
  3287                           ;	Background Debugger Enable bit
  3288                           ;	DEBUG = 0x1, unprogrammed default
  3289   300006                     	org	3145734
  3290   300006  81                 	db	129
  3291                           
  3292                           ; Padding undefined space
  3293   300007                     	org	3145735
  3294   300007  FF                 	db	255
  3295                           
  3296                           ;Config register CONFIG5L @ 0x300008
  3297                           ;	Code Protection bit
  3298                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
  3299                           ;	Code Protection bit
  3300                           ;	CP1 = OFF, Block 1 (001000-001FFF) not code-protected
  3301   300008                     	org	3145736
  3302   300008  0F                 	db	15
  3303                           
  3304                           ;Config register CONFIG5H @ 0x300009
  3305                           ;	Boot Block Code Protection bit
  3306                           ;	CPB = OFF, Boot Block (000000-0001FFh) not code-protected
  3307                           ;	Data EEPROM Code Protection bit
  3308                           ;	CPD = OFF, Data EEPROM not code-protected
  3309   300009                     	org	3145737
  3310   300009  C0                 	db	192
  3311                           
  3312                           ;Config register CONFIG6L @ 0x30000A
  3313                           ;	Write Protection bit
  3314                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
  3315                           ;	Write Protection bit
  3316                           ;	WRT1 = OFF, Block 1 (001000-001FFF) not write-protected
  3317   30000A                     	org	3145738
  3318   30000A  0F                 	db	15
  3319                           
  3320                           ;Config register CONFIG6H @ 0x30000B
  3321                           ;	Configuration Register Write Protection bit
  3322                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3323                           ;	Boot Block Write Protection bit
  3324                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
  3325                           ;	Data EEPROM Write Protection bit
  3326                           ;	WRTD = OFF, Data EEPROM not write-protected
  3327   30000B                     	org	3145739
  3328   30000B  E0                 	db	224
  3329                           
  3330                           ;Config register CONFIG7L @ 0x30000C
  3331                           ;	Table Read Protection bit
  3332                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
  3333                           ;	Table Read Protection bit
  3334                           ;	EBTR1 = OFF, Block 1 (001000-001FFF) not protected from table reads executed in other 
      +                          blocks
  3335   30000C                     	org	3145740
  3336   30000C  0F                 	db	15
  3337                           
  3338                           ;Config register CONFIG7H @ 0x30000D
  3339                           ;	Boot Block Table Read Protection bit
  3340                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
  3341   30000D                     	org	3145741
  3342   30000D  40                 	db	64
  3343                           tosu	equ	0xFFF
  3344                           tosh	equ	0xFFE
  3345                           tosl	equ	0xFFD
  3346                           stkptr	equ	0xFFC
  3347                           pclatu	equ	0xFFB
  3348                           pclath	equ	0xFFA
  3349                           pcl	equ	0xFF9
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           indf0	equ	0xFEF
  3357                           postinc0	equ	0xFEE
  3358                           postdec0	equ	0xFED
  3359                           preinc0	equ	0xFEC
  3360                           plusw0	equ	0xFEB
  3361                           fsr0h	equ	0xFEA
  3362                           fsr0l	equ	0xFE9
  3363                           wreg	equ	0xFE8
  3364                           indf1	equ	0xFE7
  3365                           postinc1	equ	0xFE6
  3366                           postdec1	equ	0xFE5
  3367                           preinc1	equ	0xFE4
  3368                           plusw1	equ	0xFE3
  3369                           fsr1h	equ	0xFE2
  3370                           fsr1l	equ	0xFE1
  3371                           bsr	equ	0xFE0
  3372                           indf2	equ	0xFDF
  3373                           postinc2	equ	0xFDE
  3374                           postdec2	equ	0xFDD
  3375                           preinc2	equ	0xFDC
  3376                           plusw2	equ	0xFDB
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8

Data Sizes:
    Strings     90
    Constant    0
    Data        16
    BSS         47
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      68
    BANK0           160      0      40
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[19]), STR_4(CODE[20]), STR_3(CODE[15]), STR_2(CODE[19]), 
		 -> STR_1(CODE[17]), 

    Register_Callback@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Register_Callback@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    Reset_Counter@config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    Reset_Counter@config	PTR struct . size(2) Largest target is 8
		 -> FSM_begin@WateringDoneCB_Config(COMRAM[8]), FSM_begin@MoistureCB_Config(COMRAM[8]), 

    registered_callbacks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    WateringDoneCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2880.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    MoistureCB_Config.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    S633$callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 

    F2877.callback	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(NULL[0]), Watering_Done_cb(), Check_Moisture_cb(), 


Critical Paths under _main in COMRAM

    _main->_FSM_begin
    _FSM_begin->_LCD_Write_String
    _SMS_Set_State->_set_state
    _SMS_Read_Moisture_Value->_ADC_Read
    _Register_Callback->_Reset_Counter
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _timer_overflow_isr in COMRAM

    _timer_overflow_isr->_Callbacks_Manager
    _Watering_Done_cb->i2_set_state
    _Check_Moisture_cb->i2_set_state

Critical Paths under _main in BANK0

    None.

Critical Paths under _timer_overflow_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_overflow_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_overflow_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2265
                          _FSM_begin
                        _Timer0_init
                        _Timer0_stop
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _Timer0_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM_begin                                           20    20      0    2250
                                             24 COMRAM    20    20      0
                     _Callbacks_Init
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
                  _Register_Callback
            _SMS_Read_Moisture_Value
                      _SMS_Set_State
                           _SMS_init
                       _Timer0_start
       _checking_moisture_status_led
                  _get_current_state
                    _idle_status_led
                          _init_leds
                          _set_state
                _watering_status_led
 ---------------------------------------------------------------------------------
 (2) _watering_status_led                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_leds                                            2     2      0       0
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _idle_status_led                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_current_state                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _checking_moisture_status_led                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer0_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_init                                             0     0      0       0
                           _ADC_init
 ---------------------------------------------------------------------------------
 (3) _ADC_init                                             0     0      0       0
                           _ADC_stop
 ---------------------------------------------------------------------------------
 (4) _ADC_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SMS_Set_State                                        2     0      2     157
                                             15 COMRAM     2     0      2
                          _set_state
 ---------------------------------------------------------------------------------
 (1) _set_state                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SMS_Read_Moisture_Value                              4     2      2      23
                                             16 COMRAM     4     2      2
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             2     0      2       0
                                             14 COMRAM     2     0      2
                    _ADC_in_progress
                          _ADC_start
 ---------------------------------------------------------------------------------
 (4) _ADC_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_in_progress                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Register_Callback                                    4     2      2     338
                                             16 COMRAM     4     2      2
                      _Reset_Counter
 ---------------------------------------------------------------------------------
 (3) _Reset_Counter                                        2     0      2      98
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_String                                     6     4      2     590
                                             18 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Set_Cursor                                       5     4      1     725
                                             16 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             1     1      0     135
                                             16 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _LCD_CMD                                              1     1      0      75
                                             15 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (4) _LCD_DATA                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Callbacks_Init                                       1     1      0      90
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_overflow_isr                                   8     8      0     222
                                              6 COMRAM     8     8      0
                  _Callbacks_Manager
 ---------------------------------------------------------------------------------
 (6) _Callbacks_Manager                                    5     5      0     222
                                              1 COMRAM     5     5      0
                  _Check_Moisture_cb *
                   _Watering_Done_cb *
 ---------------------------------------------------------------------------------
 (7) _Watering_Done_cb                                     0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (7) _Check_Moisture_cb                                    0     0      0      22
                i2_get_current_state
                        i2_set_state
 ---------------------------------------------------------------------------------
 (8) i2_set_state                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_get_current_state                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM_begin
     _Callbacks_Init
     _LCD_Clear
       _LCD_CMD
         _LCD_DATA
     _LCD_Init
       _LCD_CMD
       _LCD_DATA
     _LCD_Set_Cursor
       _LCD_CMD
     _LCD_Write_String
       _LCD_Write_Char
         _LCD_DATA
     _Register_Callback
       _Reset_Counter
     _SMS_Read_Moisture_Value
       _ADC_Read
         _ADC_in_progress
         _ADC_start
     _SMS_Set_State
       _set_state
     _SMS_init
       _ADC_init
         _ADC_stop
     _Timer0_start
     _checking_moisture_status_led
     _get_current_state
     _idle_status_led
     _init_leds
     _set_state
     _watering_status_led
   _Timer0_init
   _Timer0_stop
   _set_state

 _timer_overflow_isr (ROOT)
   _Callbacks_Manager
     _Check_Moisture_cb *
       i2_get_current_state
       i2_set_state
     _Watering_Done_cb *
       i2_get_current_state
       i2_set_state

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      28       4       25.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      44       1       72.3%
BITBIGSFRlllll      21      0       0      19        0.0%
BITBIGSFRlhl        1E      0       0      15        0.0%
BITBIGSFRhhhl       19      0       0      10        0.0%
BITBIGSFRhhhh        D      0       0       9        0.0%
BITBIGSFRhhlll       B      0       0      13        0.0%
BITBIGSFRllllh       9      0       0      18        0.0%
BITBIGSFRlhh         7      0       0      14        0.0%
BITBIGSFRlllh        6      0       0      17        0.0%
BITBIGSFRllh         3      0       0      16        0.0%
BITBIGSFRhhllh       2      0       0      12        0.0%
BITBIGSFRhhlh        1      0       0      11        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6C      20        0.0%
DATA                 0      0      6C      22        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Mar 27 13:45:38 2023

                                  l22 0ADE                                    l33 09A4  
                                  l25 09D0                                    l34 09B4  
                                  l19 0ACE                                    l51 0AD2  
                                  l28 0A76                                    l45 0A36  
                                  l48 0ADA                                    l84 0AC8  
                                  l94 07A4                                    l87 0A4C  
                                  l99 0AD6                                    u10 0A74  
                                  u11 0A6E                                    u20 07B6  
                                  u21 07B2                                    u30 07CC  
                                  u31 07C8                                    u40 07E2  
                                  u16 0A76                                    u41 07DE  
                                  u50 07F8                                    u51 07F4  
                 __end_ofi2_set_state 0AC4                                   l102 0ABA  
                                 l211 0AA8                                   l214 0A9E  
                                 l208 0960                                   l217 0AB2  
                                 l250 06E4                                   l253 0A94  
                                 l165 052A                                   l174 08A2  
                                 l262 0A20                                   l271 07FE  
                                 _ADC 0041                                   l192 066C  
                                 l273 0800                                   l265 07BC  
                                 l281 08EA                                   l267 07D2  
                                 l187 0A62                                   l276 0716  
                                 l269 07E8                                   l278 0746  
                                 l287 0856                                   l971 07A8  
                                 l963 0ACA                                   l981 07E2  
                                 l973 07B6                                   l965 0ADC  
                                 l983 07EA                                   l975 07BE  
                                 l967 0A64                                   l991 09BE  
                                 l985 07F8                                   l977 07CC  
                                 l993 09C0                                   l979 07D4  
                                 l995 09C2                                   l987 09B6  
                                 l997 09C4                                   l989 09BA  
                                 l999 09C8                                   u400 0622  
                                 u320 09A4                                   u401 061E  
                                 u321 09A0                                   u410 063C  
                                 u330 075E                                   u411 0638  
                                 u331 075A                                   u340 077E  
                                 u500 04CC                                   u421 0656  
                                 u341 077A                                   u501 04C8  
                                 u430 06F8                                   u350 0794  
                                 u431 06F4                                   u351 0790  
                                 u440 0728                                   u441 0724  
                                 u450 0856                                   u451 0852  
                                 u380 08A2                                   u381 089E  
                                 u461 0372                                   u390 0604  
                                 u391 0600                                   u607 094C  
                                 u471 0384                                   u480 0438  
                                 u617 08C0                                   u481 0434  
                                 u490 0472                                   u627 08CA  
                                 u491 046E                                   u637 08DA  
                                 u647 08E4                                   u657 0682  
                                 u667 068E                                   u587 03E6  
                                 u677 06A0                                   u597 049E  
                                 u687 06B0                                   u697 0A18  
                                 prod 000FF3                                   tosl 000FFD  
                                 wreg 000FE8                       __end_of_LCD_CMD 0A22  
                      _LCD_Set_Cursor 06E6                                  l1001 09CA  
                                l1003 09CE                                  l1021 0A1E  
                                l1013 0A0C                                  l1015 0A0E  
                                l1031 08BE                                  l1023 08A6  
                                l1017 0A14                                  l1041 08D8  
                                l1033 08C6                                  l1025 08B2  
                                l1009 0AB6                                  l1121 095A  
                                l1019 0A16                                  l1131 0674  
                                l1043 08E0                                  l1035 08C8  
                                l1027 08B4                                  l1123 095C  
                                l1115 0932                                  l1141 06A8  
                                l1133 0676                                  l1045 08E2  
                                l1037 08D0                                  l1029 08BC  
                                l1053 0AD8                                  l1125 095E  
                                l1117 0942                                  l1143 06AE  
                                l1135 067C                                  l1127 066E  
                                l1039 08D6                                  l1055 0AC4  
                                l1119 0958                                  l1145 0A88  
                                l1137 068C                                  l1129 0672  
                                l1401 06E8                                  l1139 0694  
                                l1411 073A                                  l1403 06F8  
                                l1075 0AD4                                  l1171 0A96  
                                l1413 0740                                  l1405 070A  
                                l1421 082E                                  l1173 0AAA  
                                l1407 0710                                  l1415 0802  
                                l1335 098C                                  l1431 037A  
                                l1423 035C                                  l1175 0A22  
                                l1409 0728                                  l1417 080E  
                                l1337 0990                                  l1361 0794  
                                l1353 0748                                  l1169 0AA0  
                                l1441 03AC                                  l1433 038C  
                                l1425 0360                                  l1177 0A2E  
                                l1419 082A                                  l1339 0A4E  
                                l1347 0A38                                  l1363 079E  
                                l1355 075E                                  l1451 03DC  
                                l1443 03B0                                  l1435 0398  
                                l1427 0364                                  l1179 0AD0  
                                l1531 096E                                  l1381 088C  
                                l1373 0858                                  l1349 0A44  
                                l1357 0768                                  l1461 0410  
                                l1453 03F4                                  l1445 03BA  
                                l1437 03A4                                  l1429 0368  
                                l1541 097A                                  l1533 0970  
                                l1525 0962                                  l1383 0890  
                                l1391 0622                                  l1359 077E  
                                l1471 044A                                  l1463 0420  
                                l1455 03F8                                  l1447 03C6  
                                l1439 03A8                                  l1543 0980  
                                l1535 0972                                  l1527 0968  
                                l1385 0892                                  l1393 063C  
                                l1481 0484                                  l1473 045A  
                                l1465 0424                                  l1457 0402  
                                l1449 03D0                                  l1537 0976  
                                l1529 096C                                  l1379 085C  
                                l1395 065E                                  l1387 05F4  
                                l1491 04CC                                  l1483 0490  
                                l1475 045E                                  l1467 043C  
                                l1459 0406                                  l1539 0978  
                                l1397 066A                                  l1389 0604  
                                l1493 04D4                                  l1485 0494  
                                l1477 0476                                  l1469 0440  
                                l1495 04E4                                  l1487 04AA  
                                l1479 047A                                  l1569 0504  
                                l1489 04B6                                  l1499 04EE  
                 LCD_Write_String@str 0013                                  STR_1 033B  
                                STR_2 0315                                  STR_3 034C  
                                STR_4 0301                                  STR_5 0328  
                                _LATC 000F8B                                  _LATD 000F8C  
                                i2l99 0AE2                 __end_of_Reset_Counter 0A64  
                   ?_LCD_Write_String 0013                                  _main 0962  
                                fsr1h 000FE2                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  fsr2l 000FD9  
                                btemp 0045                      __end_of_ADC_Read 09B6  
                                prodh 000FF4                                  prodl 000FF3  
                                start 0092                    ??_LCD_Write_String 0015  
                    __end_of_ADC_init 09D2                      __end_of_ADC_stop 0AE0  
                        ___param_bank 000000                     FSM_begin@moisture 002B  
          Callbacks_Manager@callbacks 0006                      __end_of_LCD_DATA 0802  
                    __end_of_LCD_Init 06E6              ?_SMS_Read_Moisture_Value 0011  
                               ?_main 0001                         _SMS_Set_State 0748  
                               i2l102 0AC2                                 i2l140 09EC  
                               i2l144 0A08                                 i2l235 006E  
                               i2l184 05F2                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _TRISB 000F93  
                               _TRISC 000F94                                 _TRISD 000F95  
              __end_of_LCD_Set_Cursor 0748                                 pclath 000FFA  
                               pclatu 000FFB                                 tablat 000FF5  
                    __end_of_SMS_init 0ACA                                 plusw1 000FE3  
                               plusw2 000FDB                                 ttemp5 0046  
                               ttemp6 0049                                 ttemp7 004D  
                               status 000FD8                                 wtemp8 0046  
                   __end_of_ADC_start 0AD0                        _LCD_Write_Char 08A4  
                     __initialization 08EC                          __end_of_main 098C  
                         i2_set_state 0ABC                   _watering_status_led 0A96  
                      ?_SMS_Set_State 0010                                ??_main 002D  
             i2set_state@state_to_set 0001                     _Check_Moisture_cb 09D2  
                   __end_of_LCD_Clear 0A96                         __activetblptr 000002  
                           ??_LCD_CMD 0010                    ?_Check_Moisture_cb 0001  
                     ?_LCD_Set_Cursor 0011                  ?_watering_status_led 0001  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                 ??_Check_Moisture_cb 0002                                i2l1341 0AE0  
                              i2l1511 0530                                i2l1345 0ABE  
                              i2l1521 05E0                                i2l1513 0546  
                              i2l1505 052C                                i2l1371 0A02  
                              i2l1523 05E2                                i2l1515 057C  
                              i2l1365 09D2                                i2l1517 059E  
                              i2l1367 09E6                                i2l1519 05B6  
                              i2l1551 0042                                i2l1369 09EE  
                              i2l1561 006A                                i2l1553 0052  
                              i2l1545 002A                                i2l1563 006C  
                              i2l1555 0056                                i2l1547 002E  
                              i2l1557 0064                                i2l1549 003E  
                              i2l1559 0068                     __end_of_FSM_begin 052C  
              __end_of_LCD_Write_Char 08EC                         ??_Timer0_init 000F  
     __end_of_SMS_Read_Moisture_Value 0A4E                         ??_Timer0_stop 000F  
           __end_of_Check_Moisture_cb 09EE                                clear_0 0912  
                              clear_1 091E                                isa$std 000001  
                   _Callbacks_Manager 052C                  _registered_callbacks 0060  
                        __pdataCOMRAM 002D                             ?_ADC_Read 000F  
                  ?_Callbacks_Manager 0001                          __mediumconst 0000  
                              tblptrh 000FF7                                tblptrl 000FF6  
                              tblptru 000FF8                             ?_ADC_init 0001  
                           ?_ADC_stop 0001                 ??_watering_status_led 000F  
      FSM_begin@WateringDoneCB_Config 0023                       LCD_Set_Cursor@c 0011  
                     LCD_Set_Cursor@r 0012                   ??_Callbacks_Manager 0002  
                           ?_LCD_DATA 0001                            __accesstop 0060  
             __end_of__initialization 0924                             ?_LCD_Init 0001  
                    _Watering_Done_cb 09EE                         ___rparam_used 000001  
                     ?_LCD_Write_Char 0001                        __pcstackCOMRAM 0001  
                     ??_SMS_Set_State 0012             __end_of_Callbacks_Manager 05F4  
                 __end_of_Timer0_init 0A38                   __end_of_Timer0_stop 0AD4  
   _tmr0Counter@SystemInterrupts$F810 003D            __end_of_timer_overflow_isr 0092  
                           ?_SMS_init 0001                            ??_ADC_Read 0011  
                          ??_ADC_init 000F                            ??_ADC_stop 000F  
__end_of_checking_moisture_status_led 0AB4          _checking_moisture_status_led 0AAA  
                          __pbssBANK0 0060                            ??_LCD_DATA 000F  
          FSM_begin@MoistureCB_Config 001B                            ??_LCD_Init 0011  
                          __pnvCOMRAM 0044                         ?_Timer0_start 0001  
                          ??_SMS_init 000F                               _LCD_CMD 0A0A  
                   ??_ADC_in_progress 000F                               i2u51_40 057C  
                             i2u51_41 0578                               i2u36_40 09E6  
                             i2u52_40 059E                               i2u36_41 09E2  
                             i2u52_41 059A                               i2u37_40 0A02  
                             i2u37_41 09FE                               i2u54_40 05F2  
                             i2u53_48 05CC                               i2u54_41 05EE  
                             i2u53_49 05E0                               i2u55_40 003E  
                             i2u55_41 003A                               i2u56_40 0052  
                             i2u56_41 004E                               i2u57_40 0064  
                             i2u57_41 0060         ?_checking_moisture_status_led 0001  
                           _ADCHSbits 000F99                               __Hparam 0000  
                             __Lparam 0000                        ??_Timer0_start 000F  
                         _Timer0_init 0A22                           _Timer0_stop 0AD0  
                        ?i2_set_state 0001                             _ADC_start 0ACA  
                        __psmallconst 0300                               __pcinit 08EC  
                             __ramtop 0300                      ??_LCD_Set_Cursor 0012  
                             __ptext0 0962                               __ptext1 0AD0  
                             __ptext2 0A22                               __ptext3 035C  
                             __ptext4 0A96                               __ptext5 0932  
                             __ptext6 0AA0                               __ptext7 0AD4  
                             __ptext8 0AAA                               __ptext9 0AD8  
                           _T0CONbits 000FD5                     __end_of_init_leds 0962  
             Register_Callback@config 0011                             _LCD_Clear 0A88  
                end_of_initialization 0924                     ??_idle_status_led 000F  
                       __Lmediumconst 0000                     __end_of_set_state 0ABC  
                           _FSM_begin 035C                             _FSM_state 0044  
                 fp__Watering_Done_cb 0000                            ?_ADC_start 0001  
                             postdec1 000FE5                               postdec2 000FDD  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                             _PORTBbits 000F81  
            __end_of_Watering_Done_cb 0A0A                            LCD_CMD@CMD 0010  
                           _TRISBbits 000F93                            ?_LCD_Clear 0001  
                   LCD_Write_String@i 0017                      ??_LCD_Write_Char 0010  
              Callbacks_Init@callback 000F                         _Reset_Counter 0A4E  
                          ?_FSM_begin 0001                        _Callbacks_Init 0858  
                    _LCD_Write_String 0802                         __pidataCOMRAM 0A78  
         __end_of_watering_status_led 0AA0                   start_initialization 08EC  
             _SMS_Read_Moisture_Value 0A38                   i2_get_current_state 0AE0  
                __end_of_Timer0_start 0ADC                  fp__Check_Moisture_cb 0000  
                  _timer_overflow_isr 0008                        ?_Reset_Counter 000F  
              __end_of_Callbacks_Init 08A4                   ?_timer_overflow_isr 0001  
                ?i2_get_current_state 0001                           ??_ADC_start 000F  
                     _ADC_in_progress 0A64                 __end_of_SMS_Set_State 07A6  
                            ?_LCD_CMD 0001                           __pbssCOMRAM 003D  
                ??_timer_overflow_isr 0007                           ??_LCD_Clear 0011  
                   _Register_Callback 05F4                       ?_Callbacks_Init 0001  
                  ?_Register_Callback 0011                           ??_FSM_begin 0019  
               ??i2_get_current_state 0001                          ?_Timer0_init 0001  
                        ?_Timer0_stop 0001                             __pintcode 0008  
                 ??_Register_Callback 0013                           __smallconst 0300  
                     _idle_status_led 0AA0             ??_SMS_Read_Moisture_Value 0013  
                            _ADC_Read 098C                              _ADC_init 09B6  
                            _ADC_stop 0ADC       SMS_Read_Moisture_Value@moisture 0013  
           __end_of_Register_Callback 066E                             _init_leds 0932  
                     ??_Reset_Counter 0011                              _LCD_DATA 07A6  
                            _LCD_Init 066E               __end_of_ADC_in_progress 0A78  
                            _RCONbits 000FD0                             _set_state 0AB4  
                          _ADCON0bits 000FC2                            _ADCON1bits 000FC1  
                          _ADCON2bits 000FC0                              _SMS_init 0AC4  
                   ?_Watering_Done_cb 0001                   Reset_Counter@config 000F  
                  ??_Watering_Done_cb 0002                            ?_init_leds 0001  
                         _INTCON2bits 000FF1                             copy_data0 0900  
            __end_of_LCD_Write_String 0858                              __Hrparam 0000  
                            __Lrparam 0000                   LCD_Write_Char@High4 0011  
                          ?_set_state 0001                          _Timer0_start 0AD8  
             __end_of_idle_status_led 0AAA                            _ANSEL0bits 000FB8  
                            __ptext10 0AC4                              __ptext11 09B6  
                            __ptext20 0A4E                              __ptext12 0ADC  
                            __ptext21 0802                              __ptext13 0748  
                            __ptext30 052C                              __ptext22 08A4  
                            __ptext14 0AB4                              __ptext31 09D2  
                            __ptext23 06E6                              __ptext15 0A38  
                            __ptext32 09EE                              __ptext24 066E  
                            __ptext16 098C                              __ptext33 0ABC  
                            __ptext25 0A88                              __ptext17 0ACA  
                            __ptext34 0AE0                              __ptext26 0A0A  
                            __ptext18 0A64                              __ptext35 0000  
                            __ptext27 07A6                              __ptext19 05F4  
                            __ptext28 0858                        _callback_count 0043  
                    ?_ADC_in_progress 0001                              isa$xinst 000000  
                   _get_current_state 0AD4                              int$flags 0045  
                         _tmr0Counter 003F                   LCD_Set_Cursor@High4 0014  
                  ?_get_current_state 0001                   ??_get_current_state 000F  
                          _INTCONbits 000FF2                    LCD_Write_Char@Data 0012  
                  LCD_Write_Char@Low4 0010                           ??_init_leds 000F  
                    ??_Callbacks_Init 000F                 SMS_Set_State@moisture 0010  
                            intlevel2 0000             __end_of_get_current_state 0AD8  
                          _OSCCONbits 000FD3                         ??i2_set_state 0001  
                         ??_set_state 000F        ??_checking_moisture_status_led 000F  
                  LCD_Set_Cursor@Low4 0013                    LCD_Set_Cursor@Temp 0015  
                    ?_idle_status_led 0001                          LCD_DATA@Data 000F  
               set_state@state_to_set 000F                        FSM_begin@F2880 002D  
         __end_ofi2_get_current_state 0AE4                        FSM_begin@F2877 0035  
